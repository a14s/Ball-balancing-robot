
Team 12 - Ball Balancing Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08009fac  08009fac  0000afac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a184  0800a184  0000c1cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a184  0800a184  0000b184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a18c  0800a18c  0000c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a18c  0800a18c  0000b18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a190  0800a190  0000b190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800a194  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b8  200001cc  0800a360  0000c1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001684  0800a360  0000c684  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e2a  00000000  00000000  0000c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ad  00000000  00000000  0001d01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  000200d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c25  00000000  00000000  000210e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2b0  00000000  00000000  00021d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d6e  00000000  00000000  0003bfb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d2d9  00000000  00000000  0004fd23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dcffc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b64  00000000  00000000  000dd040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  000e1ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08009f94 	.word	0x08009f94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08009f94 	.word	0x08009f94

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	@ 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ca:	2afd      	cmp	r2, #253	@ 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	@ 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	@ 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	@ 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2iz>:
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800070c:	d30f      	bcc.n	800072e <__aeabi_f2iz+0x2a>
 800070e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d90d      	bls.n	8000734 <__aeabi_f2iz+0x30>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000720:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000724:	fa23 f002 	lsr.w	r0, r3, r2
 8000728:	bf18      	it	ne
 800072a:	4240      	negne	r0, r0
 800072c:	4770      	bx	lr
 800072e:	f04f 0000 	mov.w	r0, #0
 8000732:	4770      	bx	lr
 8000734:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000738:	d101      	bne.n	800073e <__aeabi_f2iz+0x3a>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	d105      	bne.n	800074a <__aeabi_f2iz+0x46>
 800073e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000742:	bf08      	it	eq
 8000744:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr

08000750 <USB_RXCallBack>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USB_RXCallBack(uint8_t* Buf, uint32_t *Len) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]

	memcpy(usbRxBuf, Buf, *Len);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	6879      	ldr	r1, [r7, #4]
 8000762:	4807      	ldr	r0, [pc, #28]	@ (8000780 <USB_RXCallBack+0x30>)
 8000764:	f008 fb44 	bl	8008df0 <memcpy>
	usbRxBufLen = *Len;
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	b29a      	uxth	r2, r3
 800076e:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <USB_RXCallBack+0x34>)
 8000770:	801a      	strh	r2, [r3, #0]
	usbRxFlag = 1;
 8000772:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <USB_RXCallBack+0x38>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]

}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200002b4 	.word	0x200002b4
 8000784:	20000334 	.word	0x20000334
 8000788:	20000336 	.word	0x20000336

0800078c <Camera_ReadData>:
sensorData Camera_ReadData(void) {
 800078c:	b5b0      	push	{r4, r5, r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af02      	add	r7, sp, #8
 8000792:	6078      	str	r0, [r7, #4]

	sensorData data = { 0 };
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]

	if (usbRxFlag && usbRxBufLen) {
 80007a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <Camera_ReadData+0x94>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d02c      	beq.n	8000806 <Camera_ReadData+0x7a>
 80007ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <Camera_ReadData+0x98>)
 80007ae:	881b      	ldrh	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d028      	beq.n	8000806 <Camera_ReadData+0x7a>

		/* Extract Data */
		sscanf((char *)usbRxBuf, "%d,%d", &data.px, &data.py);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	3304      	adds	r3, #4
 80007ba:	f107 020c 	add.w	r2, r7, #12
 80007be:	491a      	ldr	r1, [pc, #104]	@ (8000828 <Camera_ReadData+0x9c>)
 80007c0:	481a      	ldr	r0, [pc, #104]	@ (800082c <Camera_ReadData+0xa0>)
 80007c2:	f008 fab3 	bl	8008d2c <siscanf>

		/* Debug Echo */
		usbTxBufLen = snprintf((char *) usbTxBuf, USB_BUFLEN, "%d,%d\r\n", data.px, data.py);
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	4613      	mov	r3, r2
 80007ce:	4a18      	ldr	r2, [pc, #96]	@ (8000830 <Camera_ReadData+0xa4>)
 80007d0:	2180      	movs	r1, #128	@ 0x80
 80007d2:	4818      	ldr	r0, [pc, #96]	@ (8000834 <Camera_ReadData+0xa8>)
 80007d4:	f008 fa74 	bl	8008cc0 <sniprintf>
 80007d8:	4603      	mov	r3, r0
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <Camera_ReadData+0xac>)
 80007de:	801a      	strh	r2, [r3, #0]
	    CDC_Transmit_FS(usbTxBuf, usbTxBufLen);
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <Camera_ReadData+0xac>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4813      	ldr	r0, [pc, #76]	@ (8000834 <Camera_ReadData+0xa8>)
 80007e8:	f007 fe84 	bl	80084f4 <CDC_Transmit_FS>

	    /* Visual Debug */
	    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f0:	4812      	ldr	r0, [pc, #72]	@ (800083c <Camera_ReadData+0xb0>)
 80007f2:	f000 fecb 	bl	800158c <HAL_GPIO_TogglePin>

	    /* Flag Reset */
		usbRxFlag = 0;
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <Camera_ReadData+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
		usbRxBufLen = 0;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <Camera_ReadData+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	801a      	strh	r2, [r3, #0]

		data.valid = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	61fb      	str	r3, [r7, #28]

	}

	return data;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	461d      	mov	r5, r3
 800080a:	f107 040c 	add.w	r4, r7, #12
 800080e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000812:	6823      	ldr	r3, [r4, #0]
 8000814:	602b      	str	r3, [r5, #0]
}
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	3720      	adds	r7, #32
 800081a:	46bd      	mov	sp, r7
 800081c:	bdb0      	pop	{r4, r5, r7, pc}
 800081e:	bf00      	nop
 8000820:	20000336 	.word	0x20000336
 8000824:	20000334 	.word	0x20000334
 8000828:	08009fac 	.word	0x08009fac
 800082c:	200002b4 	.word	0x200002b4
 8000830:	08009fb4 	.word	0x08009fb4
 8000834:	20000230 	.word	0x20000230
 8000838:	200002b0 	.word	0x200002b0
 800083c:	40011000 	.word	0x40011000

08000840 <PID_Init>:
void PID_Init(PIDController *pid, float Kp, float Ki, float Kd, float dt) {
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
 800084c:	603b      	str	r3, [r7, #0]

  /* Set the Gains */
  pid->Kp = Kp;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	68ba      	ldr	r2, [r7, #8]
 8000852:	601a      	str	r2, [r3, #0]
  pid->Ki = Ki;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	605a      	str	r2, [r3, #4]
  pid->Kd = Kd;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	609a      	str	r2, [r3, #8]

  /* Set the Sampling Period */
  pid->T = dt;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	615a      	str	r2, [r3, #20]

  /* Clear controller variables */
  pid->integrator = 0.0f;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f04f 0200 	mov.w	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  pid->prevError  = 0.0f;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f04f 0200 	mov.w	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  pid->controlSignal = 0.0f;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	f04f 0200 	mov.w	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <PID_Update>:
void PID_Update(PIDController *pid, float error) {
 8000888:	b5b0      	push	{r4, r5, r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]

  /* Proportional */
  float proportional = pid->Kp * error;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	6838      	ldr	r0, [r7, #0]
 800089a:	f7ff fd6d 	bl	8000378 <__aeabi_fmul>
 800089e:	4603      	mov	r3, r0
 80008a0:	60fb      	str	r3, [r7, #12]

  /* Integral */
  pid->integrator += pid->Ki * (error + pid->prevError) * pid->T / 2.0f;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	68dc      	ldr	r4, [r3, #12]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685d      	ldr	r5, [r3, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	6839      	ldr	r1, [r7, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fc59 	bl	8000168 <__addsf3>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4619      	mov	r1, r3
 80008ba:	4628      	mov	r0, r5
 80008bc:	f7ff fd5c 	bl	8000378 <__aeabi_fmul>
 80008c0:	4603      	mov	r3, r0
 80008c2:	461a      	mov	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	4619      	mov	r1, r3
 80008ca:	4610      	mov	r0, r2
 80008cc:	f7ff fd54 	bl	8000378 <__aeabi_fmul>
 80008d0:	4603      	mov	r3, r0
 80008d2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fe02 	bl	80004e0 <__aeabi_fdiv>
 80008dc:	4603      	mov	r3, r0
 80008de:	4619      	mov	r1, r3
 80008e0:	4620      	mov	r0, r4
 80008e2:	f7ff fc41 	bl	8000168 <__addsf3>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	60da      	str	r2, [r3, #12]

  /* Derivative */
  float differentiator = pid->Kd * (error - pid->prevError) / pid->T;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689c      	ldr	r4, [r3, #8]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	4619      	mov	r1, r3
 80008f8:	6838      	ldr	r0, [r7, #0]
 80008fa:	f7ff fc33 	bl	8000164 <__aeabi_fsub>
 80008fe:	4603      	mov	r3, r0
 8000900:	4619      	mov	r1, r3
 8000902:	4620      	mov	r0, r4
 8000904:	f7ff fd38 	bl	8000378 <__aeabi_fmul>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	4619      	mov	r1, r3
 8000912:	4610      	mov	r0, r2
 8000914:	f7ff fde4 	bl	80004e0 <__aeabi_fdiv>
 8000918:	4603      	mov	r3, r0
 800091a:	60bb      	str	r3, [r7, #8]

  /* Compute output */
  pid->controlSignal = proportional + pid->integrator + differentiator;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	68f9      	ldr	r1, [r7, #12]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fc20 	bl	8000168 <__addsf3>
 8000928:	4603      	mov	r3, r0
 800092a:	68b9      	ldr	r1, [r7, #8]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fc1b 	bl	8000168 <__addsf3>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	619a      	str	r2, [r3, #24]

  /* Store error for later use */
  pid->prevError = error;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	611a      	str	r2, [r3, #16]

}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bdb0      	pop	{r4, r5, r7, pc}

08000948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b089      	sub	sp, #36	@ 0x24
 800094c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	// Initialize The Controllers
	PID_Init(&rollController, KP, KI, KD, SAMPLING_PERIOD);
 800094e:	4b57      	ldr	r3, [pc, #348]	@ (8000aac <main+0x164>)
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	4b57      	ldr	r3, [pc, #348]	@ (8000ab0 <main+0x168>)
 8000954:	f04f 0200 	mov.w	r2, #0
 8000958:	4956      	ldr	r1, [pc, #344]	@ (8000ab4 <main+0x16c>)
 800095a:	4857      	ldr	r0, [pc, #348]	@ (8000ab8 <main+0x170>)
 800095c:	f7ff ff70 	bl	8000840 <PID_Init>
	PID_Init(&pitchController, KP, KI, KD, SAMPLING_PERIOD);
 8000960:	4b52      	ldr	r3, [pc, #328]	@ (8000aac <main+0x164>)
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	4b52      	ldr	r3, [pc, #328]	@ (8000ab0 <main+0x168>)
 8000966:	f04f 0200 	mov.w	r2, #0
 800096a:	4952      	ldr	r1, [pc, #328]	@ (8000ab4 <main+0x16c>)
 800096c:	4853      	ldr	r0, [pc, #332]	@ (8000abc <main+0x174>)
 800096e:	f7ff ff67 	bl	8000840 <PID_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000972:	f000 faff 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000976:	f000 f8b1 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f000 f989 	bl	8000c90 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800097e:	f007 fcf7 	bl	8008370 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000982:	f000 f905 	bl	8000b90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000986:	2104      	movs	r1, #4
 8000988:	484d      	ldr	r0, [pc, #308]	@ (8000ac0 <main+0x178>)
 800098a:	f003 f8b5 	bl	8003af8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800098e:	2100      	movs	r1, #0
 8000990:	484b      	ldr	r0, [pc, #300]	@ (8000ac0 <main+0x178>)
 8000992:	f003 f8b1 	bl	8003af8 <HAL_TIM_PWM_Start>
  loopTimerMS = HAL_GetTick();
 8000996:	f000 fb45 	bl	8001024 <HAL_GetTick>
 800099a:	4603      	mov	r3, r0
 800099c:	4a49      	ldr	r2, [pc, #292]	@ (8000ac4 <main+0x17c>)
 800099e:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Feedback
	  sensorData position = Camera_ReadData();
 80009a0:	463b      	mov	r3, r7
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fef2 	bl	800078c <Camera_ReadData>

	  _Bool isPeriodElapsed = (HAL_GetTick() - loopTimerMS) >= (SAMPLING_PERIOD * 1000.0f);
 80009a8:	f000 fb3c 	bl	8001024 <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	4b45      	ldr	r3, [pc, #276]	@ (8000ac4 <main+0x17c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fc87 	bl	80002c8 <__aeabi_ui2f>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2201      	movs	r2, #1
 80009be:	4614      	mov	r4, r2
 80009c0:	4941      	ldr	r1, [pc, #260]	@ (8000ac8 <main+0x180>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fe8a 	bl	80006dc <__aeabi_fcmpge>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d101      	bne.n	80009d2 <main+0x8a>
 80009ce:	2300      	movs	r3, #0
 80009d0:	461c      	mov	r4, r3
 80009d2:	75fc      	strb	r4, [r7, #23]

	  // Controller
	  if (position.valid && isPeriodElapsed) {
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d01d      	beq.n	8000a16 <main+0xce>
 80009da:	7dfb      	ldrb	r3, [r7, #23]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d01a      	beq.n	8000a16 <main+0xce>
		  PID_Update(&rollController, (float)(position.dx - position.px));
 80009e0:	68ba      	ldr	r2, [r7, #8]
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fc72 	bl	80002d0 <__aeabi_i2f>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4619      	mov	r1, r3
 80009f0:	4831      	ldr	r0, [pc, #196]	@ (8000ab8 <main+0x170>)
 80009f2:	f7ff ff49 	bl	8000888 <PID_Update>
		  PID_Update(&pitchController, (float)(position.dy - position.py));
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fc67 	bl	80002d0 <__aeabi_i2f>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4619      	mov	r1, r3
 8000a06:	482d      	ldr	r0, [pc, #180]	@ (8000abc <main+0x174>)
 8000a08:	f7ff ff3e 	bl	8000888 <PID_Update>

		  loopTimerMS += (unsigned long)(SAMPLING_PERIOD * 1000.0f);
 8000a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac4 <main+0x17c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3328      	adds	r3, #40	@ 0x28
 8000a12:	4a2c      	ldr	r2, [pc, #176]	@ (8000ac4 <main+0x17c>)
 8000a14:	6013      	str	r3, [r2, #0]
	  }

	  // Actuator [ 450(min), 550(0deg), 2465(180deg), 2600(max) ]

	  if      (rollController.controlSignal >=  550) rollController.controlSignal =  550;
 8000a16:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <main+0x170>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	492c      	ldr	r1, [pc, #176]	@ (8000acc <main+0x184>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fe5d 	bl	80006dc <__aeabi_fcmpge>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <main+0xe8>
 8000a28:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <main+0x170>)
 8000a2a:	4a28      	ldr	r2, [pc, #160]	@ (8000acc <main+0x184>)
 8000a2c:	619a      	str	r2, [r3, #24]
 8000a2e:	e00b      	b.n	8000a48 <main+0x100>
	  else if (rollController.controlSignal <= -950) rollController.controlSignal = -950;
 8000a30:	4b21      	ldr	r3, [pc, #132]	@ (8000ab8 <main+0x170>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4926      	ldr	r1, [pc, #152]	@ (8000ad0 <main+0x188>)
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe46 	bl	80006c8 <__aeabi_fcmple>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <main+0x100>
 8000a42:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab8 <main+0x170>)
 8000a44:	4a22      	ldr	r2, [pc, #136]	@ (8000ad0 <main+0x188>)
 8000a46:	619a      	str	r2, [r3, #24]

	  if      (pitchController.controlSignal >=  350) pitchController.controlSignal =  350;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <main+0x174>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4921      	ldr	r1, [pc, #132]	@ (8000ad4 <main+0x18c>)
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fe44 	bl	80006dc <__aeabi_fcmpge>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <main+0x11a>
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <main+0x174>)
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad4 <main+0x18c>)
 8000a5e:	619a      	str	r2, [r3, #24]
 8000a60:	e00b      	b.n	8000a7a <main+0x132>
	  else if (pitchController.controlSignal <= -1100) pitchController.controlSignal = -1100;
 8000a62:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <main+0x174>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	491c      	ldr	r1, [pc, #112]	@ (8000ad8 <main+0x190>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fe2d 	bl	80006c8 <__aeabi_fcmple>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <main+0x132>
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <main+0x174>)
 8000a76:	4a18      	ldr	r2, [pc, #96]	@ (8000ad8 <main+0x190>)
 8000a78:	619a      	str	r2, [r3, #24]

	  TIM2->CCR2 = 1515 + (int)rollController.controlSignal;  // 1450 [500,1900]
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <main+0x170>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fe40 	bl	8000704 <__aeabi_f2iz>
 8000a84:	4603      	mov	r3, r0
 8000a86:	f203 52eb 	addw	r2, r3, #1515	@ 0x5eb
 8000a8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a8e:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM2->CCR1 = 1420 - (int)pitchController.controlSignal; // 1300 [950, 2400]
 8000a90:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <main+0x174>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fe35 	bl	8000704 <__aeabi_f2iz>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	f5c3 63b1 	rsb	r3, r3, #1416	@ 0x588
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aa6:	6353      	str	r3, [r2, #52]	@ 0x34
  {
 8000aa8:	e77a      	b.n	80009a0 <main+0x58>
 8000aaa:	bf00      	nop
 8000aac:	3d23d70a 	.word	0x3d23d70a
 8000ab0:	41600000 	.word	0x41600000
 8000ab4:	41200000 	.word	0x41200000
 8000ab8:	2000033c 	.word	0x2000033c
 8000abc:	20000358 	.word	0x20000358
 8000ac0:	200001e8 	.word	0x200001e8
 8000ac4:	20000338 	.word	0x20000338
 8000ac8:	42200000 	.word	0x42200000
 8000acc:	44098000 	.word	0x44098000
 8000ad0:	c46d8000 	.word	0xc46d8000
 8000ad4:	43af0000 	.word	0x43af0000
 8000ad8:	c4898000 	.word	0xc4898000

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b094      	sub	sp, #80	@ 0x50
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ae6:	2228      	movs	r2, #40	@ 0x28
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f008 f94c 	bl	8008d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b28:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 faa4 	bl	8003080 <HAL_RCC_OscConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b3e:	f000 f8f3 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b42:	230f      	movs	r3, #15
 8000b44:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b52:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2102      	movs	r1, #2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 fd10 	bl	8003584 <HAL_RCC_ClockConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b6a:	f000 f8dd 	bl	8000d28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b6e:	2310      	movs	r3, #16
 8000b70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 fe5f 	bl	800383c <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b84:	f000 f8d0 	bl	8000d28 <Error_Handler>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3750      	adds	r7, #80	@ 0x50
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	@ 0x38
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	615a      	str	r2, [r3, #20]
 8000bbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc0:	4b32      	ldr	r3, [pc, #200]	@ (8000c8c <MX_TIM2_Init+0xfc>)
 8000bc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000bc8:	4b30      	ldr	r3, [pc, #192]	@ (8000c8c <MX_TIM2_Init+0xfc>)
 8000bca:	2247      	movs	r2, #71	@ 0x47
 8000bcc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b2f      	ldr	r3, [pc, #188]	@ (8000c8c <MX_TIM2_Init+0xfc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c8c <MX_TIM2_Init+0xfc>)
 8000bd6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000bda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8000c8c <MX_TIM2_Init+0xfc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c8c <MX_TIM2_Init+0xfc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be8:	4828      	ldr	r0, [pc, #160]	@ (8000c8c <MX_TIM2_Init+0xfc>)
 8000bea:	f002 fedd 	bl	80039a8 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000bf4:	f000 f898 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4821      	ldr	r0, [pc, #132]	@ (8000c8c <MX_TIM2_Init+0xfc>)
 8000c06:	f003 f8db 	bl	8003dc0 <HAL_TIM_ConfigClockSource>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c10:	f000 f88a 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c14:	481d      	ldr	r0, [pc, #116]	@ (8000c8c <MX_TIM2_Init+0xfc>)
 8000c16:	f002 ff16 	bl	8003a46 <HAL_TIM_PWM_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c20:	f000 f882 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c2c:	f107 0320 	add.w	r3, r7, #32
 8000c30:	4619      	mov	r1, r3
 8000c32:	4816      	ldr	r0, [pc, #88]	@ (8000c8c <MX_TIM2_Init+0xfc>)
 8000c34:	f003 fc3c 	bl	80044b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c3e:	f000 f873 	bl	8000d28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c42:	2360      	movs	r3, #96	@ 0x60
 8000c44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	4619      	mov	r1, r3
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <MX_TIM2_Init+0xfc>)
 8000c5a:	f002 ffef 	bl	8003c3c <HAL_TIM_PWM_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c64:	f000 f860 	bl	8000d28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4807      	ldr	r0, [pc, #28]	@ (8000c8c <MX_TIM2_Init+0xfc>)
 8000c70:	f002 ffe4 	bl	8003c3c <HAL_TIM_PWM_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000c7a:	f000 f855 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c7e:	4803      	ldr	r0, [pc, #12]	@ (8000c8c <MX_TIM2_Init+0xfc>)
 8000c80:	f000 f8a6 	bl	8000dd0 <HAL_TIM_MspPostInit>

}
 8000c84:	bf00      	nop
 8000c86:	3738      	adds	r7, #56	@ 0x38
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200001e8 	.word	0x200001e8

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <MX_GPIO_Init+0x90>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d20 <MX_GPIO_Init+0x90>)
 8000caa:	f043 0310 	orr.w	r3, r3, #16
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <MX_GPIO_Init+0x90>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <MX_GPIO_Init+0x90>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a17      	ldr	r2, [pc, #92]	@ (8000d20 <MX_GPIO_Init+0x90>)
 8000cc2:	f043 0320 	orr.w	r3, r3, #32
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <MX_GPIO_Init+0x90>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0320 	and.w	r3, r3, #32
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_GPIO_Init+0x90>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a11      	ldr	r2, [pc, #68]	@ (8000d20 <MX_GPIO_Init+0x90>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_GPIO_Init+0x90>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf2:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <MX_GPIO_Init+0x94>)
 8000cf4:	f000 fc32 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000cf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4804      	ldr	r0, [pc, #16]	@ (8000d24 <MX_GPIO_Init+0x94>)
 8000d12:	f000 fa9f 	bl	8001254 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d16:	bf00      	nop
 8000d18:	3720      	adds	r7, #32
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40011000 	.word	0x40011000

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <Error_Handler+0x8>

08000d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <HAL_MspInit+0x5c>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a14      	ldr	r2, [pc, #80]	@ (8000d90 <HAL_MspInit+0x5c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_MspInit+0x5c>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <HAL_MspInit+0x5c>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a0e      	ldr	r2, [pc, #56]	@ (8000d90 <HAL_MspInit+0x5c>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_MspInit+0x5c>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <HAL_MspInit+0x60>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <HAL_MspInit+0x60>)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010000 	.word	0x40010000

08000d98 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000da8:	d10b      	bne.n	8000dc2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <HAL_TIM_Base_MspInit+0x34>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <HAL_TIM_Base_MspInit+0x34>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <HAL_TIM_Base_MspInit+0x34>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0310 	add.w	r3, r7, #16
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dee:	d117      	bne.n	8000e20 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <HAL_TIM_MspPostInit+0x58>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a0c      	ldr	r2, [pc, #48]	@ (8000e28 <HAL_TIM_MspPostInit+0x58>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <HAL_TIM_MspPostInit+0x58>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <HAL_TIM_MspPostInit+0x5c>)
 8000e1c:	f000 fa1a 	bl	8001254 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010800 	.word	0x40010800

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <NMI_Handler+0x4>

08000e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <MemManage_Handler+0x4>

08000e48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e80:	f000 f8be 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000e8e:	f000 fcb2 	bl	80017f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20001044 	.word	0x20001044

08000e9c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ea0:	4802      	ldr	r0, [pc, #8]	@ (8000eac <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ea2:	f000 fca8 	bl	80017f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20001044 	.word	0x20001044

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	@ (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d207      	bcs.n	8000ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee0:	f007 ff5a 	bl	8008d98 <__errno>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	e009      	b.n	8000f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef6:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <_sbrk+0x64>)
 8000f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20005000 	.word	0x20005000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	20000374 	.word	0x20000374
 8000f18:	20001688 	.word	0x20001688

08000f1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f28:	f7ff fff8 	bl	8000f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f2c:	480b      	ldr	r0, [pc, #44]	@ (8000f5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f2e:	490c      	ldr	r1, [pc, #48]	@ (8000f60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f30:	4a0c      	ldr	r2, [pc, #48]	@ (8000f64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a09      	ldr	r2, [pc, #36]	@ (8000f68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f44:	4c09      	ldr	r4, [pc, #36]	@ (8000f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f52:	f007 ff27 	bl	8008da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f56:	f7ff fcf7 	bl	8000948 <main>
  bx lr
 8000f5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000f64:	0800a194 	.word	0x0800a194
  ldr r2, =_sbss
 8000f68:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000f6c:	20001684 	.word	0x20001684

08000f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_2_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <HAL_Init+0x28>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	@ (8000f9c <HAL_Init+0x28>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 f923 	bl	80011d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	200f      	movs	r0, #15
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f7ff fed0 	bl	8000d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f93b 	bl	800123a <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f000 f903 	bl	80011e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	@ (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000004 	.word	0x20000004

08001000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b05      	ldr	r3, [pc, #20]	@ (800101c <HAL_IncTick+0x1c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <HAL_IncTick+0x20>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a03      	ldr	r2, [pc, #12]	@ (8001020 <HAL_IncTick+0x20>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	20000008 	.word	0x20000008
 8001020:	20000378 	.word	0x20000378

08001024 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b02      	ldr	r3, [pc, #8]	@ (8001034 <HAL_GetTick+0x10>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	20000378 	.word	0x20000378

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	@ (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db0b      	blt.n	80010c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 021f 	and.w	r2, r3, #31
 80010b4:	4906      	ldr	r1, [pc, #24]	@ (80010d0 <__NVIC_EnableIRQ+0x34>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	2001      	movs	r0, #1
 80010be:	fa00 f202 	lsl.w	r2, r0, r2
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100

080010d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db0a      	blt.n	80010fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	490c      	ldr	r1, [pc, #48]	@ (8001120 <__NVIC_SetPriority+0x4c>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	440b      	add	r3, r1
 80010f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010fc:	e00a      	b.n	8001114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4908      	ldr	r1, [pc, #32]	@ (8001124 <__NVIC_SetPriority+0x50>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	3b04      	subs	r3, #4
 800110c:	0112      	lsls	r2, r2, #4
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	440b      	add	r3, r1
 8001112:	761a      	strb	r2, [r3, #24]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e100 	.word	0xe000e100
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	@ 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f1c3 0307 	rsb	r3, r3, #7
 8001142:	2b04      	cmp	r3, #4
 8001144:	bf28      	it	cs
 8001146:	2304      	movcs	r3, #4
 8001148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3304      	adds	r3, #4
 800114e:	2b06      	cmp	r3, #6
 8001150:	d902      	bls.n	8001158 <NVIC_EncodePriority+0x30>
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3b03      	subs	r3, #3
 8001156:	e000      	b.n	800115a <NVIC_EncodePriority+0x32>
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	f04f 32ff 	mov.w	r2, #4294967295
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43da      	mvns	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	401a      	ands	r2, r3
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001170:	f04f 31ff 	mov.w	r1, #4294967295
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa01 f303 	lsl.w	r3, r1, r3
 800117a:	43d9      	mvns	r1, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	4313      	orrs	r3, r2
         );
}
 8001182:	4618      	mov	r0, r3
 8001184:	3724      	adds	r7, #36	@ 0x24
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800119c:	d301      	bcc.n	80011a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119e:	2301      	movs	r3, #1
 80011a0:	e00f      	b.n	80011c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a2:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <SysTick_Config+0x40>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011aa:	210f      	movs	r1, #15
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f7ff ff90 	bl	80010d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <SysTick_Config+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <SysTick_Config+0x40>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ff2d 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f8:	f7ff ff42 	bl	8001080 <__NVIC_GetPriorityGrouping>
 80011fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	6978      	ldr	r0, [r7, #20]
 8001204:	f7ff ff90 	bl	8001128 <NVIC_EncodePriority>
 8001208:	4602      	mov	r2, r0
 800120a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff5f 	bl	80010d4 <__NVIC_SetPriority>
}
 8001216:	bf00      	nop
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff35 	bl	800109c <__NVIC_EnableIRQ>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffa2 	bl	800118c <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001254:	b480      	push	{r7}
 8001256:	b08b      	sub	sp, #44	@ 0x2c
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001266:	e169      	b.n	800153c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001268:	2201      	movs	r2, #1
 800126a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	69fa      	ldr	r2, [r7, #28]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 8158 	bne.w	8001536 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4a9a      	ldr	r2, [pc, #616]	@ (80014f4 <HAL_GPIO_Init+0x2a0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d05e      	beq.n	800134e <HAL_GPIO_Init+0xfa>
 8001290:	4a98      	ldr	r2, [pc, #608]	@ (80014f4 <HAL_GPIO_Init+0x2a0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d875      	bhi.n	8001382 <HAL_GPIO_Init+0x12e>
 8001296:	4a98      	ldr	r2, [pc, #608]	@ (80014f8 <HAL_GPIO_Init+0x2a4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d058      	beq.n	800134e <HAL_GPIO_Init+0xfa>
 800129c:	4a96      	ldr	r2, [pc, #600]	@ (80014f8 <HAL_GPIO_Init+0x2a4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d86f      	bhi.n	8001382 <HAL_GPIO_Init+0x12e>
 80012a2:	4a96      	ldr	r2, [pc, #600]	@ (80014fc <HAL_GPIO_Init+0x2a8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d052      	beq.n	800134e <HAL_GPIO_Init+0xfa>
 80012a8:	4a94      	ldr	r2, [pc, #592]	@ (80014fc <HAL_GPIO_Init+0x2a8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d869      	bhi.n	8001382 <HAL_GPIO_Init+0x12e>
 80012ae:	4a94      	ldr	r2, [pc, #592]	@ (8001500 <HAL_GPIO_Init+0x2ac>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d04c      	beq.n	800134e <HAL_GPIO_Init+0xfa>
 80012b4:	4a92      	ldr	r2, [pc, #584]	@ (8001500 <HAL_GPIO_Init+0x2ac>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d863      	bhi.n	8001382 <HAL_GPIO_Init+0x12e>
 80012ba:	4a92      	ldr	r2, [pc, #584]	@ (8001504 <HAL_GPIO_Init+0x2b0>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d046      	beq.n	800134e <HAL_GPIO_Init+0xfa>
 80012c0:	4a90      	ldr	r2, [pc, #576]	@ (8001504 <HAL_GPIO_Init+0x2b0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d85d      	bhi.n	8001382 <HAL_GPIO_Init+0x12e>
 80012c6:	2b12      	cmp	r3, #18
 80012c8:	d82a      	bhi.n	8001320 <HAL_GPIO_Init+0xcc>
 80012ca:	2b12      	cmp	r3, #18
 80012cc:	d859      	bhi.n	8001382 <HAL_GPIO_Init+0x12e>
 80012ce:	a201      	add	r2, pc, #4	@ (adr r2, 80012d4 <HAL_GPIO_Init+0x80>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	0800134f 	.word	0x0800134f
 80012d8:	08001329 	.word	0x08001329
 80012dc:	0800133b 	.word	0x0800133b
 80012e0:	0800137d 	.word	0x0800137d
 80012e4:	08001383 	.word	0x08001383
 80012e8:	08001383 	.word	0x08001383
 80012ec:	08001383 	.word	0x08001383
 80012f0:	08001383 	.word	0x08001383
 80012f4:	08001383 	.word	0x08001383
 80012f8:	08001383 	.word	0x08001383
 80012fc:	08001383 	.word	0x08001383
 8001300:	08001383 	.word	0x08001383
 8001304:	08001383 	.word	0x08001383
 8001308:	08001383 	.word	0x08001383
 800130c:	08001383 	.word	0x08001383
 8001310:	08001383 	.word	0x08001383
 8001314:	08001383 	.word	0x08001383
 8001318:	08001331 	.word	0x08001331
 800131c:	08001345 	.word	0x08001345
 8001320:	4a79      	ldr	r2, [pc, #484]	@ (8001508 <HAL_GPIO_Init+0x2b4>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001326:	e02c      	b.n	8001382 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	623b      	str	r3, [r7, #32]
          break;
 800132e:	e029      	b.n	8001384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	3304      	adds	r3, #4
 8001336:	623b      	str	r3, [r7, #32]
          break;
 8001338:	e024      	b.n	8001384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	3308      	adds	r3, #8
 8001340:	623b      	str	r3, [r7, #32]
          break;
 8001342:	e01f      	b.n	8001384 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	330c      	adds	r3, #12
 800134a:	623b      	str	r3, [r7, #32]
          break;
 800134c:	e01a      	b.n	8001384 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001356:	2304      	movs	r3, #4
 8001358:	623b      	str	r3, [r7, #32]
          break;
 800135a:	e013      	b.n	8001384 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d105      	bne.n	8001370 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001364:	2308      	movs	r3, #8
 8001366:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	611a      	str	r2, [r3, #16]
          break;
 800136e:	e009      	b.n	8001384 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001370:	2308      	movs	r3, #8
 8001372:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	615a      	str	r2, [r3, #20]
          break;
 800137a:	e003      	b.n	8001384 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
          break;
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x130>
          break;
 8001382:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2bff      	cmp	r3, #255	@ 0xff
 8001388:	d801      	bhi.n	800138e <HAL_GPIO_Init+0x13a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	e001      	b.n	8001392 <HAL_GPIO_Init+0x13e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3304      	adds	r3, #4
 8001392:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2bff      	cmp	r3, #255	@ 0xff
 8001398:	d802      	bhi.n	80013a0 <HAL_GPIO_Init+0x14c>
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	e002      	b.n	80013a6 <HAL_GPIO_Init+0x152>
 80013a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a2:	3b08      	subs	r3, #8
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	210f      	movs	r1, #15
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	401a      	ands	r2, r3
 80013b8:	6a39      	ldr	r1, [r7, #32]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	431a      	orrs	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 80b1 	beq.w	8001536 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013d4:	4b4d      	ldr	r3, [pc, #308]	@ (800150c <HAL_GPIO_Init+0x2b8>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a4c      	ldr	r2, [pc, #304]	@ (800150c <HAL_GPIO_Init+0x2b8>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b4a      	ldr	r3, [pc, #296]	@ (800150c <HAL_GPIO_Init+0x2b8>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013ec:	4a48      	ldr	r2, [pc, #288]	@ (8001510 <HAL_GPIO_Init+0x2bc>)
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	220f      	movs	r2, #15
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a40      	ldr	r2, [pc, #256]	@ (8001514 <HAL_GPIO_Init+0x2c0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d013      	beq.n	8001440 <HAL_GPIO_Init+0x1ec>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a3f      	ldr	r2, [pc, #252]	@ (8001518 <HAL_GPIO_Init+0x2c4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d00d      	beq.n	800143c <HAL_GPIO_Init+0x1e8>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a3e      	ldr	r2, [pc, #248]	@ (800151c <HAL_GPIO_Init+0x2c8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d007      	beq.n	8001438 <HAL_GPIO_Init+0x1e4>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a3d      	ldr	r2, [pc, #244]	@ (8001520 <HAL_GPIO_Init+0x2cc>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d101      	bne.n	8001434 <HAL_GPIO_Init+0x1e0>
 8001430:	2303      	movs	r3, #3
 8001432:	e006      	b.n	8001442 <HAL_GPIO_Init+0x1ee>
 8001434:	2304      	movs	r3, #4
 8001436:	e004      	b.n	8001442 <HAL_GPIO_Init+0x1ee>
 8001438:	2302      	movs	r3, #2
 800143a:	e002      	b.n	8001442 <HAL_GPIO_Init+0x1ee>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <HAL_GPIO_Init+0x1ee>
 8001440:	2300      	movs	r3, #0
 8001442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001444:	f002 0203 	and.w	r2, r2, #3
 8001448:	0092      	lsls	r2, r2, #2
 800144a:	4093      	lsls	r3, r2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001452:	492f      	ldr	r1, [pc, #188]	@ (8001510 <HAL_GPIO_Init+0x2bc>)
 8001454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800146c:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	492c      	ldr	r1, [pc, #176]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4313      	orrs	r3, r2
 8001476:	608b      	str	r3, [r1, #8]
 8001478:	e006      	b.n	8001488 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800147a:	4b2a      	ldr	r3, [pc, #168]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	43db      	mvns	r3, r3
 8001482:	4928      	ldr	r1, [pc, #160]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 8001484:	4013      	ands	r3, r2
 8001486:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001494:	4b23      	ldr	r3, [pc, #140]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	4922      	ldr	r1, [pc, #136]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	4313      	orrs	r3, r2
 800149e:	60cb      	str	r3, [r1, #12]
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014a2:	4b20      	ldr	r3, [pc, #128]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	491e      	ldr	r1, [pc, #120]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014bc:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4918      	ldr	r1, [pc, #96]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ca:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4914      	ldr	r1, [pc, #80]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d021      	beq.n	8001528 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	490e      	ldr	r1, [pc, #56]	@ (8001524 <HAL_GPIO_Init+0x2d0>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]
 80014f0:	e021      	b.n	8001536 <HAL_GPIO_Init+0x2e2>
 80014f2:	bf00      	nop
 80014f4:	10320000 	.word	0x10320000
 80014f8:	10310000 	.word	0x10310000
 80014fc:	10220000 	.word	0x10220000
 8001500:	10210000 	.word	0x10210000
 8001504:	10120000 	.word	0x10120000
 8001508:	10110000 	.word	0x10110000
 800150c:	40021000 	.word	0x40021000
 8001510:	40010000 	.word	0x40010000
 8001514:	40010800 	.word	0x40010800
 8001518:	40010c00 	.word	0x40010c00
 800151c:	40011000 	.word	0x40011000
 8001520:	40011400 	.word	0x40011400
 8001524:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001528:	4b0b      	ldr	r3, [pc, #44]	@ (8001558 <HAL_GPIO_Init+0x304>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	43db      	mvns	r3, r3
 8001530:	4909      	ldr	r1, [pc, #36]	@ (8001558 <HAL_GPIO_Init+0x304>)
 8001532:	4013      	ands	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001538:	3301      	adds	r3, #1
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	fa22 f303 	lsr.w	r3, r2, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	f47f ae8e 	bne.w	8001268 <HAL_GPIO_Init+0x14>
  }
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	372c      	adds	r7, #44	@ 0x2c
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40010400 	.word	0x40010400

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001578:	e003      	b.n	8001582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	611a      	str	r2, [r3, #16]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4013      	ands	r3, r2
 80015a4:	041a      	lsls	r2, r3, #16
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43d9      	mvns	r1, r3
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	400b      	ands	r3, r1
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	611a      	str	r2, [r3, #16]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0e8      	b.n	80017a2 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d106      	bne.n	80015ea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f007 f8b9 	bl	800875c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2203      	movs	r2, #3
 80015ee:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 ffd8 	bl	80045b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3304      	adds	r3, #4
 800160a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160c:	f002 ffae 	bl	800456c <USB_CoreInit>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2202      	movs	r2, #2
 800161a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0bf      	b.n	80017a2 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f002 ffdc 	bl	80045e6 <USB_SetCurrentMode>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0b0      	b.n	80017a2 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	e03e      	b.n	80016c4 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	3311      	adds	r3, #17
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	3310      	adds	r3, #16
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800166e:	7bfa      	ldrb	r2, [r7, #15]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	3313      	adds	r3, #19
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	3320      	adds	r3, #32
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	3324      	adds	r3, #36	@ 0x24
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	440b      	add	r3, r1
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	3301      	adds	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	791b      	ldrb	r3, [r3, #4]
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d3bb      	bcc.n	8001646 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	e044      	b.n	800175e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	440b      	add	r3, r1
 80016e2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	440b      	add	r3, r1
 80016f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016fc:	7bfa      	ldrb	r2, [r7, #15]
 80016fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001716:	7bfa      	ldrb	r2, [r7, #15]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800172c:	7bfa      	ldrb	r2, [r7, #15]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	440b      	add	r3, r1
 800173a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	440b      	add	r3, r1
 8001750:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	3301      	adds	r3, #1
 800175c:	73fb      	strb	r3, [r7, #15]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	791b      	ldrb	r3, [r3, #4]
 8001762:	7bfa      	ldrb	r2, [r7, #15]
 8001764:	429a      	cmp	r2, r3
 8001766:	d3b5      	bcc.n	80016d4 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3304      	adds	r3, #4
 8001770:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001772:	f002 ff44 	bl	80045fe <USB_DevInit>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e00c      	b.n	80017a2 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f005 f9c3 	bl	8006b26 <USB_DevDisconnect>

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_PCD_Start+0x16>
 80017bc:	2302      	movs	r3, #2
 80017be:	e016      	b.n	80017ee <HAL_PCD_Start+0x44>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 feda 	bl	8004586 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017d2:	2101      	movs	r1, #1
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f007 fa3c 	bl	8008c52 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f005 f997 	bl	8006b12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b088      	sub	sp, #32
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f005 f999 	bl	8006b3a <USB_ReadInterrupts>
 8001808:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fb1a 	bl	8001e4e <PCD_EP_ISR_Handler>

    return;
 800181a:	e119      	b.n	8001a50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001822:	2b00      	cmp	r3, #0
 8001824:	d013      	beq.n	800184e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800182e:	b29a      	uxth	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001838:	b292      	uxth	r2, r2
 800183a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f007 f80f 	bl	8008862 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001844:	2100      	movs	r1, #0
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f905 	bl	8001a56 <HAL_PCD_SetAddress>

    return;
 800184c:	e100      	b.n	8001a50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00c      	beq.n	8001872 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001860:	b29a      	uxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800186a:	b292      	uxth	r2, r2
 800186c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001870:	e0ee      	b.n	8001a50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00c      	beq.n	8001896 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001884:	b29a      	uxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800188e:	b292      	uxth	r2, r2
 8001890:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001894:	e0dc      	b.n	8001a50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d027      	beq.n	80018f0 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0204 	bic.w	r2, r2, #4
 80018b2:	b292      	uxth	r2, r2
 80018b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0208 	bic.w	r2, r2, #8
 80018ca:	b292      	uxth	r2, r2
 80018cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f006 ffff 	bl	80088d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80018de:	b29a      	uxth	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018e8:	b292      	uxth	r2, r2
 80018ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80018ee:	e0af      	b.n	8001a50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8083 	beq.w	8001a02 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	77fb      	strb	r3, [r7, #31]
 8001900:	e010      	b.n	8001924 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	7ffb      	ldrb	r3, [r7, #31]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	441a      	add	r2, r3
 800190e:	7ffb      	ldrb	r3, [r7, #31]
 8001910:	8812      	ldrh	r2, [r2, #0]
 8001912:	b292      	uxth	r2, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	3320      	adds	r3, #32
 8001918:	443b      	add	r3, r7
 800191a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800191e:	7ffb      	ldrb	r3, [r7, #31]
 8001920:	3301      	adds	r3, #1
 8001922:	77fb      	strb	r3, [r7, #31]
 8001924:	7ffb      	ldrb	r3, [r7, #31]
 8001926:	2b07      	cmp	r3, #7
 8001928:	d9eb      	bls.n	8001902 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001932:	b29a      	uxth	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f042 0201 	orr.w	r2, r2, #1
 800193c:	b292      	uxth	r2, r2
 800193e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800194a:	b29a      	uxth	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	b292      	uxth	r2, r2
 8001956:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800195a:	bf00      	nop
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001964:	b29b      	uxth	r3, r3
 8001966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f6      	beq.n	800195c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001980:	b292      	uxth	r2, r2
 8001982:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001986:	2300      	movs	r3, #0
 8001988:	77fb      	strb	r3, [r7, #31]
 800198a:	e00f      	b.n	80019ac <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800198c:	7ffb      	ldrb	r3, [r7, #31]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	4611      	mov	r1, r2
 8001994:	7ffa      	ldrb	r2, [r7, #31]
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	440a      	add	r2, r1
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	3320      	adds	r3, #32
 800199e:	443b      	add	r3, r7
 80019a0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80019a4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80019a6:	7ffb      	ldrb	r3, [r7, #31]
 80019a8:	3301      	adds	r3, #1
 80019aa:	77fb      	strb	r3, [r7, #31]
 80019ac:	7ffb      	ldrb	r3, [r7, #31]
 80019ae:	2b07      	cmp	r3, #7
 80019b0:	d9ec      	bls.n	800198c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0208 	orr.w	r2, r2, #8
 80019c4:	b292      	uxth	r2, r2
 80019c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019dc:	b292      	uxth	r2, r2
 80019de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0204 	orr.w	r2, r2, #4
 80019f4:	b292      	uxth	r2, r2
 80019f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f006 ff50 	bl	80088a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a00:	e026      	b.n	8001a50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00f      	beq.n	8001a2c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a1e:	b292      	uxth	r2, r2
 8001a20:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f006 ff0e 	bl	8008846 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a2a:	e011      	b.n	8001a50 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00c      	beq.n	8001a50 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a48:	b292      	uxth	r2, r2
 8001a4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001a4e:	bf00      	nop
  }
}
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d101      	bne.n	8001a70 <HAL_PCD_SetAddress+0x1a>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e012      	b.n	8001a96 <HAL_PCD_SetAddress+0x40>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	78fa      	ldrb	r2, [r7, #3]
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f005 f830 	bl	8006aec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	4608      	mov	r0, r1
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	70fb      	strb	r3, [r7, #3]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	803b      	strh	r3, [r7, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	da0e      	bge.n	8001ae2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	f003 0207 	and.w	r2, r3, #7
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	3310      	adds	r3, #16
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	705a      	strb	r2, [r3, #1]
 8001ae0:	e00e      	b.n	8001b00 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	f003 0207 	and.w	r2, r3, #7
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b0c:	883a      	ldrh	r2, [r7, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	78ba      	ldrb	r2, [r7, #2]
 8001b16:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b18:	78bb      	ldrb	r3, [r7, #2]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d102      	bne.n	8001b24 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_PCD_EP_Open+0x94>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e00e      	b.n	8001b50 <HAL_PCD_EP_Open+0xb2>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68f9      	ldr	r1, [r7, #12]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 fd79 	bl	8004638 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001b4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da0e      	bge.n	8001b8a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	f003 0207 	and.w	r2, r3, #7
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	3310      	adds	r3, #16
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2201      	movs	r2, #1
 8001b86:	705a      	strb	r2, [r3, #1]
 8001b88:	e00e      	b.n	8001ba8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	f003 0207 	and.w	r2, r3, #7
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_PCD_EP_Close+0x6a>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e00e      	b.n	8001be0 <HAL_PCD_EP_Close+0x88>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68f9      	ldr	r1, [r7, #12]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 f8f1 	bl	8004db8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	f003 0207 	and.w	r2, r3, #7
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2200      	movs	r2, #0
 8001c26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6979      	ldr	r1, [r7, #20]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 faa8 	bl	8005190 <USB_EPStartXfer>

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	f003 0207 	and.w	r2, r3, #7
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	440b      	add	r3, r1
 8001c68:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8001c6c:	681b      	ldr	r3, [r3, #0]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	460b      	mov	r3, r1
 8001c86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c88:	7afb      	ldrb	r3, [r7, #11]
 8001c8a:	f003 0207 	and.w	r2, r3, #7
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	3310      	adds	r3, #16
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6979      	ldr	r1, [r7, #20]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 fa5a 	bl	8005190 <USB_EPStartXfer>

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b084      	sub	sp, #16
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cf2:	78fb      	ldrb	r3, [r7, #3]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	7912      	ldrb	r2, [r2, #4]
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e04c      	b.n	8001d9e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	da0e      	bge.n	8001d2a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 0207 	and.w	r2, r3, #7
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	3310      	adds	r3, #16
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	705a      	strb	r2, [r3, #1]
 8001d28:	e00c      	b.n	8001d44 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_PCD_EP_SetStall+0x7e>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e01c      	b.n	8001d9e <HAL_PCD_EP_SetStall+0xb8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68f9      	ldr	r1, [r7, #12]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f004 fdbd 	bl	80068f2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d108      	bne.n	8001d94 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f004 fee2 	bl	8006b58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	7912      	ldrb	r2, [r2, #4]
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e040      	b.n	8001e46 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	da0e      	bge.n	8001dea <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 0207 	and.w	r2, r3, #7
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	3310      	adds	r3, #16
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	705a      	strb	r2, [r3, #1]
 8001de8:	e00e      	b.n	8001e08 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 0207 	and.w	r2, r3, #7
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_PCD_EP_ClrStall+0x82>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e00e      	b.n	8001e46 <HAL_PCD_EP_ClrStall+0xa0>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68f9      	ldr	r1, [r7, #12]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fdab 	bl	8006992 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b096      	sub	sp, #88	@ 0x58
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e56:	e3bb      	b.n	80025d0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e60:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8001e72:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f040 8175 	bne.w	8002166 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d14e      	bne.n	8001f26 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8001e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e98:	81fb      	strh	r3, [r7, #14]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	89fb      	ldrh	r3, [r7, #14]
 8001ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3310      	adds	r3, #16
 8001eb0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3302      	adds	r3, #2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001edc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	441a      	add	r2, r3
 8001ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001eec:	2100      	movs	r1, #0
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f006 fc8f 	bl	8008812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7b5b      	ldrb	r3, [r3, #13]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8368 	beq.w	80025d0 <PCD_EP_ISR_Handler+0x782>
 8001f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f040 8363 	bne.w	80025d0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7b5b      	ldrb	r3, [r3, #13]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	735a      	strb	r2, [r3, #13]
 8001f24:	e354      	b.n	80025d0 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f2c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d034      	beq.n	8001fae <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	3306      	adds	r3, #6
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f7c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f80:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	f004 fe39 	bl	8006bfa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001f94:	4013      	ands	r3, r2
 8001f96:	823b      	strh	r3, [r7, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	8a3a      	ldrh	r2, [r7, #16]
 8001f9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f006 fc06 	bl	80087b8 <HAL_PCD_SetupStageCallback>
 8001fac:	e310      	b.n	80025d0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f280 830c 	bge.w	80025d0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	83fb      	strh	r3, [r7, #30]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	8bfa      	ldrh	r2, [r7, #30]
 8001fce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001fd2:	b292      	uxth	r2, r2
 8001fd4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3306      	adds	r3, #6
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002000:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d019      	beq.n	800203e <PCD_EP_ISR_Handler+0x1f0>
 800200a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d015      	beq.n	800203e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002018:	6959      	ldr	r1, [r3, #20]
 800201a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800201c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800201e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002020:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002022:	b29b      	uxth	r3, r3
 8002024:	f004 fde9 	bl	8006bfa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	441a      	add	r2, r3
 8002032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002034:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002036:	2100      	movs	r1, #0
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f006 fbcf 	bl	80087dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002048:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800204c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 82bd 	bne.w	80025d0 <PCD_EP_ISR_Handler+0x782>
 8002056:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800205a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800205e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002062:	f000 82b5 	beq.w	80025d0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002074:	b29b      	uxth	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	4413      	add	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002090:	b29a      	uxth	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b3e      	cmp	r3, #62	@ 0x3e
 800209c:	d91d      	bls.n	80020da <PCD_EP_ISR_Handler+0x28c>
 800209e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80020a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <PCD_EP_ISR_Handler+0x26a>
 80020b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b4:	3b01      	subs	r3, #1
 80020b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	029b      	lsls	r3, r3, #10
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	801a      	strh	r2, [r3, #0]
 80020d8:	e026      	b.n	8002128 <PCD_EP_ISR_Handler+0x2da>
 80020da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10a      	bne.n	80020f8 <PCD_EP_ISR_Handler+0x2aa>
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	801a      	strh	r2, [r3, #0]
 80020f6:	e017      	b.n	8002128 <PCD_EP_ISR_Handler+0x2da>
 80020f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <PCD_EP_ISR_Handler+0x2c4>
 800210c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800210e:	3301      	adds	r3, #1
 8002110:	647b      	str	r3, [r7, #68]	@ 0x44
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b29a      	uxth	r2, r3
 8002118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800211a:	b29b      	uxth	r3, r3
 800211c:	029b      	lsls	r3, r3, #10
 800211e:	b29b      	uxth	r3, r3
 8002120:	4313      	orrs	r3, r2
 8002122:	b29a      	uxth	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002138:	827b      	strh	r3, [r7, #18]
 800213a:	8a7b      	ldrh	r3, [r7, #18]
 800213c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002140:	827b      	strh	r3, [r7, #18]
 8002142:	8a7b      	ldrh	r3, [r7, #18]
 8002144:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002148:	827b      	strh	r3, [r7, #18]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	8a7b      	ldrh	r3, [r7, #18]
 8002150:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002154:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002158:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800215c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002160:	b29b      	uxth	r3, r3
 8002162:	8013      	strh	r3, [r2, #0]
 8002164:	e234      	b.n	80025d0 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800217a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800217e:	2b00      	cmp	r3, #0
 8002180:	f280 80fc 	bge.w	800237c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29a      	uxth	r2, r3
 8002196:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800219a:	4013      	ands	r3, r2
 800219c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80021b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021b6:	b292      	uxth	r2, r2
 80021b8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021ba:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d2:	7b1b      	ldrb	r3, [r3, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d125      	bne.n	8002224 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	3306      	adds	r3, #6
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002200:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002204:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8092 	beq.w	8002332 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002214:	6959      	ldr	r1, [r3, #20]
 8002216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002218:	88da      	ldrh	r2, [r3, #6]
 800221a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800221e:	f004 fcec 	bl	8006bfa <USB_ReadPMA>
 8002222:	e086      	b.n	8002332 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002226:	78db      	ldrb	r3, [r3, #3]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d10a      	bne.n	8002242 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800222c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002230:	461a      	mov	r2, r3
 8002232:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f9d9 	bl	80025ec <HAL_PCD_EP_DB_Receive>
 800223a:	4603      	mov	r3, r0
 800223c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002240:	e077      	b.n	8002332 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800225c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	441a      	add	r2, r3
 800226e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002272:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002276:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800227a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800227e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002282:	b29b      	uxth	r3, r3
 8002284:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d024      	beq.n	80022ea <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	3302      	adds	r3, #2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80022cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d02e      	beq.n	8002332 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022da:	6959      	ldr	r1, [r3, #20]
 80022dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022de:	891a      	ldrh	r2, [r3, #8]
 80022e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80022e4:	f004 fc89 	bl	8006bfa <USB_ReadPMA>
 80022e8:	e023      	b.n	8002332 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	3306      	adds	r3, #6
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	4413      	add	r3, r2
 8002308:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002312:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002316:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002324:	6959      	ldr	r1, [r3, #20]
 8002326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002328:	895a      	ldrh	r2, [r3, #10]
 800232a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800232e:	f004 fc64 	bl	8006bfa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800233a:	441a      	add	r2, r3
 800233c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800233e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002348:	441a      	add	r2, r3
 800234a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800234c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800234e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <PCD_EP_ISR_Handler+0x514>
 8002356:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800235a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	d206      	bcs.n	8002370 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f006 fa37 	bl	80087dc <HAL_PCD_DataOutStageCallback>
 800236e:	e005      	b.n	800237c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002376:	4618      	mov	r0, r3
 8002378:	f002 ff0a 	bl	8005190 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800237c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8123 	beq.w	80025d0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800238a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	3310      	adds	r3, #16
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80023b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023b8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80023ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80023da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023dc:	78db      	ldrb	r3, [r3, #3]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	f040 80a2 	bne.w	8002528 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80023e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80023ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ec:	7b1b      	ldrb	r3, [r3, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8093 	beq.w	800251a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80023f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d046      	beq.n	800248e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d126      	bne.n	8002456 <PCD_EP_ISR_Handler+0x608>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	4413      	add	r3, r2
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	011a      	lsls	r2, r3, #4
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	4413      	add	r3, r2
 800242a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800243a:	b29a      	uxth	r2, r3
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	801a      	strh	r2, [r3, #0]
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800244e:	b29a      	uxth	r2, r3
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	e061      	b.n	800251a <PCD_EP_ISR_Handler+0x6cc>
 8002456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002458:	785b      	ldrb	r3, [r3, #1]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d15d      	bne.n	800251a <PCD_EP_ISR_Handler+0x6cc>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800246c:	b29b      	uxth	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002472:	4413      	add	r3, r2
 8002474:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	011a      	lsls	r2, r3, #4
 800247c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247e:	4413      	add	r3, r2
 8002480:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002488:	2200      	movs	r2, #0
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	e045      	b.n	800251a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d126      	bne.n	80024ea <PCD_EP_ISR_Handler+0x69c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b0:	4413      	add	r3, r2
 80024b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80024b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	011a      	lsls	r2, r3, #4
 80024ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024bc:	4413      	add	r3, r2
 80024be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80024c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80024c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e6:	801a      	strh	r2, [r3, #0]
 80024e8:	e017      	b.n	800251a <PCD_EP_ISR_Handler+0x6cc>
 80024ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ec:	785b      	ldrb	r3, [r3, #1]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d113      	bne.n	800251a <PCD_EP_ISR_Handler+0x6cc>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002500:	4413      	add	r3, r2
 8002502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	011a      	lsls	r2, r3, #4
 800250a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800250c:	4413      	add	r3, r2
 800250e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002512:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002516:	2200      	movs	r2, #0
 8002518:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800251a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f006 f976 	bl	8008812 <HAL_PCD_DataInStageCallback>
 8002526:	e053      	b.n	80025d0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002528:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800252c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d146      	bne.n	80025c2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	3302      	adds	r3, #2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	4413      	add	r3, r2
 8002552:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800255c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002562:	699a      	ldr	r2, [r3, #24]
 8002564:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002568:	429a      	cmp	r2, r3
 800256a:	d907      	bls.n	800257c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800256c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002574:	1ad2      	subs	r2, r2, r3
 8002576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002578:	619a      	str	r2, [r3, #24]
 800257a:	e002      	b.n	8002582 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800257c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800257e:	2200      	movs	r2, #0
 8002580:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800258a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f006 f93e 	bl	8008812 <HAL_PCD_DataInStageCallback>
 8002596:	e01b      	b.n	80025d0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80025a0:	441a      	add	r2, r3
 80025a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80025a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80025ae:	441a      	add	r2, r3
 80025b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025b2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 fde8 	bl	8005190 <USB_EPStartXfer>
 80025c0:	e006      	b.n	80025d0 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025c6:	461a      	mov	r2, r3
 80025c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f91b 	bl	8002806 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80025d8:	b29b      	uxth	r3, r3
 80025da:	b21b      	sxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f6ff ac3b 	blt.w	8001e58 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3758      	adds	r7, #88	@ 0x58
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d07e      	beq.n	8002702 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800260c:	b29b      	uxth	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	3302      	adds	r3, #2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800262c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	8b7b      	ldrh	r3, [r7, #26]
 8002634:	429a      	cmp	r2, r3
 8002636:	d306      	bcc.n	8002646 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	699a      	ldr	r2, [r3, #24]
 800263c:	8b7b      	ldrh	r3, [r7, #26]
 800263e:	1ad2      	subs	r2, r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	619a      	str	r2, [r3, #24]
 8002644:	e002      	b.n	800264c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d123      	bne.n	800269c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800266a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800266e:	833b      	strh	r3, [r7, #24]
 8002670:	8b3b      	ldrh	r3, [r7, #24]
 8002672:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002676:	833b      	strh	r3, [r7, #24]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	441a      	add	r2, r3
 8002686:	8b3b      	ldrh	r3, [r7, #24]
 8002688:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800268c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002690:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002698:	b29b      	uxth	r3, r3
 800269a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01f      	beq.n	80026e6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026c0:	82fb      	strh	r3, [r7, #22]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	441a      	add	r2, r3
 80026d0:	8afb      	ldrh	r3, [r7, #22]
 80026d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80026d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80026da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026e6:	8b7b      	ldrh	r3, [r7, #26]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 8087 	beq.w	80027fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	6959      	ldr	r1, [r3, #20]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	891a      	ldrh	r2, [r3, #8]
 80026fa:	8b7b      	ldrh	r3, [r7, #26]
 80026fc:	f004 fa7d 	bl	8006bfa <USB_ReadPMA>
 8002700:	e07c      	b.n	80027fc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	3306      	adds	r3, #6
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800272a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	699a      	ldr	r2, [r3, #24]
 8002730:	8b7b      	ldrh	r3, [r7, #26]
 8002732:	429a      	cmp	r2, r3
 8002734:	d306      	bcc.n	8002744 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	8b7b      	ldrh	r3, [r7, #26]
 800273c:	1ad2      	subs	r2, r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	619a      	str	r2, [r3, #24]
 8002742:	e002      	b.n	800274a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d123      	bne.n	800279a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800276c:	83fb      	strh	r3, [r7, #30]
 800276e:	8bfb      	ldrh	r3, [r7, #30]
 8002770:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002774:	83fb      	strh	r3, [r7, #30]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	441a      	add	r2, r3
 8002784:	8bfb      	ldrh	r3, [r7, #30]
 8002786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800278a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800278e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002796:	b29b      	uxth	r3, r3
 8002798:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d11f      	bne.n	80027e4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027be:	83bb      	strh	r3, [r7, #28]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	441a      	add	r2, r3
 80027ce:	8bbb      	ldrh	r3, [r7, #28]
 80027d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027e4:	8b7b      	ldrh	r3, [r7, #26]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	6959      	ldr	r1, [r3, #20]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	895a      	ldrh	r2, [r3, #10]
 80027f6:	8b7b      	ldrh	r3, [r7, #26]
 80027f8:	f004 f9ff 	bl	8006bfa <USB_ReadPMA>
    }
  }

  return count;
 80027fc:	8b7b      	ldrh	r3, [r7, #26]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b0a4      	sub	sp, #144	@ 0x90
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	4613      	mov	r3, r2
 8002812:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 81dd 	beq.w	8002bda <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	3302      	adds	r3, #2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002848:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002854:	429a      	cmp	r2, r3
 8002856:	d907      	bls.n	8002868 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002860:	1ad2      	subs	r2, r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	619a      	str	r2, [r3, #24]
 8002866:	e002      	b.n	800286e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2200      	movs	r2, #0
 800286c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 80b9 	bne.w	80029ea <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	785b      	ldrb	r3, [r3, #1]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d126      	bne.n	80028ce <HAL_PCD_EP_DB_Transmit+0xc8>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002894:	4413      	add	r3, r2
 8002896:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	011a      	lsls	r2, r3, #4
 800289e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a0:	4413      	add	r3, r2
 80028a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80028a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b6:	801a      	strh	r2, [r3, #0]
 80028b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ca:	801a      	strh	r2, [r3, #0]
 80028cc:	e01a      	b.n	8002904 <HAL_PCD_EP_DB_Transmit+0xfe>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d116      	bne.n	8002904 <HAL_PCD_EP_DB_Transmit+0xfe>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	637b      	str	r3, [r7, #52]	@ 0x34
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ea:	4413      	add	r3, r2
 80028ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	011a      	lsls	r2, r3, #4
 80028f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f6:	4413      	add	r3, r2
 80028f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80028fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80028fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002900:	2200      	movs	r2, #0
 8002902:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	627b      	str	r3, [r7, #36]	@ 0x24
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	785b      	ldrb	r3, [r3, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d126      	bne.n	8002960 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002920:	b29b      	uxth	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	011a      	lsls	r2, r3, #4
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	4413      	add	r3, r2
 8002934:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002944:	b29a      	uxth	r2, r3
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	801a      	strh	r2, [r3, #0]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002958:	b29a      	uxth	r2, r3
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	801a      	strh	r2, [r3, #0]
 800295e:	e017      	b.n	8002990 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	785b      	ldrb	r3, [r3, #1]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d113      	bne.n	8002990 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	4413      	add	r3, r2
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	011a      	lsls	r2, r3, #4
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	4413      	add	r3, r2
 8002984:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002988:	623b      	str	r3, [r7, #32]
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	2200      	movs	r2, #0
 800298e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	4619      	mov	r1, r3
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f005 ff3b 	bl	8008812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 82fc 	beq.w	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029c2:	82fb      	strh	r3, [r7, #22]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	441a      	add	r2, r3
 80029d2:	8afb      	ldrh	r3, [r7, #22]
 80029d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80029d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80029dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	8013      	strh	r3, [r2, #0]
 80029e8:	e2da      	b.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d021      	beq.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a0e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	441a      	add	r2, r3
 8002a20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002a24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	f040 82ae 	bne.w	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a4c:	441a      	add	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a5a:	441a      	add	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	6a1a      	ldr	r2, [r3, #32]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d30b      	bcc.n	8002a84 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	6a1a      	ldr	r2, [r3, #32]
 8002a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a7c:	1ad2      	subs	r2, r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	621a      	str	r2, [r3, #32]
 8002a82:	e017      	b.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d108      	bne.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002a8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002a90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002a9c:	e00a      	b.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	785b      	ldrb	r3, [r3, #1]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d165      	bne.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x382>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ad0:	4413      	add	r3, r2
 8002ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	011a      	lsls	r2, r3, #4
 8002ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002adc:	4413      	add	r3, r2
 8002ade:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af2:	801a      	strh	r2, [r3, #0]
 8002af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002af8:	2b3e      	cmp	r3, #62	@ 0x3e
 8002afa:	d91d      	bls.n	8002b38 <HAL_PCD_EP_DB_Transmit+0x332>
 8002afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <HAL_PCD_EP_DB_Transmit+0x310>
 8002b10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b12:	3b01      	subs	r3, #1
 8002b14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	029b      	lsls	r3, r3, #10
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	4313      	orrs	r3, r2
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b34:	801a      	strh	r2, [r3, #0]
 8002b36:	e044      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x350>
 8002b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b52:	801a      	strh	r2, [r3, #0]
 8002b54:	e035      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002b6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b84:	801a      	strh	r2, [r3, #0]
 8002b86:	e01c      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d118      	bne.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba4:	4413      	add	r3, r2
 8002ba6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	011a      	lsls	r2, r3, #4
 8002bae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002bb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6959      	ldr	r1, [r3, #20]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	891a      	ldrh	r2, [r3, #8]
 8002bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f003 ffcb 	bl	8006b6e <USB_WritePMA>
 8002bd8:	e1e2      	b.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	3306      	adds	r3, #6
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c02:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d307      	bcc.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c1a:	1ad2      	subs	r2, r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	619a      	str	r2, [r3, #24]
 8002c20:	e002      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f040 80c0 	bne.w	8002db2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d126      	bne.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x482>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c4e:	4413      	add	r3, r2
 8002c50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	011a      	lsls	r2, r3, #4
 8002c58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c70:	801a      	strh	r2, [r3, #0]
 8002c72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c84:	801a      	strh	r2, [r3, #0]
 8002c86:	e01a      	b.n	8002cbe <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d116      	bne.n	8002cbe <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ca4:	4413      	add	r3, r2
 8002ca6:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	011a      	lsls	r2, r3, #4
 8002cae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002cb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cba:	2200      	movs	r2, #0
 8002cbc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	785b      	ldrb	r3, [r3, #1]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d12b      	bne.n	8002d24 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ce0:	4413      	add	r3, r2
 8002ce2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	011a      	lsls	r2, r3, #4
 8002cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cec:	4413      	add	r3, r2
 8002cee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cf2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d08:	801a      	strh	r2, [r3, #0]
 8002d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d20:	801a      	strh	r2, [r3, #0]
 8002d22:	e017      	b.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	785b      	ldrb	r3, [r3, #1]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d113      	bne.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d3a:	4413      	add	r3, r2
 8002d3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	011a      	lsls	r2, r3, #4
 8002d44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d46:	4413      	add	r3, r2
 8002d48:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d50:	2200      	movs	r2, #0
 8002d52:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f005 fd59 	bl	8008812 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 811a 	bne.w	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d86:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	441a      	add	r2, r3
 8002d98:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002d9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002da0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002da4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	8013      	strh	r3, [r2, #0]
 8002db0:	e0f6      	b.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d121      	bne.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dd6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	441a      	add	r2, r3
 8002de8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002df4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002df8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	f040 80ca 	bne.w	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e14:	441a      	add	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e22:	441a      	add	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d30b      	bcc.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e44:	1ad2      	subs	r2, r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	621a      	str	r2, [r3, #32]
 8002e4a:	e017      	b.n	8002e7c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d108      	bne.n	8002e66 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002e54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002e64:	e00a      	b.n	8002e7c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	785b      	ldrb	r3, [r3, #1]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d165      	bne.n	8002f56 <HAL_PCD_EP_DB_Transmit+0x750>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e9e:	4413      	add	r3, r2
 8002ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	011a      	lsls	r2, r3, #4
 8002ea8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eaa:	4413      	add	r3, r2
 8002eac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002eb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002eb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ec0:	801a      	strh	r2, [r3, #0]
 8002ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ec6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002ec8:	d91d      	bls.n	8002f06 <HAL_PCD_EP_DB_Transmit+0x700>
 8002eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002ede:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	029b      	lsls	r3, r3, #10
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f02:	801a      	strh	r2, [r3, #0]
 8002f04:	e041      	b.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10a      	bne.n	8002f24 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002f0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f20:	801a      	strh	r2, [r3, #0]
 8002f22:	e032      	b.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_PCD_EP_DB_Transmit+0x738>
 8002f38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	029b      	lsls	r3, r3, #10
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f52:	801a      	strh	r2, [r3, #0]
 8002f54:	e019      	b.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d115      	bne.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f6c:	4413      	add	r3, r2
 8002f6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	011a      	lsls	r2, r3, #4
 8002f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f78:	4413      	add	r3, r2
 8002f7a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f88:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6959      	ldr	r1, [r3, #20]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	895a      	ldrh	r2, [r3, #10]
 8002f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f003 fde7 	bl	8006b6e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fba:	82bb      	strh	r3, [r7, #20]
 8002fbc:	8abb      	ldrh	r3, [r7, #20]
 8002fbe:	f083 0310 	eor.w	r3, r3, #16
 8002fc2:	82bb      	strh	r3, [r7, #20]
 8002fc4:	8abb      	ldrh	r3, [r7, #20]
 8002fc6:	f083 0320 	eor.w	r3, r3, #32
 8002fca:	82bb      	strh	r3, [r7, #20]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	441a      	add	r2, r3
 8002fda:	8abb      	ldrh	r3, [r7, #20]
 8002fdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002fe0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002fe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3790      	adds	r7, #144	@ 0x90
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b087      	sub	sp, #28
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	607b      	str	r3, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	817b      	strh	r3, [r7, #10]
 8003008:	4613      	mov	r3, r2
 800300a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800300c:	897b      	ldrh	r3, [r7, #10]
 800300e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003018:	897b      	ldrh	r3, [r7, #10]
 800301a:	f003 0207 	and.w	r2, r3, #7
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	3310      	adds	r3, #16
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	e009      	b.n	8003044 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003030:	897a      	ldrh	r2, [r7, #10]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4413      	add	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003044:	893b      	ldrh	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d107      	bne.n	800305a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2200      	movs	r2, #0
 800304e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	b29a      	uxth	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	80da      	strh	r2, [r3, #6]
 8003058:	e00b      	b.n	8003072 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2201      	movs	r2, #1
 800305e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	b29a      	uxth	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0c1b      	lsrs	r3, r3, #16
 800306c:	b29a      	uxth	r2, r3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
	...

08003080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e272      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8087 	beq.w	80031ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a0:	4b92      	ldr	r3, [pc, #584]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d00c      	beq.n	80030c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030ac:	4b8f      	ldr	r3, [pc, #572]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d112      	bne.n	80030de <HAL_RCC_OscConfig+0x5e>
 80030b8:	4b8c      	ldr	r3, [pc, #560]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c4:	d10b      	bne.n	80030de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c6:	4b89      	ldr	r3, [pc, #548]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d06c      	beq.n	80031ac <HAL_RCC_OscConfig+0x12c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d168      	bne.n	80031ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e24c      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_OscConfig+0x76>
 80030e8:	4b80      	ldr	r3, [pc, #512]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a7f      	ldr	r2, [pc, #508]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	e02e      	b.n	8003154 <HAL_RCC_OscConfig+0xd4>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x98>
 80030fe:	4b7b      	ldr	r3, [pc, #492]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a7a      	ldr	r2, [pc, #488]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b78      	ldr	r3, [pc, #480]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a77      	ldr	r2, [pc, #476]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003110:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0xd4>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0xbc>
 8003122:	4b72      	ldr	r3, [pc, #456]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a71      	ldr	r2, [pc, #452]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b6f      	ldr	r3, [pc, #444]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6e      	ldr	r2, [pc, #440]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xd4>
 800313c:	4b6b      	ldr	r3, [pc, #428]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a6a      	ldr	r2, [pc, #424]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b68      	ldr	r3, [pc, #416]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a67      	ldr	r2, [pc, #412]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003152:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fd ff62 	bl	8001024 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003164:	f7fd ff5e 	bl	8001024 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	@ 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e200      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b5d      	ldr	r3, [pc, #372]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0xe4>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fd ff4e 	bl	8001024 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7fd ff4a 	bl	8001024 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	@ 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1ec      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b53      	ldr	r3, [pc, #332]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x10c>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d063      	beq.n	8003282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ba:	4b4c      	ldr	r3, [pc, #304]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031c6:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d11c      	bne.n	800320c <HAL_RCC_OscConfig+0x18c>
 80031d2:	4b46      	ldr	r3, [pc, #280]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d116      	bne.n	800320c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	4b43      	ldr	r3, [pc, #268]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x176>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1c0      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b3d      	ldr	r3, [pc, #244]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4939      	ldr	r1, [pc, #228]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	e03a      	b.n	8003282 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003214:	4b36      	ldr	r3, [pc, #216]	@ (80032f0 <HAL_RCC_OscConfig+0x270>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fd ff03 	bl	8001024 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003222:	f7fd feff 	bl	8001024 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1a1      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	4b2d      	ldr	r3, [pc, #180]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b2a      	ldr	r3, [pc, #168]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4927      	ldr	r1, [pc, #156]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	e015      	b.n	8003282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003256:	4b26      	ldr	r3, [pc, #152]	@ (80032f0 <HAL_RCC_OscConfig+0x270>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fd fee2 	bl	8001024 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003264:	f7fd fede 	bl	8001024 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e180      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	4b1d      	ldr	r3, [pc, #116]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d03a      	beq.n	8003304 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d019      	beq.n	80032ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b17      	ldr	r3, [pc, #92]	@ (80032f4 <HAL_RCC_OscConfig+0x274>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329c:	f7fd fec2 	bl	8001024 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a4:	f7fd febe 	bl	8001024 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e160      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	4b0d      	ldr	r3, [pc, #52]	@ (80032ec <HAL_RCC_OscConfig+0x26c>)
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032c2:	2001      	movs	r0, #1
 80032c4:	f000 fa9c 	bl	8003800 <RCC_Delay>
 80032c8:	e01c      	b.n	8003304 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ca:	4b0a      	ldr	r3, [pc, #40]	@ (80032f4 <HAL_RCC_OscConfig+0x274>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d0:	f7fd fea8 	bl	8001024 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d6:	e00f      	b.n	80032f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d8:	f7fd fea4 	bl	8001024 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d908      	bls.n	80032f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e146      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	42420000 	.word	0x42420000
 80032f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	4b92      	ldr	r3, [pc, #584]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e9      	bne.n	80032d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80a6 	beq.w	800345e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003316:	4b8b      	ldr	r3, [pc, #556]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10d      	bne.n	800333e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	4b88      	ldr	r3, [pc, #544]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	4a87      	ldr	r2, [pc, #540]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800332c:	61d3      	str	r3, [r2, #28]
 800332e:	4b85      	ldr	r3, [pc, #532]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333a:	2301      	movs	r3, #1
 800333c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333e:	4b82      	ldr	r3, [pc, #520]	@ (8003548 <HAL_RCC_OscConfig+0x4c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d118      	bne.n	800337c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800334a:	4b7f      	ldr	r3, [pc, #508]	@ (8003548 <HAL_RCC_OscConfig+0x4c8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7e      	ldr	r2, [pc, #504]	@ (8003548 <HAL_RCC_OscConfig+0x4c8>)
 8003350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003356:	f7fd fe65 	bl	8001024 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335e:	f7fd fe61 	bl	8001024 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b64      	cmp	r3, #100	@ 0x64
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e103      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003370:	4b75      	ldr	r3, [pc, #468]	@ (8003548 <HAL_RCC_OscConfig+0x4c8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d106      	bne.n	8003392 <HAL_RCC_OscConfig+0x312>
 8003384:	4b6f      	ldr	r3, [pc, #444]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4a6e      	ldr	r2, [pc, #440]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6213      	str	r3, [r2, #32]
 8003390:	e02d      	b.n	80033ee <HAL_RCC_OscConfig+0x36e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x334>
 800339a:	4b6a      	ldr	r3, [pc, #424]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4a69      	ldr	r2, [pc, #420]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6213      	str	r3, [r2, #32]
 80033a6:	4b67      	ldr	r3, [pc, #412]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	4a66      	ldr	r2, [pc, #408]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	f023 0304 	bic.w	r3, r3, #4
 80033b0:	6213      	str	r3, [r2, #32]
 80033b2:	e01c      	b.n	80033ee <HAL_RCC_OscConfig+0x36e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d10c      	bne.n	80033d6 <HAL_RCC_OscConfig+0x356>
 80033bc:	4b61      	ldr	r3, [pc, #388]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a60      	ldr	r2, [pc, #384]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	6213      	str	r3, [r2, #32]
 80033c8:	4b5e      	ldr	r3, [pc, #376]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	4a5d      	ldr	r2, [pc, #372]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6213      	str	r3, [r2, #32]
 80033d4:	e00b      	b.n	80033ee <HAL_RCC_OscConfig+0x36e>
 80033d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	4a5a      	ldr	r2, [pc, #360]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	6213      	str	r3, [r2, #32]
 80033e2:	4b58      	ldr	r3, [pc, #352]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	4a57      	ldr	r2, [pc, #348]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d015      	beq.n	8003422 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f6:	f7fd fe15 	bl	8001024 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fd fe11 	bl	8001024 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0b1      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003414:	4b4b      	ldr	r3, [pc, #300]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ee      	beq.n	80033fe <HAL_RCC_OscConfig+0x37e>
 8003420:	e014      	b.n	800344c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003422:	f7fd fdff 	bl	8001024 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fd fdfb 	bl	8001024 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e09b      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003440:	4b40      	ldr	r3, [pc, #256]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1ee      	bne.n	800342a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d105      	bne.n	800345e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003452:	4b3c      	ldr	r3, [pc, #240]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4a3b      	ldr	r2, [pc, #236]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800345c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 8087 	beq.w	8003576 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003468:	4b36      	ldr	r3, [pc, #216]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d061      	beq.n	8003538 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d146      	bne.n	800350a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347c:	4b33      	ldr	r3, [pc, #204]	@ (800354c <HAL_RCC_OscConfig+0x4cc>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003482:	f7fd fdcf 	bl	8001024 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348a:	f7fd fdcb 	bl	8001024 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e06d      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349c:	4b29      	ldr	r3, [pc, #164]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b0:	d108      	bne.n	80034c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034b2:	4b24      	ldr	r3, [pc, #144]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4921      	ldr	r1, [pc, #132]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a19      	ldr	r1, [r3, #32]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	430b      	orrs	r3, r1
 80034d6:	491b      	ldr	r1, [pc, #108]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034dc:	4b1b      	ldr	r3, [pc, #108]	@ (800354c <HAL_RCC_OscConfig+0x4cc>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7fd fd9f 	bl	8001024 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fd fd9b 	bl	8001024 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e03d      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034fc:	4b11      	ldr	r3, [pc, #68]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x46a>
 8003508:	e035      	b.n	8003576 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350a:	4b10      	ldr	r3, [pc, #64]	@ (800354c <HAL_RCC_OscConfig+0x4cc>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fd fd88 	bl	8001024 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003518:	f7fd fd84 	bl	8001024 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e026      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352a:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x498>
 8003536:	e01e      	b.n	8003576 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d107      	bne.n	8003550 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e019      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
 800354c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003550:	4b0b      	ldr	r3, [pc, #44]	@ (8003580 <HAL_RCC_OscConfig+0x500>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	429a      	cmp	r2, r3
 8003562:	d106      	bne.n	8003572 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0d0      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b6a      	ldr	r3, [pc, #424]	@ (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d910      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b67      	ldr	r3, [pc, #412]	@ (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 0207 	bic.w	r2, r3, #7
 80035ae:	4965      	ldr	r1, [pc, #404]	@ (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b63      	ldr	r3, [pc, #396]	@ (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0b8      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d020      	beq.n	8003616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e0:	4b59      	ldr	r3, [pc, #356]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4a58      	ldr	r2, [pc, #352]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f8:	4b53      	ldr	r3, [pc, #332]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4a52      	ldr	r2, [pc, #328]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b50      	ldr	r3, [pc, #320]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	494d      	ldr	r1, [pc, #308]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d040      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b47      	ldr	r3, [pc, #284]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d115      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07f      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	4b41      	ldr	r3, [pc, #260]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e073      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003652:	4b3d      	ldr	r3, [pc, #244]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e06b      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003662:	4b39      	ldr	r3, [pc, #228]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f023 0203 	bic.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4936      	ldr	r1, [pc, #216]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003674:	f7fd fcd6 	bl	8001024 <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	e00a      	b.n	8003692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367c:	f7fd fcd2 	bl	8001024 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e053      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003692:	4b2d      	ldr	r3, [pc, #180]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 020c 	and.w	r2, r3, #12
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d1eb      	bne.n	800367c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a4:	4b27      	ldr	r3, [pc, #156]	@ (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d210      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b24      	ldr	r3, [pc, #144]	@ (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 0207 	bic.w	r2, r3, #7
 80036ba:	4922      	ldr	r1, [pc, #136]	@ (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b20      	ldr	r3, [pc, #128]	@ (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e032      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b19      	ldr	r3, [pc, #100]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4916      	ldr	r1, [pc, #88]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036fe:	4b12      	ldr	r3, [pc, #72]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	490e      	ldr	r1, [pc, #56]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003712:	f000 f821 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b0b      	ldr	r3, [pc, #44]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	490a      	ldr	r1, [pc, #40]	@ (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a09      	ldr	r2, [pc, #36]	@ (8003750 <HAL_RCC_ClockConfig+0x1cc>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800372e:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <HAL_RCC_ClockConfig+0x1d0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd fc34 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40022000 	.word	0x40022000
 8003748:	40021000 	.word	0x40021000
 800374c:	0800a010 	.word	0x0800a010
 8003750:	20000000 	.word	0x20000000
 8003754:	20000004 	.word	0x20000004

08003758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003772:	4b1e      	ldr	r3, [pc, #120]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b04      	cmp	r3, #4
 8003780:	d002      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x30>
 8003782:	2b08      	cmp	r3, #8
 8003784:	d003      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x36>
 8003786:	e027      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003788:	4b19      	ldr	r3, [pc, #100]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800378a:	613b      	str	r3, [r7, #16]
      break;
 800378c:	e027      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	0c9b      	lsrs	r3, r3, #18
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	4a17      	ldr	r2, [pc, #92]	@ (80037f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003798:	5cd3      	ldrb	r3, [r2, r3]
 800379a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d010      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037a6:	4b11      	ldr	r3, [pc, #68]	@ (80037ec <HAL_RCC_GetSysClockFreq+0x94>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	0c5b      	lsrs	r3, r3, #17
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	4a11      	ldr	r2, [pc, #68]	@ (80037f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037b2:	5cd3      	ldrb	r3, [r2, r3]
 80037b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a0d      	ldr	r2, [pc, #52]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ba:	fb03 f202 	mul.w	r2, r3, r2
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e004      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a0c      	ldr	r2, [pc, #48]	@ (80037fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	613b      	str	r3, [r7, #16]
      break;
 80037d6:	e002      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80037da:	613b      	str	r3, [r7, #16]
      break;
 80037dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037de:	693b      	ldr	r3, [r7, #16]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	007a1200 	.word	0x007a1200
 80037f4:	0800a020 	.word	0x0800a020
 80037f8:	0800a030 	.word	0x0800a030
 80037fc:	003d0900 	.word	0x003d0900

08003800 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003808:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <RCC_Delay+0x34>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0a      	ldr	r2, [pc, #40]	@ (8003838 <RCC_Delay+0x38>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	0a5b      	lsrs	r3, r3, #9
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800381c:	bf00      	nop
  }
  while (Delay --);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1e5a      	subs	r2, r3, #1
 8003822:	60fa      	str	r2, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1f9      	bne.n	800381c <RCC_Delay+0x1c>
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	20000000 	.word	0x20000000
 8003838:	10624dd3 	.word	0x10624dd3

0800383c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d07d      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003858:	2300      	movs	r3, #0
 800385a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385c:	4b4f      	ldr	r3, [pc, #316]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10d      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003868:	4b4c      	ldr	r3, [pc, #304]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	4a4b      	ldr	r2, [pc, #300]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003872:	61d3      	str	r3, [r2, #28]
 8003874:	4b49      	ldr	r3, [pc, #292]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003880:	2301      	movs	r3, #1
 8003882:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	4b46      	ldr	r3, [pc, #280]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d118      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003890:	4b43      	ldr	r3, [pc, #268]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a42      	ldr	r2, [pc, #264]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800389a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389c:	f7fd fbc2 	bl	8001024 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a2:	e008      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a4:	f7fd fbbe 	bl	8001024 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	@ 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e06d      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	4b3a      	ldr	r3, [pc, #232]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038c2:	4b36      	ldr	r3, [pc, #216]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02e      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d027      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038e0:	4b2e      	ldr	r3, [pc, #184]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038ea:	4b2e      	ldr	r3, [pc, #184]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038f0:	4b2c      	ldr	r3, [pc, #176]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038f6:	4a29      	ldr	r2, [pc, #164]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d014      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fd fb8d 	bl	8001024 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390c:	e00a      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390e:	f7fd fb89 	bl	8001024 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e036      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003924:	4b1d      	ldr	r3, [pc, #116]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ee      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003930:	4b1a      	ldr	r3, [pc, #104]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4917      	ldr	r1, [pc, #92]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393e:	4313      	orrs	r3, r2
 8003940:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d105      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003948:	4b14      	ldr	r3, [pc, #80]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4a13      	ldr	r2, [pc, #76]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003952:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003960:	4b0e      	ldr	r3, [pc, #56]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	490b      	ldr	r1, [pc, #44]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396e:	4313      	orrs	r3, r2
 8003970:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800397e:	4b07      	ldr	r3, [pc, #28]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	4904      	ldr	r1, [pc, #16]	@ (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000
 80039a0:	40007000 	.word	0x40007000
 80039a4:	42420440 	.word	0x42420440

080039a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e041      	b.n	8003a3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d106      	bne.n	80039d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd f9e2 	bl	8000d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3304      	adds	r3, #4
 80039e4:	4619      	mov	r1, r3
 80039e6:	4610      	mov	r0, r2
 80039e8:	f000 fab2 	bl	8003f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e041      	b.n	8003adc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f839 	bl	8003ae4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3304      	adds	r3, #4
 8003a82:	4619      	mov	r1, r3
 8003a84:	4610      	mov	r0, r2
 8003a86:	f000 fa63 	bl	8003f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d109      	bne.n	8003b1c <HAL_TIM_PWM_Start+0x24>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	bf14      	ite	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	2300      	moveq	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	e022      	b.n	8003b62 <HAL_TIM_PWM_Start+0x6a>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d109      	bne.n	8003b36 <HAL_TIM_PWM_Start+0x3e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	bf14      	ite	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	2300      	moveq	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	e015      	b.n	8003b62 <HAL_TIM_PWM_Start+0x6a>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d109      	bne.n	8003b50 <HAL_TIM_PWM_Start+0x58>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e008      	b.n	8003b62 <HAL_TIM_PWM_Start+0x6a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	bf14      	ite	ne
 8003b5c:	2301      	movne	r3, #1
 8003b5e:	2300      	moveq	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e05e      	b.n	8003c28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d104      	bne.n	8003b7a <HAL_TIM_PWM_Start+0x82>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b78:	e013      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xaa>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d104      	bne.n	8003b8a <HAL_TIM_PWM_Start+0x92>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b88:	e00b      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xaa>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d104      	bne.n	8003b9a <HAL_TIM_PWM_Start+0xa2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b98:	e003      	b.n	8003ba2 <HAL_TIM_PWM_Start+0xaa>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	6839      	ldr	r1, [r7, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fc5c 	bl	8004468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c30 <HAL_TIM_PWM_Start+0x138>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d107      	bne.n	8003bca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a18      	ldr	r2, [pc, #96]	@ (8003c30 <HAL_TIM_PWM_Start+0x138>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0xfa>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bdc:	d009      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0xfa>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a14      	ldr	r2, [pc, #80]	@ (8003c34 <HAL_TIM_PWM_Start+0x13c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d004      	beq.n	8003bf2 <HAL_TIM_PWM_Start+0xfa>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a12      	ldr	r2, [pc, #72]	@ (8003c38 <HAL_TIM_PWM_Start+0x140>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d111      	bne.n	8003c16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b06      	cmp	r3, #6
 8003c02:	d010      	beq.n	8003c26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c14:	e007      	b.n	8003c26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0201 	orr.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40012c00 	.word	0x40012c00
 8003c34:	40000400 	.word	0x40000400
 8003c38:	40000800 	.word	0x40000800

08003c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e0ae      	b.n	8003db8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	f200 809f 	bhi.w	8003da8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003da9 	.word	0x08003da9
 8003c78:	08003da9 	.word	0x08003da9
 8003c7c:	08003da9 	.word	0x08003da9
 8003c80:	08003ce5 	.word	0x08003ce5
 8003c84:	08003da9 	.word	0x08003da9
 8003c88:	08003da9 	.word	0x08003da9
 8003c8c:	08003da9 	.word	0x08003da9
 8003c90:	08003d27 	.word	0x08003d27
 8003c94:	08003da9 	.word	0x08003da9
 8003c98:	08003da9 	.word	0x08003da9
 8003c9c:	08003da9 	.word	0x08003da9
 8003ca0:	08003d67 	.word	0x08003d67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f9be 	bl	800402c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0208 	orr.w	r2, r2, #8
 8003cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0204 	bic.w	r2, r2, #4
 8003cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6999      	ldr	r1, [r3, #24]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	619a      	str	r2, [r3, #24]
      break;
 8003ce2:	e064      	b.n	8003dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fa04 	bl	80040f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699a      	ldr	r2, [r3, #24]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6999      	ldr	r1, [r3, #24]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	021a      	lsls	r2, r3, #8
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	619a      	str	r2, [r3, #24]
      break;
 8003d24:	e043      	b.n	8003dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fa4d 	bl	80041cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69da      	ldr	r2, [r3, #28]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0208 	orr.w	r2, r2, #8
 8003d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0204 	bic.w	r2, r2, #4
 8003d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69d9      	ldr	r1, [r3, #28]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	61da      	str	r2, [r3, #28]
      break;
 8003d64:	e023      	b.n	8003dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fa97 	bl	80042a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69da      	ldr	r2, [r3, #28]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69d9      	ldr	r1, [r3, #28]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	021a      	lsls	r2, r3, #8
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	61da      	str	r2, [r3, #28]
      break;
 8003da6:	e002      	b.n	8003dae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	75fb      	strb	r3, [r7, #23]
      break;
 8003dac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_TIM_ConfigClockSource+0x1c>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e0b4      	b.n	8003f46 <HAL_TIM_ConfigClockSource+0x186>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e14:	d03e      	beq.n	8003e94 <HAL_TIM_ConfigClockSource+0xd4>
 8003e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e1a:	f200 8087 	bhi.w	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e22:	f000 8086 	beq.w	8003f32 <HAL_TIM_ConfigClockSource+0x172>
 8003e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e2a:	d87f      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e2c:	2b70      	cmp	r3, #112	@ 0x70
 8003e2e:	d01a      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0xa6>
 8003e30:	2b70      	cmp	r3, #112	@ 0x70
 8003e32:	d87b      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e34:	2b60      	cmp	r3, #96	@ 0x60
 8003e36:	d050      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0x11a>
 8003e38:	2b60      	cmp	r3, #96	@ 0x60
 8003e3a:	d877      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e3c:	2b50      	cmp	r3, #80	@ 0x50
 8003e3e:	d03c      	beq.n	8003eba <HAL_TIM_ConfigClockSource+0xfa>
 8003e40:	2b50      	cmp	r3, #80	@ 0x50
 8003e42:	d873      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e44:	2b40      	cmp	r3, #64	@ 0x40
 8003e46:	d058      	beq.n	8003efa <HAL_TIM_ConfigClockSource+0x13a>
 8003e48:	2b40      	cmp	r3, #64	@ 0x40
 8003e4a:	d86f      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e4c:	2b30      	cmp	r3, #48	@ 0x30
 8003e4e:	d064      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0x15a>
 8003e50:	2b30      	cmp	r3, #48	@ 0x30
 8003e52:	d86b      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d060      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0x15a>
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d867      	bhi.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d05c      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0x15a>
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d05a      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0x15a>
 8003e64:	e062      	b.n	8003f2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e76:	f000 fad8 	bl	800442a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	609a      	str	r2, [r3, #8]
      break;
 8003e92:	e04f      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ea4:	f000 fac1 	bl	800442a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003eb6:	609a      	str	r2, [r3, #8]
      break;
 8003eb8:	e03c      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f000 fa38 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2150      	movs	r1, #80	@ 0x50
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fa8f 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003ed8:	e02c      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f000 fa56 	bl	8004398 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2160      	movs	r1, #96	@ 0x60
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fa7f 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003ef8:	e01c      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f06:	461a      	mov	r2, r3
 8003f08:	f000 fa18 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2140      	movs	r1, #64	@ 0x40
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 fa6f 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003f18:	e00c      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f000 fa66 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003f2a:	e003      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f30:	e000      	b.n	8003f34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a2f      	ldr	r2, [pc, #188]	@ (8004020 <TIM_Base_SetConfig+0xd0>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00b      	beq.n	8003f80 <TIM_Base_SetConfig+0x30>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f6e:	d007      	beq.n	8003f80 <TIM_Base_SetConfig+0x30>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a2c      	ldr	r2, [pc, #176]	@ (8004024 <TIM_Base_SetConfig+0xd4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_Base_SetConfig+0x30>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8004028 <TIM_Base_SetConfig+0xd8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d108      	bne.n	8003f92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a22      	ldr	r2, [pc, #136]	@ (8004020 <TIM_Base_SetConfig+0xd0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00b      	beq.n	8003fb2 <TIM_Base_SetConfig+0x62>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa0:	d007      	beq.n	8003fb2 <TIM_Base_SetConfig+0x62>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8004024 <TIM_Base_SetConfig+0xd4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d003      	beq.n	8003fb2 <TIM_Base_SetConfig+0x62>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a1e      	ldr	r2, [pc, #120]	@ (8004028 <TIM_Base_SetConfig+0xd8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d108      	bne.n	8003fc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a0d      	ldr	r2, [pc, #52]	@ (8004020 <TIM_Base_SetConfig+0xd0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d103      	bne.n	8003ff8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f023 0201 	bic.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	611a      	str	r2, [r3, #16]
  }
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800

0800402c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	f023 0201 	bic.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f023 0302 	bic.w	r3, r3, #2
 8004074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a1c      	ldr	r2, [pc, #112]	@ (80040f4 <TIM_OC1_SetConfig+0xc8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d10c      	bne.n	80040a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f023 0308 	bic.w	r3, r3, #8
 800408e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f023 0304 	bic.w	r3, r3, #4
 80040a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a13      	ldr	r2, [pc, #76]	@ (80040f4 <TIM_OC1_SetConfig+0xc8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d111      	bne.n	80040ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80040b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	621a      	str	r2, [r3, #32]
}
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40012c00 	.word	0x40012c00

080040f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	f023 0210 	bic.w	r2, r3, #16
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800412e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	021b      	lsls	r3, r3, #8
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4313      	orrs	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f023 0320 	bic.w	r3, r3, #32
 8004142:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a1d      	ldr	r2, [pc, #116]	@ (80041c8 <TIM_OC2_SetConfig+0xd0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10d      	bne.n	8004174 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800415e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004172:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a14      	ldr	r2, [pc, #80]	@ (80041c8 <TIM_OC2_SetConfig+0xd0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d113      	bne.n	80041a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800418a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr
 80041c8:	40012c00 	.word	0x40012c00

080041cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1d      	ldr	r2, [pc, #116]	@ (800429c <TIM_OC3_SetConfig+0xd0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d10d      	bne.n	8004246 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a14      	ldr	r2, [pc, #80]	@ (800429c <TIM_OC3_SetConfig+0xd0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d113      	bne.n	8004276 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800425c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	621a      	str	r2, [r3, #32]
}
 8004290:	bf00      	nop
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40012c00 	.word	0x40012c00

080042a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	031b      	lsls	r3, r3, #12
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004338 <TIM_OC4_SetConfig+0x98>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d109      	bne.n	8004314 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004306:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	019b      	lsls	r3, r3, #6
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	621a      	str	r2, [r3, #32]
}
 800432e:	bf00      	nop
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr
 8004338:	40012c00 	.word	0x40012c00

0800433c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f023 030a 	bic.w	r3, r3, #10
 8004378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	f023 0210 	bic.w	r2, r3, #16
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	031b      	lsls	r3, r3, #12
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	621a      	str	r2, [r3, #32]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800440c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	f043 0307 	orr.w	r3, r3, #7
 8004418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	609a      	str	r2, [r3, #8]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr

0800442a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800442a:	b480      	push	{r7}
 800442c:	b087      	sub	sp, #28
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004444:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	021a      	lsls	r2, r3, #8
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	431a      	orrs	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4313      	orrs	r3, r2
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	609a      	str	r2, [r3, #8]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	2201      	movs	r2, #1
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1a      	ldr	r2, [r3, #32]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	43db      	mvns	r3, r3
 800448a:	401a      	ands	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e046      	b.n	8004556 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a16      	ldr	r2, [pc, #88]	@ (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00e      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004514:	d009      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a12      	ldr	r2, [pc, #72]	@ (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d004      	beq.n	800452a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a10      	ldr	r2, [pc, #64]	@ (8004568 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d10c      	bne.n	8004544 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	4313      	orrs	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800

0800456c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	4638      	mov	r0, r7
 8004576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr

08004586 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004586:	b480      	push	{r7}
 8004588:	b085      	sub	sp, #20
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004596:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800459a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	b29a      	uxth	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr

080045b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045ba:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80045be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	43db      	mvns	r3, r3
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	4013      	ands	r3, r2
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr

080045e6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr

080045fe <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045fe:	b480      	push	{r7}
 8004600:	b085      	sub	sp, #20
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	4638      	mov	r0, r7
 8004608:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004638:	b480      	push	{r7}
 800463a:	b09d      	sub	sp, #116	@ 0x74
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	881b      	ldrh	r3, [r3, #0]
 8004654:	b29b      	uxth	r3, r3
 8004656:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800465a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	78db      	ldrb	r3, [r3, #3]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d81f      	bhi.n	80046aa <USB_ActivateEndpoint+0x72>
 800466a:	a201      	add	r2, pc, #4	@ (adr r2, 8004670 <USB_ActivateEndpoint+0x38>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	08004681 	.word	0x08004681
 8004674:	0800469d 	.word	0x0800469d
 8004678:	080046b3 	.word	0x080046b3
 800467c:	0800468f 	.word	0x0800468f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004680:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004684:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004688:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800468c:	e012      	b.n	80046b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800468e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004692:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004696:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800469a:	e00b      	b.n	80046b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800469c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046a4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80046a8:	e004      	b.n	80046b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80046b0:	e000      	b.n	80046b4 <USB_ActivateEndpoint+0x7c>
      break;
 80046b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	441a      	add	r2, r3
 80046be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	7812      	ldrb	r2, [r2, #0]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	441a      	add	r2, r3
 8004702:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800470a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800470e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004716:	b29b      	uxth	r3, r3
 8004718:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	7b1b      	ldrb	r3, [r3, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	f040 8178 	bne.w	8004a14 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8084 	beq.w	8004836 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004738:	b29b      	uxth	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	4413      	add	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	011a      	lsls	r2, r3, #4
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	88db      	ldrh	r3, [r3, #6]
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	b29b      	uxth	r3, r3
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	827b      	strh	r3, [r7, #18]
 8004770:	8a7b      	ldrh	r3, [r7, #18]
 8004772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d01b      	beq.n	80047b2 <USB_ActivateEndpoint+0x17a>
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	b29b      	uxth	r3, r3
 8004788:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800478c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004790:	823b      	strh	r3, [r7, #16]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	441a      	add	r2, r3
 800479c:	8a3b      	ldrh	r3, [r7, #16]
 800479e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	78db      	ldrb	r3, [r3, #3]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d020      	beq.n	80047fc <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d0:	81bb      	strh	r3, [r7, #12]
 80047d2:	89bb      	ldrh	r3, [r7, #12]
 80047d4:	f083 0320 	eor.w	r3, r3, #32
 80047d8:	81bb      	strh	r3, [r7, #12]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	441a      	add	r2, r3
 80047e4:	89bb      	ldrh	r3, [r7, #12]
 80047e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	8013      	strh	r3, [r2, #0]
 80047fa:	e2d5      	b.n	8004da8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004812:	81fb      	strh	r3, [r7, #14]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	441a      	add	r2, r3
 800481e:	89fb      	ldrh	r3, [r7, #14]
 8004820:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004824:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800482c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004830:	b29b      	uxth	r3, r3
 8004832:	8013      	strh	r3, [r2, #0]
 8004834:	e2b8      	b.n	8004da8 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	633b      	str	r3, [r7, #48]	@ 0x30
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004840:	b29b      	uxth	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004846:	4413      	add	r3, r2
 8004848:	633b      	str	r3, [r7, #48]	@ 0x30
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	011a      	lsls	r2, r3, #4
 8004850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004852:	4413      	add	r3, r2
 8004854:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	88db      	ldrh	r3, [r3, #6]
 800485e:	085b      	lsrs	r3, r3, #1
 8004860:	b29b      	uxth	r3, r3
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004868:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004874:	b29b      	uxth	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487a:	4413      	add	r3, r2
 800487c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	011a      	lsls	r2, r3, #4
 8004884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004886:	4413      	add	r3, r2
 8004888:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
 800488e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004898:	b29a      	uxth	r2, r3
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80048a4:	d91d      	bls.n	80048e2 <USB_ActivateEndpoint+0x2aa>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <USB_ActivateEndpoint+0x288>
 80048ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048bc:	3b01      	subs	r3, #1
 80048be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	029b      	lsls	r3, r3, #10
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	4313      	orrs	r3, r2
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048da:	b29a      	uxth	r2, r3
 80048dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	e026      	b.n	8004930 <USB_ActivateEndpoint+0x2f8>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <USB_ActivateEndpoint+0x2c8>
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	801a      	strh	r2, [r3, #0]
 80048fe:	e017      	b.n	8004930 <USB_ActivateEndpoint+0x2f8>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	085b      	lsrs	r3, r3, #1
 8004906:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <USB_ActivateEndpoint+0x2e2>
 8004914:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004916:	3301      	adds	r3, #1
 8004918:	66bb      	str	r3, [r7, #104]	@ 0x68
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b29a      	uxth	r2, r3
 8004920:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004922:	b29b      	uxth	r3, r3
 8004924:	029b      	lsls	r3, r3, #10
 8004926:	b29b      	uxth	r3, r3
 8004928:	4313      	orrs	r3, r2
 800492a:	b29a      	uxth	r2, r3
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800493e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01b      	beq.n	8004980 <USB_ActivateEndpoint+0x348>
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800495a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495e:	843b      	strh	r3, [r7, #32]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	8c3b      	ldrh	r3, [r7, #32]
 800496c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004970:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004974:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800497c:	b29b      	uxth	r3, r3
 800497e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d124      	bne.n	80049d2 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800499a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800499e:	83bb      	strh	r3, [r7, #28]
 80049a0:	8bbb      	ldrh	r3, [r7, #28]
 80049a2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80049a6:	83bb      	strh	r3, [r7, #28]
 80049a8:	8bbb      	ldrh	r3, [r7, #28]
 80049aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049ae:	83bb      	strh	r3, [r7, #28]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	441a      	add	r2, r3
 80049ba:	8bbb      	ldrh	r3, [r7, #28]
 80049bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	8013      	strh	r3, [r2, #0]
 80049d0:	e1ea      	b.n	8004da8 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e8:	83fb      	strh	r3, [r7, #30]
 80049ea:	8bfb      	ldrh	r3, [r7, #30]
 80049ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049f0:	83fb      	strh	r3, [r7, #30]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	8bfb      	ldrh	r3, [r7, #30]
 80049fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	8013      	strh	r3, [r2, #0]
 8004a12:	e1c9      	b.n	8004da8 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	78db      	ldrb	r3, [r3, #3]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d11e      	bne.n	8004a5a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a32:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	441a      	add	r2, r3
 8004a40:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004a44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a4c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	8013      	strh	r3, [r2, #0]
 8004a58:	e01d      	b.n	8004a96 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a70:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	441a      	add	r2, r3
 8004a7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aa6:	4413      	add	r3, r2
 8004aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	011a      	lsls	r2, r3, #4
 8004ab0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	891b      	ldrh	r3, [r3, #8]
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ac8:	801a      	strh	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ada:	4413      	add	r3, r2
 8004adc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	011a      	lsls	r2, r3, #4
 8004ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004aec:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	895b      	ldrh	r3, [r3, #10]
 8004af2:	085b      	lsrs	r3, r3, #1
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004afc:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	785b      	ldrb	r3, [r3, #1]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f040 8093 	bne.w	8004c2e <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004b18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <USB_ActivateEndpoint+0x524>
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b3a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	441a      	add	r2, r3
 8004b46:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004b48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004b6a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01b      	beq.n	8004bac <USB_ActivateEndpoint+0x574>
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	441a      	add	r2, r3
 8004b96:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004b98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ba4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004bc4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004bc6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004bca:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004bcc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004bce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004bd2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	441a      	add	r2, r3
 8004bde:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004be0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004be4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c0a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	441a      	add	r2, r3
 8004c16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	8013      	strh	r3, [r2, #0]
 8004c2c:	e0bc      	b.n	8004da8 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d01d      	beq.n	8004c86 <USB_ActivateEndpoint+0x64e>
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c60:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	441a      	add	r2, r3
 8004c6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004c72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004c96:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01d      	beq.n	8004cde <USB_ActivateEndpoint+0x6a6>
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	441a      	add	r2, r3
 8004cc6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004cca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	78db      	ldrb	r3, [r3, #3]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d024      	beq.n	8004d30 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cfc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004d00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d04:	f083 0320 	eor.w	r3, r3, #32
 8004d08:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	8013      	strh	r3, [r2, #0]
 8004d2e:	e01d      	b.n	8004d6c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d46:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	441a      	add	r2, r3
 8004d54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004d58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d82:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004da8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3774      	adds	r7, #116	@ 0x74
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop

08004db8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b08d      	sub	sp, #52	@ 0x34
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	7b1b      	ldrb	r3, [r3, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f040 808e 	bne.w	8004ee8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	785b      	ldrb	r3, [r3, #1]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d044      	beq.n	8004e5e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	81bb      	strh	r3, [r7, #12]
 8004de2:	89bb      	ldrh	r3, [r7, #12]
 8004de4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01b      	beq.n	8004e24 <USB_DeactivateEndpoint+0x6c>
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e02:	817b      	strh	r3, [r7, #10]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	441a      	add	r2, r3
 8004e0e:	897b      	ldrh	r3, [r7, #10]
 8004e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e3a:	813b      	strh	r3, [r7, #8]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	441a      	add	r2, r3
 8004e46:	893b      	ldrh	r3, [r7, #8]
 8004e48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	8013      	strh	r3, [r2, #0]
 8004e5c:	e192      	b.n	8005184 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	827b      	strh	r3, [r7, #18]
 8004e6c:	8a7b      	ldrh	r3, [r7, #18]
 8004e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01b      	beq.n	8004eae <USB_DeactivateEndpoint+0xf6>
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8c:	823b      	strh	r3, [r7, #16]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	441a      	add	r2, r3
 8004e98:	8a3b      	ldrh	r3, [r7, #16]
 8004e9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ea2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ea6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec4:	81fb      	strh	r3, [r7, #14]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	441a      	add	r2, r3
 8004ed0:	89fb      	ldrh	r3, [r7, #14]
 8004ed2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ed6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	8013      	strh	r3, [r2, #0]
 8004ee6:	e14d      	b.n	8005184 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	785b      	ldrb	r3, [r3, #1]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f040 80a5 	bne.w	800503c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	843b      	strh	r3, [r7, #32]
 8004f00:	8c3b      	ldrh	r3, [r7, #32]
 8004f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01b      	beq.n	8004f42 <USB_DeactivateEndpoint+0x18a>
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f20:	83fb      	strh	r3, [r7, #30]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	441a      	add	r2, r3
 8004f2c:	8bfb      	ldrh	r3, [r7, #30]
 8004f2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	83bb      	strh	r3, [r7, #28]
 8004f50:	8bbb      	ldrh	r3, [r7, #28]
 8004f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d01b      	beq.n	8004f92 <USB_DeactivateEndpoint+0x1da>
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	881b      	ldrh	r3, [r3, #0]
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f70:	837b      	strh	r3, [r7, #26]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	441a      	add	r2, r3
 8004f7c:	8b7b      	ldrh	r3, [r7, #26]
 8004f7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa8:	833b      	strh	r3, [r7, #24]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	441a      	add	r2, r3
 8004fb4:	8b3b      	ldrh	r3, [r7, #24]
 8004fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe0:	82fb      	strh	r3, [r7, #22]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	441a      	add	r2, r3
 8004fec:	8afb      	ldrh	r3, [r7, #22]
 8004fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005014:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005018:	82bb      	strh	r3, [r7, #20]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	441a      	add	r2, r3
 8005024:	8abb      	ldrh	r3, [r7, #20]
 8005026:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800502a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800502e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005036:	b29b      	uxth	r3, r3
 8005038:	8013      	strh	r3, [r2, #0]
 800503a:	e0a3      	b.n	8005184 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800504a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800504c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01b      	beq.n	800508c <USB_DeactivateEndpoint+0x2d4>
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	881b      	ldrh	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800506a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	441a      	add	r2, r3
 8005076:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800507c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005080:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005088:	b29b      	uxth	r3, r3
 800508a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800509a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800509c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01b      	beq.n	80050dc <USB_DeactivateEndpoint+0x324>
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80050c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80050d8:	b29b      	uxth	r3, r3
 80050da:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	441a      	add	r2, r3
 80050fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005108:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800510c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005110:	b29b      	uxth	r3, r3
 8005112:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	881b      	ldrh	r3, [r3, #0]
 8005120:	b29b      	uxth	r3, r3
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005126:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800512a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	441a      	add	r2, r3
 8005136:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800513c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005148:	b29b      	uxth	r3, r3
 800514a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	b29b      	uxth	r3, r3
 800515a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800515e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005162:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	441a      	add	r2, r3
 800516e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005170:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005174:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800517c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005180:	b29b      	uxth	r3, r3
 8005182:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3734      	adds	r7, #52	@ 0x34
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr

08005190 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b0c2      	sub	sp, #264	@ 0x108
 8005194:	af00      	add	r7, sp, #0
 8005196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800519a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800519e:	6018      	str	r0, [r3, #0]
 80051a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	785b      	ldrb	r3, [r3, #1]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	f040 86b7 	bne.w	8005f2a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80051bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699a      	ldr	r2, [r3, #24]
 80051c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d908      	bls.n	80051ea <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80051d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80051e8:	e007      	b.n	80051fa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80051ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80051fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	7b1b      	ldrb	r3, [r3, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d13a      	bne.n	8005280 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800520a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6959      	ldr	r1, [r3, #20]
 8005216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800521a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	88da      	ldrh	r2, [r3, #6]
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005226:	b29b      	uxth	r3, r3
 8005228:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800522c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005230:	6800      	ldr	r0, [r0, #0]
 8005232:	f001 fc9c 	bl	8006b6e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005246:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005250:	b29b      	uxth	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	4413      	add	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800525e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	011a      	lsls	r2, r3, #4
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4413      	add	r3, r2
 800526c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	f000 be1f 	b.w	8005ebe <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	78db      	ldrb	r3, [r3, #3]
 800528c:	2b02      	cmp	r3, #2
 800528e:	f040 8462 	bne.w	8005b56 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6a1a      	ldr	r2, [r3, #32]
 800529e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	f240 83df 	bls.w	8005a6e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80052da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	441a      	add	r2, r3
 80052f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80052f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005300:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005308:	b29b      	uxth	r3, r3
 800530a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800530c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005310:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6a1a      	ldr	r2, [r3, #32]
 8005318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800531c:	1ad2      	subs	r2, r2, r3
 800531e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800532a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800532e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 81c7 	beq.w	80056e0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005356:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	633b      	str	r3, [r7, #48]	@ 0x30
 800535e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	785b      	ldrb	r3, [r3, #1]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d177      	bne.n	800545e <USB_EPStartXfer+0x2ce>
 800536e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	62bb      	str	r3, [r7, #40]	@ 0x28
 800537a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005388:	b29b      	uxth	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538e:	4413      	add	r3, r2
 8005390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	011a      	lsls	r2, r3, #4
 80053a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a2:	4413      	add	r3, r2
 80053a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053be:	2b3e      	cmp	r3, #62	@ 0x3e
 80053c0:	d921      	bls.n	8005406 <USB_EPStartXfer+0x276>
 80053c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80053cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <USB_EPStartXfer+0x252>
 80053d8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80053dc:	3b01      	subs	r3, #1
 80053de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	029b      	lsls	r3, r3, #10
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	4313      	orrs	r3, r2
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053fe:	b29a      	uxth	r2, r3
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	801a      	strh	r2, [r3, #0]
 8005404:	e050      	b.n	80054a8 <USB_EPStartXfer+0x318>
 8005406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10a      	bne.n	8005424 <USB_EPStartXfer+0x294>
 800540e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	b29b      	uxth	r3, r3
 8005414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800541c:	b29a      	uxth	r2, r3
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	801a      	strh	r2, [r3, #0]
 8005422:	e041      	b.n	80054a8 <USB_EPStartXfer+0x318>
 8005424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005428:	085b      	lsrs	r3, r3, #1
 800542a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800542e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d004      	beq.n	8005444 <USB_EPStartXfer+0x2b4>
 800543a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800543e:	3301      	adds	r3, #1
 8005440:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	b29a      	uxth	r2, r3
 800544a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800544e:	b29b      	uxth	r3, r3
 8005450:	029b      	lsls	r3, r3, #10
 8005452:	b29b      	uxth	r3, r3
 8005454:	4313      	orrs	r3, r2
 8005456:	b29a      	uxth	r2, r3
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	801a      	strh	r2, [r3, #0]
 800545c:	e024      	b.n	80054a8 <USB_EPStartXfer+0x318>
 800545e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d11c      	bne.n	80054a8 <USB_EPStartXfer+0x318>
 800546e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800547c:	b29b      	uxth	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005482:	4413      	add	r3, r2
 8005484:	633b      	str	r3, [r7, #48]	@ 0x30
 8005486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	011a      	lsls	r2, r3, #4
 8005494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005496:	4413      	add	r3, r2
 8005498:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800549c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800549e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	895b      	ldrh	r3, [r3, #10]
 80054b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6959      	ldr	r1, [r3, #20]
 80054c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80054ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80054d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80054d6:	6800      	ldr	r0, [r0, #0]
 80054d8:	f001 fb49 	bl	8006b6e <USB_WritePMA>
            ep->xfer_buff += len;
 80054dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695a      	ldr	r2, [r3, #20]
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ec:	441a      	add	r2, r3
 80054ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80054fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6a1a      	ldr	r2, [r3, #32]
 8005506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	429a      	cmp	r2, r3
 8005514:	d90f      	bls.n	8005536 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6a1a      	ldr	r2, [r3, #32]
 8005522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005526:	1ad2      	subs	r2, r2, r3
 8005528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	621a      	str	r2, [r3, #32]
 8005534:	e00e      	b.n	8005554 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800553a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800554a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2200      	movs	r2, #0
 8005552:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d177      	bne.n	8005654 <USB_EPStartXfer+0x4c4>
 8005564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005568:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005574:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800557e:	b29b      	uxth	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	4413      	add	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	011a      	lsls	r2, r3, #4
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	4413      	add	r3, r2
 800559a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	801a      	strh	r2, [r3, #0]
 80055b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80055b6:	d921      	bls.n	80055fc <USB_EPStartXfer+0x46c>
 80055b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055bc:	095b      	lsrs	r3, r3, #5
 80055be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80055c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c6:	f003 031f 	and.w	r3, r3, #31
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d104      	bne.n	80055d8 <USB_EPStartXfer+0x448>
 80055ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055d2:	3b01      	subs	r3, #1
 80055d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29a      	uxth	r2, r3
 80055de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	029b      	lsls	r3, r3, #10
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	4313      	orrs	r3, r2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	e056      	b.n	80056aa <USB_EPStartXfer+0x51a>
 80055fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <USB_EPStartXfer+0x48a>
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800560e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005612:	b29a      	uxth	r2, r3
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	801a      	strh	r2, [r3, #0]
 8005618:	e047      	b.n	80056aa <USB_EPStartXfer+0x51a>
 800561a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800561e:	085b      	lsrs	r3, r3, #1
 8005620:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <USB_EPStartXfer+0x4aa>
 8005630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005634:	3301      	adds	r3, #1
 8005636:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	b29a      	uxth	r2, r3
 8005640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005644:	b29b      	uxth	r3, r3
 8005646:	029b      	lsls	r3, r3, #10
 8005648:	b29b      	uxth	r3, r3
 800564a:	4313      	orrs	r3, r2
 800564c:	b29a      	uxth	r2, r3
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	801a      	strh	r2, [r3, #0]
 8005652:	e02a      	b.n	80056aa <USB_EPStartXfer+0x51a>
 8005654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d122      	bne.n	80056aa <USB_EPStartXfer+0x51a>
 8005664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005668:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	623b      	str	r3, [r7, #32]
 8005670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800567e:	b29b      	uxth	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	4413      	add	r3, r2
 8005686:	623b      	str	r3, [r7, #32]
 8005688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800568c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	011a      	lsls	r2, r3, #4
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	4413      	add	r3, r2
 800569a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800569e:	61fb      	str	r3, [r7, #28]
 80056a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	891b      	ldrh	r3, [r3, #8]
 80056b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6959      	ldr	r1, [r3, #20]
 80056c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80056d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80056d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80056d8:	6800      	ldr	r0, [r0, #0]
 80056da:	f001 fa48 	bl	8006b6e <USB_WritePMA>
 80056de:	e3ee      	b.n	8005ebe <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d177      	bne.n	80057e0 <USB_EPStartXfer+0x650>
 80056f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800570a:	b29b      	uxth	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005710:	4413      	add	r3, r2
 8005712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	011a      	lsls	r2, r3, #4
 8005722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005724:	4413      	add	r3, r2
 8005726:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800572a:	647b      	str	r3, [r7, #68]	@ 0x44
 800572c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005736:	b29a      	uxth	r2, r3
 8005738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800573a:	801a      	strh	r2, [r3, #0]
 800573c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005740:	2b3e      	cmp	r3, #62	@ 0x3e
 8005742:	d921      	bls.n	8005788 <USB_EPStartXfer+0x5f8>
 8005744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <USB_EPStartXfer+0x5d4>
 800575a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800575e:	3b01      	subs	r3, #1
 8005760:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29a      	uxth	r2, r3
 800576a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800576e:	b29b      	uxth	r3, r3
 8005770:	029b      	lsls	r3, r3, #10
 8005772:	b29b      	uxth	r3, r3
 8005774:	4313      	orrs	r3, r2
 8005776:	b29b      	uxth	r3, r3
 8005778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800577c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005780:	b29a      	uxth	r2, r3
 8005782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005784:	801a      	strh	r2, [r3, #0]
 8005786:	e056      	b.n	8005836 <USB_EPStartXfer+0x6a6>
 8005788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <USB_EPStartXfer+0x616>
 8005790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	b29b      	uxth	r3, r3
 8005796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800579a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800579e:	b29a      	uxth	r2, r3
 80057a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a2:	801a      	strh	r2, [r3, #0]
 80057a4:	e047      	b.n	8005836 <USB_EPStartXfer+0x6a6>
 80057a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057aa:	085b      	lsrs	r3, r3, #1
 80057ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d004      	beq.n	80057c6 <USB_EPStartXfer+0x636>
 80057bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057c0:	3301      	adds	r3, #1
 80057c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	4313      	orrs	r3, r2
 80057d8:	b29a      	uxth	r2, r3
 80057da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057dc:	801a      	strh	r2, [r3, #0]
 80057de:	e02a      	b.n	8005836 <USB_EPStartXfer+0x6a6>
 80057e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	785b      	ldrb	r3, [r3, #1]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d122      	bne.n	8005836 <USB_EPStartXfer+0x6a6>
 80057f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80057fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800580a:	b29b      	uxth	r3, r3
 800580c:	461a      	mov	r2, r3
 800580e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005810:	4413      	add	r3, r2
 8005812:	653b      	str	r3, [r7, #80]	@ 0x50
 8005814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005818:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	011a      	lsls	r2, r3, #4
 8005822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005824:	4413      	add	r3, r2
 8005826:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800582a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800582c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005830:	b29a      	uxth	r2, r3
 8005832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005834:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	891b      	ldrh	r3, [r3, #8]
 8005842:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800584a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6959      	ldr	r1, [r3, #20]
 8005852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005856:	b29b      	uxth	r3, r3
 8005858:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800585c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005860:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005864:	6800      	ldr	r0, [r0, #0]
 8005866:	f001 f982 	bl	8006b6e <USB_WritePMA>
            ep->xfer_buff += len;
 800586a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800586e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695a      	ldr	r2, [r3, #20]
 8005876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587a:	441a      	add	r2, r3
 800587c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800588c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6a1a      	ldr	r2, [r3, #32]
 8005894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d90f      	bls.n	80058c4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80058a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6a1a      	ldr	r2, [r3, #32]
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b4:	1ad2      	subs	r2, r2, r3
 80058b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	621a      	str	r2, [r3, #32]
 80058c2:	e00e      	b.n	80058e2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80058c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80058d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2200      	movs	r2, #0
 80058e0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	785b      	ldrb	r3, [r3, #1]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d177      	bne.n	80059ee <USB_EPStartXfer+0x85e>
 80058fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005902:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	63bb      	str	r3, [r7, #56]	@ 0x38
 800590a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800590e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005918:	b29b      	uxth	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591e:	4413      	add	r3, r2
 8005920:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	011a      	lsls	r2, r3, #4
 8005930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005932:	4413      	add	r3, r2
 8005934:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005938:	637b      	str	r3, [r7, #52]	@ 0x34
 800593a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005944:	b29a      	uxth	r2, r3
 8005946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005950:	d921      	bls.n	8005996 <USB_EPStartXfer+0x806>
 8005952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800595c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005960:	f003 031f 	and.w	r3, r3, #31
 8005964:	2b00      	cmp	r3, #0
 8005966:	d104      	bne.n	8005972 <USB_EPStartXfer+0x7e2>
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596c:	3b01      	subs	r3, #1
 800596e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29a      	uxth	r2, r3
 8005978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597c:	b29b      	uxth	r3, r3
 800597e:	029b      	lsls	r3, r3, #10
 8005980:	b29b      	uxth	r3, r3
 8005982:	4313      	orrs	r3, r2
 8005984:	b29b      	uxth	r3, r3
 8005986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800598a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800598e:	b29a      	uxth	r2, r3
 8005990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	e050      	b.n	8005a38 <USB_EPStartXfer+0x8a8>
 8005996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10a      	bne.n	80059b4 <USB_EPStartXfer+0x824>
 800599e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b0:	801a      	strh	r2, [r3, #0]
 80059b2:	e041      	b.n	8005a38 <USB_EPStartXfer+0x8a8>
 80059b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d004      	beq.n	80059d4 <USB_EPStartXfer+0x844>
 80059ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ce:	3301      	adds	r3, #1
 80059d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29a      	uxth	r2, r3
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059de:	b29b      	uxth	r3, r3
 80059e0:	029b      	lsls	r3, r3, #10
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	4313      	orrs	r3, r2
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	e024      	b.n	8005a38 <USB_EPStartXfer+0x8a8>
 80059ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	785b      	ldrb	r3, [r3, #1]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d11c      	bne.n	8005a38 <USB_EPStartXfer+0x8a8>
 80059fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a12:	4413      	add	r3, r2
 8005a14:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	011a      	lsls	r2, r3, #4
 8005a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a26:	4413      	add	r3, r2
 8005a28:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	895b      	ldrh	r3, [r3, #10]
 8005a44:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6959      	ldr	r1, [r3, #20]
 8005a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a5e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a62:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005a66:	6800      	ldr	r0, [r0, #0]
 8005a68:	f001 f881 	bl	8006b6e <USB_WritePMA>
 8005a6c:	e227      	b.n	8005ebe <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005a7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005aa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	441a      	add	r2, r3
 8005ac2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005ac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005aca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ace:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005afa:	4413      	add	r3, r2
 8005afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	011a      	lsls	r2, r3, #4
 8005b0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b0e:	4413      	add	r3, r2
 8005b10:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b1e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	891b      	ldrh	r3, [r3, #8]
 8005b2c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6959      	ldr	r1, [r3, #20]
 8005b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b46:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b4a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b4e:	6800      	ldr	r0, [r0, #0]
 8005b50:	f001 f80d 	bl	8006b6e <USB_WritePMA>
 8005b54:	e1b3      	b.n	8005ebe <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6a1a      	ldr	r2, [r3, #32]
 8005b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b66:	1ad2      	subs	r2, r2, r3
 8005b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 80c6 	beq.w	8005d28 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d177      	bne.n	8005ca8 <USB_EPStartXfer+0xb18>
 8005bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bd8:	4413      	add	r3, r2
 8005bda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	011a      	lsls	r2, r3, #4
 8005bea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bec:	4413      	add	r3, r2
 8005bee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005bf2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c08:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c0a:	d921      	bls.n	8005c50 <USB_EPStartXfer+0xac0>
 8005c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <USB_EPStartXfer+0xa9c>
 8005c22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c26:	3b01      	subs	r3, #1
 8005c28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	029b      	lsls	r3, r3, #10
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	e050      	b.n	8005cf2 <USB_EPStartXfer+0xb62>
 8005c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10a      	bne.n	8005c6e <USB_EPStartXfer+0xade>
 8005c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c5a:	881b      	ldrh	r3, [r3, #0]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c6a:	801a      	strh	r2, [r3, #0]
 8005c6c:	e041      	b.n	8005cf2 <USB_EPStartXfer+0xb62>
 8005c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <USB_EPStartXfer+0xafe>
 8005c84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c88:	3301      	adds	r3, #1
 8005c8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	029b      	lsls	r3, r3, #10
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	e024      	b.n	8005cf2 <USB_EPStartXfer+0xb62>
 8005ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	785b      	ldrb	r3, [r3, #1]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d11c      	bne.n	8005cf2 <USB_EPStartXfer+0xb62>
 8005cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ccc:	4413      	add	r3, r2
 8005cce:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	011a      	lsls	r2, r3, #4
 8005cde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ce6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cf0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	895b      	ldrh	r3, [r3, #10]
 8005cfe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6959      	ldr	r1, [r3, #20]
 8005d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d18:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d1c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d20:	6800      	ldr	r0, [r0, #0]
 8005d22:	f000 ff24 	bl	8006b6e <USB_WritePMA>
 8005d26:	e0ca      	b.n	8005ebe <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	785b      	ldrb	r3, [r3, #1]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d177      	bne.n	8005e28 <USB_EPStartXfer+0xc98>
 8005d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d58:	4413      	add	r3, r2
 8005d5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	011a      	lsls	r2, r3, #4
 8005d6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005d72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d88:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d8a:	d921      	bls.n	8005dd0 <USB_EPStartXfer+0xc40>
 8005d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d90:	095b      	lsrs	r3, r3, #5
 8005d92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d104      	bne.n	8005dac <USB_EPStartXfer+0xc1c>
 8005da2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005da6:	3b01      	subs	r3, #1
 8005da8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005dac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	029b      	lsls	r3, r3, #10
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	e05c      	b.n	8005e8a <USB_EPStartXfer+0xcfa>
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <USB_EPStartXfer+0xc5e>
 8005dd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	e04d      	b.n	8005e8a <USB_EPStartXfer+0xcfa>
 8005dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <USB_EPStartXfer+0xc7e>
 8005e04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e08:	3301      	adds	r3, #1
 8005e0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	029b      	lsls	r3, r3, #10
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e24:	801a      	strh	r2, [r3, #0]
 8005e26:	e030      	b.n	8005e8a <USB_EPStartXfer+0xcfa>
 8005e28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d128      	bne.n	8005e8a <USB_EPStartXfer+0xcfa>
 8005e38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	461a      	mov	r2, r3
 8005e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	011a      	lsls	r2, r3, #4
 8005e70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e74:	4413      	add	r3, r2
 8005e76:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005e88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	891b      	ldrh	r3, [r3, #8]
 8005e96:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6959      	ldr	r1, [r3, #20]
 8005ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005eb0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005eb4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005eb8:	6800      	ldr	r0, [r0, #0]
 8005eba:	f000 fe58 	bl	8006b6e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ee0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ee4:	817b      	strh	r3, [r7, #10]
 8005ee6:	897b      	ldrh	r3, [r7, #10]
 8005ee8:	f083 0310 	eor.w	r3, r3, #16
 8005eec:	817b      	strh	r3, [r7, #10]
 8005eee:	897b      	ldrh	r3, [r7, #10]
 8005ef0:	f083 0320 	eor.w	r3, r3, #32
 8005ef4:	817b      	strh	r3, [r7, #10]
 8005ef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	441a      	add	r2, r3
 8005f10:	897b      	ldrh	r3, [r7, #10]
 8005f12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	8013      	strh	r3, [r2, #0]
 8005f26:	f000 bcde 	b.w	80068e6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	7b1b      	ldrb	r3, [r3, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f040 80bb 	bne.w	80060b2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699a      	ldr	r2, [r3, #24]
 8005f48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d917      	bls.n	8005f88 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	699a      	ldr	r2, [r3, #24]
 8005f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f78:	1ad2      	subs	r2, r2, r3
 8005f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	619a      	str	r2, [r3, #24]
 8005f86:	e00e      	b.n	8005fa6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005f88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005f98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005fa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005faa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005fca:	4413      	add	r3, r2
 8005fcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	011a      	lsls	r2, r3, #4
 8005fde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005fe8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006004:	2b3e      	cmp	r3, #62	@ 0x3e
 8006006:	d924      	bls.n	8006052 <USB_EPStartXfer+0xec2>
 8006008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <USB_EPStartXfer+0xe98>
 800601e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006022:	3b01      	subs	r3, #1
 8006024:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006028:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29a      	uxth	r2, r3
 8006030:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006034:	b29b      	uxth	r3, r3
 8006036:	029b      	lsls	r3, r3, #10
 8006038:	b29b      	uxth	r3, r3
 800603a:	4313      	orrs	r3, r2
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006046:	b29a      	uxth	r2, r3
 8006048:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	f000 bc10 	b.w	8006872 <USB_EPStartXfer+0x16e2>
 8006052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10c      	bne.n	8006074 <USB_EPStartXfer+0xee4>
 800605a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800606a:	b29a      	uxth	r2, r3
 800606c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	e3fe      	b.n	8006872 <USB_EPStartXfer+0x16e2>
 8006074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800607e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d004      	beq.n	8006094 <USB_EPStartXfer+0xf04>
 800608a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800608e:	3301      	adds	r3, #1
 8006090:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29a      	uxth	r2, r3
 800609c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	029b      	lsls	r3, r3, #10
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	4313      	orrs	r3, r2
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060ae:	801a      	strh	r2, [r3, #0]
 80060b0:	e3df      	b.n	8006872 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80060b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	78db      	ldrb	r3, [r3, #3]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	f040 8218 	bne.w	80064f4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f040 809d 	bne.w	8006210 <USB_EPStartXfer+0x1080>
 80060d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060fa:	4413      	add	r3, r2
 80060fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	011a      	lsls	r2, r3, #4
 800610e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006112:	4413      	add	r3, r2
 8006114:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006118:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800611c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006128:	b29a      	uxth	r2, r3
 800612a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800612e:	801a      	strh	r2, [r3, #0]
 8006130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b3e      	cmp	r3, #62	@ 0x3e
 800613e:	d92b      	bls.n	8006198 <USB_EPStartXfer+0x1008>
 8006140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <USB_EPStartXfer+0xfe0>
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800616a:	3b01      	subs	r3, #1
 800616c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006170:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29a      	uxth	r2, r3
 8006178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617c:	b29b      	uxth	r3, r3
 800617e:	029b      	lsls	r3, r3, #10
 8006180:	b29b      	uxth	r3, r3
 8006182:	4313      	orrs	r3, r2
 8006184:	b29b      	uxth	r3, r3
 8006186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618e:	b29a      	uxth	r2, r3
 8006190:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	e070      	b.n	800627a <USB_EPStartXfer+0x10ea>
 8006198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10c      	bne.n	80061c2 <USB_EPStartXfer+0x1032>
 80061a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e05b      	b.n	800627a <USB_EPStartXfer+0x10ea>
 80061c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <USB_EPStartXfer+0x1062>
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ec:	3301      	adds	r3, #1
 80061ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061fe:	b29b      	uxth	r3, r3
 8006200:	029b      	lsls	r3, r3, #10
 8006202:	b29b      	uxth	r3, r3
 8006204:	4313      	orrs	r3, r2
 8006206:	b29a      	uxth	r2, r3
 8006208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	e034      	b.n	800627a <USB_EPStartXfer+0x10ea>
 8006210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d12c      	bne.n	800627a <USB_EPStartXfer+0x10ea>
 8006220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006224:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800622e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800623c:	b29b      	uxth	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006244:	4413      	add	r3, r2
 8006246:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800624a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800624e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	011a      	lsls	r2, r3, #4
 8006258:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800625c:	4413      	add	r3, r2
 800625e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006262:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	b29a      	uxth	r2, r3
 8006274:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006278:	801a      	strh	r2, [r3, #0]
 800627a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800627e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b00      	cmp	r3, #0
 8006296:	f040 809d 	bne.w	80063d4 <USB_EPStartXfer+0x1244>
 800629a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800629e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	461a      	mov	r2, r3
 80062ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062be:	4413      	add	r3, r2
 80062c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	011a      	lsls	r2, r3, #4
 80062d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062d6:	4413      	add	r3, r2
 80062d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80062f2:	801a      	strh	r2, [r3, #0]
 80062f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	2b3e      	cmp	r3, #62	@ 0x3e
 8006302:	d92b      	bls.n	800635c <USB_EPStartXfer+0x11cc>
 8006304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	095b      	lsrs	r3, r3, #5
 8006312:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800631a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	f003 031f 	and.w	r3, r3, #31
 8006326:	2b00      	cmp	r3, #0
 8006328:	d104      	bne.n	8006334 <USB_EPStartXfer+0x11a4>
 800632a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800632e:	3b01      	subs	r3, #1
 8006330:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006334:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29a      	uxth	r2, r3
 800633c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006340:	b29b      	uxth	r3, r3
 8006342:	029b      	lsls	r3, r3, #10
 8006344:	b29b      	uxth	r3, r3
 8006346:	4313      	orrs	r3, r2
 8006348:	b29b      	uxth	r3, r3
 800634a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800634e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006352:	b29a      	uxth	r2, r3
 8006354:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006358:	801a      	strh	r2, [r3, #0]
 800635a:	e069      	b.n	8006430 <USB_EPStartXfer+0x12a0>
 800635c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10c      	bne.n	8006386 <USB_EPStartXfer+0x11f6>
 800636c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800637c:	b29a      	uxth	r2, r3
 800637e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	e054      	b.n	8006430 <USB_EPStartXfer+0x12a0>
 8006386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	085b      	lsrs	r3, r3, #1
 8006394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <USB_EPStartXfer+0x1226>
 80063ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b0:	3301      	adds	r3, #1
 80063b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	b29a      	uxth	r2, r3
 80063be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	029b      	lsls	r3, r3, #10
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	4313      	orrs	r3, r2
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063d0:	801a      	strh	r2, [r3, #0]
 80063d2:	e02d      	b.n	8006430 <USB_EPStartXfer+0x12a0>
 80063d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	785b      	ldrb	r3, [r3, #1]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d125      	bne.n	8006430 <USB_EPStartXfer+0x12a0>
 80063e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	461a      	mov	r2, r3
 80063f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80063fa:	4413      	add	r3, r2
 80063fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	011a      	lsls	r2, r3, #4
 800640e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006412:	4413      	add	r3, r2
 8006414:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006418:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800641c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	b29a      	uxth	r2, r3
 800642a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800642e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8218 	beq.w	8006872 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006462:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d005      	beq.n	800647a <USB_EPStartXfer+0x12ea>
 800646e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8006472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10d      	bne.n	8006496 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800647a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800647e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006482:	2b00      	cmp	r3, #0
 8006484:	f040 81f5 	bne.w	8006872 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006488:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800648c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006490:	2b00      	cmp	r3, #0
 8006492:	f040 81ee 	bne.w	8006872 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8006496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800649a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064bc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80064c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	441a      	add	r2, r3
 80064da:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80064de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	8013      	strh	r3, [r2, #0]
 80064f2:	e1be      	b.n	8006872 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80064f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	78db      	ldrb	r3, [r3, #3]
 8006500:	2b01      	cmp	r3, #1
 8006502:	f040 81b4 	bne.w	800686e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	429a      	cmp	r2, r3
 8006520:	d917      	bls.n	8006552 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8006532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699a      	ldr	r2, [r3, #24]
 800653e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006542:	1ad2      	subs	r2, r2, r3
 8006544:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	619a      	str	r2, [r3, #24]
 8006550:	e00e      	b.n	8006570 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8006562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2200      	movs	r2, #0
 800656e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	785b      	ldrb	r3, [r3, #1]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f040 8085 	bne.w	800668c <USB_EPStartXfer+0x14fc>
 8006582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006586:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006594:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800659e:	b29b      	uxth	r3, r3
 80065a0:	461a      	mov	r2, r3
 80065a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065a6:	4413      	add	r3, r2
 80065a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	011a      	lsls	r2, r3, #4
 80065ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065be:	4413      	add	r3, r2
 80065c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80065c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80065da:	801a      	strh	r2, [r3, #0]
 80065dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80065e2:	d923      	bls.n	800662c <USB_EPStartXfer+0x149c>
 80065e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e8:	095b      	lsrs	r3, r3, #5
 80065ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f2:	f003 031f 	and.w	r3, r3, #31
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d104      	bne.n	8006604 <USB_EPStartXfer+0x1474>
 80065fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065fe:	3b01      	subs	r3, #1
 8006600:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006604:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29a      	uxth	r2, r3
 800660c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006610:	b29b      	uxth	r3, r3
 8006612:	029b      	lsls	r3, r3, #10
 8006614:	b29b      	uxth	r3, r3
 8006616:	4313      	orrs	r3, r2
 8006618:	b29b      	uxth	r3, r3
 800661a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800661e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006622:	b29a      	uxth	r2, r3
 8006624:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006628:	801a      	strh	r2, [r3, #0]
 800662a:	e060      	b.n	80066ee <USB_EPStartXfer+0x155e>
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10c      	bne.n	800664e <USB_EPStartXfer+0x14be>
 8006634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006644:	b29a      	uxth	r2, r3
 8006646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800664a:	801a      	strh	r2, [r3, #0]
 800664c:	e04f      	b.n	80066ee <USB_EPStartXfer+0x155e>
 800664e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006652:	085b      	lsrs	r3, r3, #1
 8006654:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	2b00      	cmp	r3, #0
 8006662:	d004      	beq.n	800666e <USB_EPStartXfer+0x14de>
 8006664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006668:	3301      	adds	r3, #1
 800666a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800666e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29a      	uxth	r2, r3
 8006676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800667a:	b29b      	uxth	r3, r3
 800667c:	029b      	lsls	r3, r3, #10
 800667e:	b29b      	uxth	r3, r3
 8006680:	4313      	orrs	r3, r2
 8006682:	b29a      	uxth	r2, r3
 8006684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	e030      	b.n	80066ee <USB_EPStartXfer+0x155e>
 800668c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d128      	bne.n	80066ee <USB_EPStartXfer+0x155e>
 800669c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80066aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	461a      	mov	r2, r3
 80066bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066c0:	4413      	add	r3, r2
 80066c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80066c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	011a      	lsls	r2, r3, #4
 80066d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066d8:	4413      	add	r3, r2
 80066da:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80066ec:	801a      	strh	r2, [r3, #0]
 80066ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	785b      	ldrb	r3, [r3, #1]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f040 8085 	bne.w	8006818 <USB_EPStartXfer+0x1688>
 800670e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006712:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800671c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800672a:	b29b      	uxth	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006732:	4413      	add	r3, r2
 8006734:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	011a      	lsls	r2, r3, #4
 8006746:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800674a:	4413      	add	r3, r2
 800674c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006750:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006754:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006760:	b29a      	uxth	r2, r3
 8006762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676c:	2b3e      	cmp	r3, #62	@ 0x3e
 800676e:	d923      	bls.n	80067b8 <USB_EPStartXfer+0x1628>
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800677a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800677e:	f003 031f 	and.w	r3, r3, #31
 8006782:	2b00      	cmp	r3, #0
 8006784:	d104      	bne.n	8006790 <USB_EPStartXfer+0x1600>
 8006786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800678a:	3b01      	subs	r3, #1
 800678c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006790:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29a      	uxth	r2, r3
 8006798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800679c:	b29b      	uxth	r3, r3
 800679e:	029b      	lsls	r3, r3, #10
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	4313      	orrs	r3, r2
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067b4:	801a      	strh	r2, [r3, #0]
 80067b6:	e05c      	b.n	8006872 <USB_EPStartXfer+0x16e2>
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10c      	bne.n	80067da <USB_EPStartXfer+0x164a>
 80067c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067d6:	801a      	strh	r2, [r3, #0]
 80067d8:	e04b      	b.n	8006872 <USB_EPStartXfer+0x16e2>
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067de:	085b      	lsrs	r3, r3, #1
 80067e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <USB_EPStartXfer+0x166a>
 80067f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067f4:	3301      	adds	r3, #1
 80067f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29a      	uxth	r2, r3
 8006802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006806:	b29b      	uxth	r3, r3
 8006808:	029b      	lsls	r3, r3, #10
 800680a:	b29b      	uxth	r3, r3
 800680c:	4313      	orrs	r3, r2
 800680e:	b29a      	uxth	r2, r3
 8006810:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006814:	801a      	strh	r2, [r3, #0]
 8006816:	e02c      	b.n	8006872 <USB_EPStartXfer+0x16e2>
 8006818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d124      	bne.n	8006872 <USB_EPStartXfer+0x16e2>
 8006828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800682c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006836:	b29b      	uxth	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800683e:	4413      	add	r3, r2
 8006840:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	011a      	lsls	r2, r3, #4
 8006852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006856:	4413      	add	r3, r2
 8006858:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800685c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006864:	b29a      	uxth	r2, r3
 8006866:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800686a:	801a      	strh	r2, [r3, #0]
 800686c:	e001      	b.n	8006872 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e03a      	b.n	80068e8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006898:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800689c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80068a0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80068a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80068ac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068b0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80068b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	441a      	add	r2, r3
 80068ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80068d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b085      	sub	sp, #20
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
 80068fa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	785b      	ldrb	r3, [r3, #1]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d020      	beq.n	8006946 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006916:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800691a:	81bb      	strh	r3, [r7, #12]
 800691c:	89bb      	ldrh	r3, [r7, #12]
 800691e:	f083 0310 	eor.w	r3, r3, #16
 8006922:	81bb      	strh	r3, [r7, #12]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	441a      	add	r2, r3
 800692e:	89bb      	ldrh	r3, [r7, #12]
 8006930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800693c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006940:	b29b      	uxth	r3, r3
 8006942:	8013      	strh	r3, [r2, #0]
 8006944:	e01f      	b.n	8006986 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695c:	81fb      	strh	r3, [r7, #14]
 800695e:	89fb      	ldrh	r3, [r7, #14]
 8006960:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006964:	81fb      	strh	r3, [r7, #14]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	441a      	add	r2, r3
 8006970:	89fb      	ldrh	r3, [r7, #14]
 8006972:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006976:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800697a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800697e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006982:	b29b      	uxth	r3, r3
 8006984:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr

08006992 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006992:	b480      	push	{r7}
 8006994:	b087      	sub	sp, #28
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	7b1b      	ldrb	r3, [r3, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f040 809d 	bne.w	8006ae0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d04c      	beq.n	8006a48 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	823b      	strh	r3, [r7, #16]
 80069bc:	8a3b      	ldrh	r3, [r7, #16]
 80069be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d01b      	beq.n	80069fe <USB_EPClearStall+0x6c>
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069dc:	81fb      	strh	r3, [r7, #14]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	441a      	add	r2, r3
 80069e8:	89fb      	ldrh	r3, [r7, #14]
 80069ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	78db      	ldrb	r3, [r3, #3]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d06c      	beq.n	8006ae0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a1c:	81bb      	strh	r3, [r7, #12]
 8006a1e:	89bb      	ldrh	r3, [r7, #12]
 8006a20:	f083 0320 	eor.w	r3, r3, #32
 8006a24:	81bb      	strh	r3, [r7, #12]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	441a      	add	r2, r3
 8006a30:	89bb      	ldrh	r3, [r7, #12]
 8006a32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	8013      	strh	r3, [r2, #0]
 8006a46:	e04b      	b.n	8006ae0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	82fb      	strh	r3, [r7, #22]
 8006a56:	8afb      	ldrh	r3, [r7, #22]
 8006a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01b      	beq.n	8006a98 <USB_EPClearStall+0x106>
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a76:	82bb      	strh	r3, [r7, #20]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	441a      	add	r2, r3
 8006a82:	8abb      	ldrh	r3, [r7, #20]
 8006a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aae:	827b      	strh	r3, [r7, #18]
 8006ab0:	8a7b      	ldrh	r3, [r7, #18]
 8006ab2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006ab6:	827b      	strh	r3, [r7, #18]
 8006ab8:	8a7b      	ldrh	r3, [r7, #18]
 8006aba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006abe:	827b      	strh	r3, [r7, #18]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	441a      	add	r2, r3
 8006aca:	8a7b      	ldrh	r3, [r7, #18]
 8006acc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ad0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ad4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bc80      	pop	{r7}
 8006aea:	4770      	bx	lr

08006aec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d103      	bne.n	8006b06 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2280      	movs	r2, #128	@ 0x80
 8006b02:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bc80      	pop	{r7}
 8006b10:	4770      	bx	lr

08006b12 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr

08006b26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr

08006b3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr

08006b58 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bc80      	pop	{r7}
 8006b6c:	4770      	bx	lr

08006b6e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b08b      	sub	sp, #44	@ 0x2c
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	4611      	mov	r1, r2
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	80fb      	strh	r3, [r7, #6]
 8006b80:	4613      	mov	r3, r2
 8006b82:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b84:	88bb      	ldrh	r3, [r7, #4]
 8006b86:	3301      	adds	r3, #1
 8006b88:	085b      	lsrs	r3, r3, #1
 8006b8a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b94:	88fb      	ldrh	r3, [r7, #6]
 8006b96:	005a      	lsls	r2, r3, #1
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ba0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ba6:	e01f      	b.n	8006be8 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	b21b      	sxth	r3, r3
 8006bb6:	021b      	lsls	r3, r3, #8
 8006bb8:	b21a      	sxth	r2, r3
 8006bba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	b21b      	sxth	r3, r3
 8006bc2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	8a7a      	ldrh	r2, [r7, #18]
 8006bc8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	3302      	adds	r3, #2
 8006bce:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	3302      	adds	r3, #2
 8006bd4:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	3301      	adds	r3, #1
 8006be0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	3b01      	subs	r3, #1
 8006be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1dc      	bne.n	8006ba8 <USB_WritePMA+0x3a>
  }
}
 8006bee:	bf00      	nop
 8006bf0:	bf00      	nop
 8006bf2:	372c      	adds	r7, #44	@ 0x2c
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr

08006bfa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b08b      	sub	sp, #44	@ 0x2c
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	4611      	mov	r1, r2
 8006c06:	461a      	mov	r2, r3
 8006c08:	460b      	mov	r3, r1
 8006c0a:	80fb      	strh	r3, [r7, #6]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c10:	88bb      	ldrh	r3, [r7, #4]
 8006c12:	085b      	lsrs	r3, r3, #1
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c20:	88fb      	ldrh	r3, [r7, #6]
 8006c22:	005a      	lsls	r2, r3, #1
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c2c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c32:	e01b      	b.n	8006c6c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	3302      	adds	r3, #2
 8006c40:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	0a1b      	lsrs	r3, r3, #8
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	3302      	adds	r3, #2
 8006c64:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e0      	bne.n	8006c34 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006c72:	88bb      	ldrh	r3, [r7, #4]
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d007      	beq.n	8006c8e <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	701a      	strb	r2, [r3, #0]
  }
}
 8006c8e:	bf00      	nop
 8006c90:	372c      	adds	r7, #44	@ 0x2c
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bc80      	pop	{r7}
 8006c96:	4770      	bx	lr

08006c98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	7c1b      	ldrb	r3, [r3, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d115      	bne.n	8006cdc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	2181      	movs	r1, #129	@ 0x81
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 fe8e 	bl	80089da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cc8:	2202      	movs	r2, #2
 8006cca:	2101      	movs	r1, #1
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fe84 	bl	80089da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006cda:	e012      	b.n	8006d02 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006cdc:	2340      	movs	r3, #64	@ 0x40
 8006cde:	2202      	movs	r2, #2
 8006ce0:	2181      	movs	r1, #129	@ 0x81
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fe79 	bl	80089da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cee:	2340      	movs	r3, #64	@ 0x40
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 fe70 	bl	80089da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d02:	2308      	movs	r3, #8
 8006d04:	2203      	movs	r2, #3
 8006d06:	2182      	movs	r1, #130	@ 0x82
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fe66 	bl	80089da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d14:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006d18:	f001 ff86 	bl	8008c28 <USBD_static_malloc>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d102      	bne.n	8006d34 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	73fb      	strb	r3, [r7, #15]
 8006d32:	e026      	b.n	8006d82 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d3a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	7c1b      	ldrb	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d109      	bne.n	8006d72 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d68:	2101      	movs	r1, #1
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 ff25 	bl	8008bba <USBD_LL_PrepareReceive>
 8006d70:	e007      	b.n	8006d82 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d78:	2340      	movs	r3, #64	@ 0x40
 8006d7a:	2101      	movs	r1, #1
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 ff1c 	bl	8008bba <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d9c:	2181      	movs	r1, #129	@ 0x81
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 fe41 	bl	8008a26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006daa:	2101      	movs	r1, #1
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 fe3a 	bl	8008a26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006dba:	2182      	movs	r1, #130	@ 0x82
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 fe32 	bl	8008a26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00e      	beq.n	8006df0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 ff2c 	bl	8008c40 <USBD_static_free>
    pdev->pClassData = NULL;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e0a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d039      	beq.n	8006e98 <USBD_CDC_Setup+0x9e>
 8006e24:	2b20      	cmp	r3, #32
 8006e26:	d17f      	bne.n	8006f28 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	88db      	ldrh	r3, [r3, #6]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d029      	beq.n	8006e84 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	b25b      	sxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	da11      	bge.n	8006e5e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006e46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	88d2      	ldrh	r2, [r2, #6]
 8006e4c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e4e:	6939      	ldr	r1, [r7, #16]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	88db      	ldrh	r3, [r3, #6]
 8006e54:	461a      	mov	r2, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 fa06 	bl	8008268 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006e5c:	e06b      	b.n	8006f36 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	785a      	ldrb	r2, [r3, #1]
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	88db      	ldrh	r3, [r3, #6]
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e74:	6939      	ldr	r1, [r7, #16]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	88db      	ldrh	r3, [r3, #6]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 fa21 	bl	80082c4 <USBD_CtlPrepareRx>
      break;
 8006e82:	e058      	b.n	8006f36 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	7850      	ldrb	r0, [r2, #1]
 8006e90:	2200      	movs	r2, #0
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	4798      	blx	r3
      break;
 8006e96:	e04e      	b.n	8006f36 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	785b      	ldrb	r3, [r3, #1]
 8006e9c:	2b0b      	cmp	r3, #11
 8006e9e:	d02e      	beq.n	8006efe <USBD_CDC_Setup+0x104>
 8006ea0:	2b0b      	cmp	r3, #11
 8006ea2:	dc38      	bgt.n	8006f16 <USBD_CDC_Setup+0x11c>
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <USBD_CDC_Setup+0xb4>
 8006ea8:	2b0a      	cmp	r3, #10
 8006eaa:	d014      	beq.n	8006ed6 <USBD_CDC_Setup+0xdc>
 8006eac:	e033      	b.n	8006f16 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d107      	bne.n	8006ec8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006eb8:	f107 030c 	add.w	r3, r7, #12
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 f9d1 	bl	8008268 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ec6:	e02e      	b.n	8006f26 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 f962 	bl	8008194 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ed4:	e027      	b.n	8006f26 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d107      	bne.n	8006ef0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006ee0:	f107 030f 	add.w	r3, r7, #15
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 f9bd 	bl	8008268 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006eee:	e01a      	b.n	8006f26 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 f94e 	bl	8008194 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ef8:	2302      	movs	r3, #2
 8006efa:	75fb      	strb	r3, [r7, #23]
          break;
 8006efc:	e013      	b.n	8006f26 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d00d      	beq.n	8006f24 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 f942 	bl	8008194 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f10:	2302      	movs	r3, #2
 8006f12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f14:	e006      	b.n	8006f24 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 f93b 	bl	8008194 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	75fb      	strb	r3, [r7, #23]
          break;
 8006f22:	e000      	b.n	8006f26 <USBD_CDC_Setup+0x12c>
          break;
 8006f24:	bf00      	nop
      }
      break;
 8006f26:	e006      	b.n	8006f36 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 f932 	bl	8008194 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f30:	2302      	movs	r3, #2
 8006f32:	75fb      	strb	r3, [r7, #23]
      break;
 8006f34:	bf00      	nop
  }

  return ret;
 8006f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f52:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006f5a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d03a      	beq.n	8006fdc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f66:	78fa      	ldrb	r2, [r7, #3]
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	331c      	adds	r3, #28
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d029      	beq.n	8006fd0 <USBD_CDC_DataIn+0x90>
 8006f7c:	78fa      	ldrb	r2, [r7, #3]
 8006f7e:	6879      	ldr	r1, [r7, #4]
 8006f80:	4613      	mov	r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4413      	add	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	440b      	add	r3, r1
 8006f8a:	331c      	adds	r3, #28
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	78f9      	ldrb	r1, [r7, #3]
 8006f90:	68b8      	ldr	r0, [r7, #8]
 8006f92:	460b      	mov	r3, r1
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	440b      	add	r3, r1
 8006f98:	00db      	lsls	r3, r3, #3
 8006f9a:	4403      	add	r3, r0
 8006f9c:	3320      	adds	r3, #32
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	fbb2 f1f3 	udiv	r1, r2, r3
 8006fa4:	fb01 f303 	mul.w	r3, r1, r3
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d110      	bne.n	8006fd0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006fae:	78fa      	ldrb	r2, [r7, #3]
 8006fb0:	6879      	ldr	r1, [r7, #4]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	440b      	add	r3, r1
 8006fbc:	331c      	adds	r3, #28
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fc2:	78f9      	ldrb	r1, [r7, #3]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fdd3 	bl	8008b74 <USBD_LL_Transmit>
 8006fce:	e003      	b.n	8006fd8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	e000      	b.n	8006fde <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006fdc:	2302      	movs	r3, #2
  }
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ff8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ffa:	78fb      	ldrb	r3, [r7, #3]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f001 fdfe 	bl	8008c00 <USBD_LL_GetRxDataSize>
 8007004:	4602      	mov	r2, r0
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00d      	beq.n	8007032 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800702a:	4611      	mov	r1, r2
 800702c:	4798      	blx	r3

    return USBD_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	e000      	b.n	8007034 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007032:	2302      	movs	r3, #2
  }
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800704a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007052:	2b00      	cmp	r3, #0
 8007054:	d014      	beq.n	8007080 <USBD_CDC_EP0_RxReady+0x44>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800705c:	2bff      	cmp	r3, #255	@ 0xff
 800705e:	d00f      	beq.n	8007080 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800706e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007076:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	22ff      	movs	r2, #255	@ 0xff
 800707c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2243      	movs	r2, #67	@ 0x43
 8007098:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800709a:	4b03      	ldr	r3, [pc, #12]	@ (80070a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	20000094 	.word	0x20000094

080070ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2243      	movs	r2, #67	@ 0x43
 80070b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80070ba:	4b03      	ldr	r3, [pc, #12]	@ (80070c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bc80      	pop	{r7}
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	20000050 	.word	0x20000050

080070cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2243      	movs	r2, #67	@ 0x43
 80070d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80070da:	4b03      	ldr	r3, [pc, #12]	@ (80070e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	200000d8 	.word	0x200000d8

080070ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	220a      	movs	r2, #10
 80070f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80070fa:	4b03      	ldr	r3, [pc, #12]	@ (8007108 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	2000000c 	.word	0x2000000c

0800710c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007116:	2302      	movs	r3, #2
 8007118:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007128:	2300      	movs	r3, #0
 800712a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr

08007138 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	4613      	mov	r3, r2
 8007144:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800714c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007156:	88fa      	ldrh	r2, [r7, #6]
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr

0800716a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800716a:	b480      	push	{r7}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800717a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr

08007190 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800719e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01c      	beq.n	80071e4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d115      	bne.n	80071e0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	2181      	movs	r1, #129	@ 0x81
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f001 fccc 	bl	8008b74 <USBD_LL_Transmit>

      return USBD_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	e002      	b.n	80071e6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e000      	b.n	80071e6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80071e4:	2302      	movs	r3, #2
  }
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071fc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007204:	2b00      	cmp	r3, #0
 8007206:	d017      	beq.n	8007238 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	7c1b      	ldrb	r3, [r3, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d109      	bne.n	8007224 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007216:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800721a:	2101      	movs	r1, #1
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fccc 	bl	8008bba <USBD_LL_PrepareReceive>
 8007222:	e007      	b.n	8007234 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800722a:	2340      	movs	r3, #64	@ 0x40
 800722c:	2101      	movs	r1, #1
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 fcc3 	bl	8008bba <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	e000      	b.n	800723a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007238:	2302      	movs	r3, #2
  }
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	4613      	mov	r3, r2
 800724e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007256:	2302      	movs	r3, #2
 8007258:	e01a      	b.n	8007290 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	79fa      	ldrb	r2, [r7, #7]
 8007286:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f001 fb31 	bl	80088f0 <USBD_LL_Init>

  return USBD_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d006      	beq.n	80072ba <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	73fb      	strb	r3, [r7, #15]
 80072b8:	e001      	b.n	80072be <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80072ba:	2302      	movs	r3, #2
 80072bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072be:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr

080072ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 fb66 	bl	80089a4 <USBD_LL_Start>

  return USBD_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bc80      	pop	{r7}
 80072f4:	4770      	bx	lr

080072f6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
 80072fe:	460b      	mov	r3, r1
 8007300:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007302:	2302      	movs	r3, #2
 8007304:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00c      	beq.n	800732a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	78fa      	ldrb	r2, [r7, #3]
 800731a:	4611      	mov	r1, r2
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	4798      	blx	r3
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800732a:	7bfb      	ldrb	r3, [r7, #15]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	78fa      	ldrb	r2, [r7, #3]
 800734a:	4611      	mov	r1, r2
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	4798      	blx	r3

  return USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	4618      	mov	r0, r3
 800736e:	f000 fed8 	bl	8008122 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007380:	461a      	mov	r2, r3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800738e:	f003 031f 	and.w	r3, r3, #31
 8007392:	2b02      	cmp	r3, #2
 8007394:	d016      	beq.n	80073c4 <USBD_LL_SetupStage+0x6a>
 8007396:	2b02      	cmp	r3, #2
 8007398:	d81c      	bhi.n	80073d4 <USBD_LL_SetupStage+0x7a>
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <USBD_LL_SetupStage+0x4a>
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d008      	beq.n	80073b4 <USBD_LL_SetupStage+0x5a>
 80073a2:	e017      	b.n	80073d4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f9cb 	bl	8007748 <USBD_StdDevReq>
      break;
 80073b2:	e01a      	b.n	80073ea <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fa2d 	bl	800781c <USBD_StdItfReq>
      break;
 80073c2:	e012      	b.n	80073ea <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fa6d 	bl	80078ac <USBD_StdEPReq>
      break;
 80073d2:	e00a      	b.n	80073ea <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80073da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fb3e 	bl	8008a64 <USBD_LL_StallEP>
      break;
 80073e8:	bf00      	nop
  }

  return USBD_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	460b      	mov	r3, r1
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d14b      	bne.n	80074a0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800740e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007416:	2b03      	cmp	r3, #3
 8007418:	d134      	bne.n	8007484 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	68da      	ldr	r2, [r3, #12]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	429a      	cmp	r2, r3
 8007424:	d919      	bls.n	800745a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	1ad2      	subs	r2, r2, r3
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800743c:	429a      	cmp	r2, r3
 800743e:	d203      	bcs.n	8007448 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007444:	b29b      	uxth	r3, r3
 8007446:	e002      	b.n	800744e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800744c:	b29b      	uxth	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 ff54 	bl	8008300 <USBD_CtlContinueRx>
 8007458:	e038      	b.n	80074cc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800746c:	2b03      	cmp	r3, #3
 800746e:	d105      	bne.n	800747c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 ff51 	bl	8008324 <USBD_CtlSendStatus>
 8007482:	e023      	b.n	80074cc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800748a:	2b05      	cmp	r3, #5
 800748c:	d11e      	bne.n	80074cc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007496:	2100      	movs	r1, #0
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f001 fae3 	bl	8008a64 <USBD_LL_StallEP>
 800749e:	e015      	b.n	80074cc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00d      	beq.n	80074c8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d108      	bne.n	80074c8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	7afa      	ldrb	r2, [r7, #11]
 80074c0:	4611      	mov	r1, r2
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	4798      	blx	r3
 80074c6:	e001      	b.n	80074cc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074c8:	2302      	movs	r3, #2
 80074ca:	e000      	b.n	80074ce <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b086      	sub	sp, #24
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	460b      	mov	r3, r1
 80074e0:	607a      	str	r2, [r7, #4]
 80074e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80074e4:	7afb      	ldrb	r3, [r7, #11]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d17f      	bne.n	80075ea <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3314      	adds	r3, #20
 80074ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d15c      	bne.n	80075b4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	429a      	cmp	r2, r3
 8007504:	d915      	bls.n	8007532 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	1ad2      	subs	r2, r2, r3
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	b29b      	uxth	r3, r3
 800751a:	461a      	mov	r2, r3
 800751c:	6879      	ldr	r1, [r7, #4]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 febe 	bl	80082a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007524:	2300      	movs	r3, #0
 8007526:	2200      	movs	r2, #0
 8007528:	2100      	movs	r1, #0
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f001 fb45 	bl	8008bba <USBD_LL_PrepareReceive>
 8007530:	e04e      	b.n	80075d0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	6912      	ldr	r2, [r2, #16]
 800753a:	fbb3 f1f2 	udiv	r1, r3, r2
 800753e:	fb01 f202 	mul.w	r2, r1, r2
 8007542:	1a9b      	subs	r3, r3, r2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d11c      	bne.n	8007582 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007550:	429a      	cmp	r2, r3
 8007552:	d316      	bcc.n	8007582 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800755e:	429a      	cmp	r2, r3
 8007560:	d20f      	bcs.n	8007582 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007562:	2200      	movs	r2, #0
 8007564:	2100      	movs	r1, #0
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fe9a 	bl	80082a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007574:	2300      	movs	r3, #0
 8007576:	2200      	movs	r2, #0
 8007578:	2100      	movs	r1, #0
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f001 fb1d 	bl	8008bba <USBD_LL_PrepareReceive>
 8007580:	e026      	b.n	80075d0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00a      	beq.n	80075a4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007594:	2b03      	cmp	r3, #3
 8007596:	d105      	bne.n	80075a4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80075a4:	2180      	movs	r1, #128	@ 0x80
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f001 fa5c 	bl	8008a64 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 fecc 	bl	800834a <USBD_CtlReceiveStatus>
 80075b2:	e00d      	b.n	80075d0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075ba:	2b04      	cmp	r3, #4
 80075bc:	d004      	beq.n	80075c8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d103      	bne.n	80075d0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80075c8:	2180      	movs	r1, #128	@ 0x80
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f001 fa4a 	bl	8008a64 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d11d      	bne.n	8007616 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f7ff fe81 	bl	80072e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80075e8:	e015      	b.n	8007616 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00d      	beq.n	8007612 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d108      	bne.n	8007612 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	7afa      	ldrb	r2, [r7, #11]
 800760a:	4611      	mov	r1, r2
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	4798      	blx	r3
 8007610:	e001      	b.n	8007616 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007612:	2302      	movs	r3, #2
 8007614:	e000      	b.n	8007618 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007628:	2340      	movs	r3, #64	@ 0x40
 800762a:	2200      	movs	r2, #0
 800762c:	2100      	movs	r1, #0
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 f9d3 	bl	80089da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2240      	movs	r2, #64	@ 0x40
 8007640:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007644:	2340      	movs	r3, #64	@ 0x40
 8007646:	2200      	movs	r2, #0
 8007648:	2180      	movs	r1, #128	@ 0x80
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 f9c5 	bl	80089da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2240      	movs	r2, #64	@ 0x40
 800765a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007680:	2b00      	cmp	r3, #0
 8007682:	d009      	beq.n	8007698 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6852      	ldr	r2, [r2, #4]
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	4611      	mov	r1, r2
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	4798      	blx	r3
  }

  return USBD_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	78fa      	ldrb	r2, [r7, #3]
 80076b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bc80      	pop	{r7}
 80076be:	4770      	bx	lr

080076c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2204      	movs	r2, #4
 80076d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bc80      	pop	{r7}
 80076e6:	4770      	bx	lr

080076e8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	d105      	bne.n	8007706 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	bc80      	pop	{r7}
 8007710:	4770      	bx	lr

08007712 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007720:	2b03      	cmp	r3, #3
 8007722:	d10b      	bne.n	800773c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d005      	beq.n	800773c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800775e:	2b40      	cmp	r3, #64	@ 0x40
 8007760:	d005      	beq.n	800776e <USBD_StdDevReq+0x26>
 8007762:	2b40      	cmp	r3, #64	@ 0x40
 8007764:	d84f      	bhi.n	8007806 <USBD_StdDevReq+0xbe>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d009      	beq.n	800777e <USBD_StdDevReq+0x36>
 800776a:	2b20      	cmp	r3, #32
 800776c:	d14b      	bne.n	8007806 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	4798      	blx	r3
      break;
 800777c:	e048      	b.n	8007810 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	785b      	ldrb	r3, [r3, #1]
 8007782:	2b09      	cmp	r3, #9
 8007784:	d839      	bhi.n	80077fa <USBD_StdDevReq+0xb2>
 8007786:	a201      	add	r2, pc, #4	@ (adr r2, 800778c <USBD_StdDevReq+0x44>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	080077dd 	.word	0x080077dd
 8007790:	080077f1 	.word	0x080077f1
 8007794:	080077fb 	.word	0x080077fb
 8007798:	080077e7 	.word	0x080077e7
 800779c:	080077fb 	.word	0x080077fb
 80077a0:	080077bf 	.word	0x080077bf
 80077a4:	080077b5 	.word	0x080077b5
 80077a8:	080077fb 	.word	0x080077fb
 80077ac:	080077d3 	.word	0x080077d3
 80077b0:	080077c9 	.word	0x080077c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f9dc 	bl	8007b74 <USBD_GetDescriptor>
          break;
 80077bc:	e022      	b.n	8007804 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fb3f 	bl	8007e44 <USBD_SetAddress>
          break;
 80077c6:	e01d      	b.n	8007804 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fb7e 	bl	8007ecc <USBD_SetConfig>
          break;
 80077d0:	e018      	b.n	8007804 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fc07 	bl	8007fe8 <USBD_GetConfig>
          break;
 80077da:	e013      	b.n	8007804 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fc37 	bl	8008052 <USBD_GetStatus>
          break;
 80077e4:	e00e      	b.n	8007804 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fc65 	bl	80080b8 <USBD_SetFeature>
          break;
 80077ee:	e009      	b.n	8007804 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fc74 	bl	80080e0 <USBD_ClrFeature>
          break;
 80077f8:	e004      	b.n	8007804 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fcc9 	bl	8008194 <USBD_CtlError>
          break;
 8007802:	bf00      	nop
      }
      break;
 8007804:	e004      	b.n	8007810 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fcc3 	bl	8008194 <USBD_CtlError>
      break;
 800780e:	bf00      	nop
  }

  return ret;
 8007810:	7bfb      	ldrb	r3, [r7, #15]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop

0800781c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007832:	2b40      	cmp	r3, #64	@ 0x40
 8007834:	d005      	beq.n	8007842 <USBD_StdItfReq+0x26>
 8007836:	2b40      	cmp	r3, #64	@ 0x40
 8007838:	d82e      	bhi.n	8007898 <USBD_StdItfReq+0x7c>
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <USBD_StdItfReq+0x26>
 800783e:	2b20      	cmp	r3, #32
 8007840:	d12a      	bne.n	8007898 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007848:	3b01      	subs	r3, #1
 800784a:	2b02      	cmp	r3, #2
 800784c:	d81d      	bhi.n	800788a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	889b      	ldrh	r3, [r3, #4]
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b01      	cmp	r3, #1
 8007856:	d813      	bhi.n	8007880 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	4798      	blx	r3
 8007866:	4603      	mov	r3, r0
 8007868:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	88db      	ldrh	r3, [r3, #6]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d110      	bne.n	8007894 <USBD_StdItfReq+0x78>
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10d      	bne.n	8007894 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fd53 	bl	8008324 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800787e:	e009      	b.n	8007894 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fc86 	bl	8008194 <USBD_CtlError>
          break;
 8007888:	e004      	b.n	8007894 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fc81 	bl	8008194 <USBD_CtlError>
          break;
 8007892:	e000      	b.n	8007896 <USBD_StdItfReq+0x7a>
          break;
 8007894:	bf00      	nop
      }
      break;
 8007896:	e004      	b.n	80078a2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fc7a 	bl	8008194 <USBD_CtlError>
      break;
 80078a0:	bf00      	nop
  }

  return USBD_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	889b      	ldrh	r3, [r3, #4]
 80078be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078c8:	2b40      	cmp	r3, #64	@ 0x40
 80078ca:	d007      	beq.n	80078dc <USBD_StdEPReq+0x30>
 80078cc:	2b40      	cmp	r3, #64	@ 0x40
 80078ce:	f200 8146 	bhi.w	8007b5e <USBD_StdEPReq+0x2b2>
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <USBD_StdEPReq+0x40>
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	f040 8141 	bne.w	8007b5e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	4798      	blx	r3
      break;
 80078ea:	e13d      	b.n	8007b68 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d10a      	bne.n	800790e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	4798      	blx	r3
 8007906:	4603      	mov	r3, r0
 8007908:	73fb      	strb	r3, [r7, #15]

        return ret;
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	e12d      	b.n	8007b6a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	2b03      	cmp	r3, #3
 8007914:	d007      	beq.n	8007926 <USBD_StdEPReq+0x7a>
 8007916:	2b03      	cmp	r3, #3
 8007918:	f300 811b 	bgt.w	8007b52 <USBD_StdEPReq+0x2a6>
 800791c:	2b00      	cmp	r3, #0
 800791e:	d072      	beq.n	8007a06 <USBD_StdEPReq+0x15a>
 8007920:	2b01      	cmp	r3, #1
 8007922:	d03a      	beq.n	800799a <USBD_StdEPReq+0xee>
 8007924:	e115      	b.n	8007b52 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800792c:	2b02      	cmp	r3, #2
 800792e:	d002      	beq.n	8007936 <USBD_StdEPReq+0x8a>
 8007930:	2b03      	cmp	r3, #3
 8007932:	d015      	beq.n	8007960 <USBD_StdEPReq+0xb4>
 8007934:	e02b      	b.n	800798e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00c      	beq.n	8007956 <USBD_StdEPReq+0xaa>
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	2b80      	cmp	r3, #128	@ 0x80
 8007940:	d009      	beq.n	8007956 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 f88c 	bl	8008a64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800794c:	2180      	movs	r1, #128	@ 0x80
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 f888 	bl	8008a64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007954:	e020      	b.n	8007998 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fc1b 	bl	8008194 <USBD_CtlError>
              break;
 800795e:	e01b      	b.n	8007998 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	885b      	ldrh	r3, [r3, #2]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10e      	bne.n	8007986 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00b      	beq.n	8007986 <USBD_StdEPReq+0xda>
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b80      	cmp	r3, #128	@ 0x80
 8007972:	d008      	beq.n	8007986 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	88db      	ldrh	r3, [r3, #6]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d104      	bne.n	8007986 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 f86f 	bl	8008a64 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fccc 	bl	8008324 <USBD_CtlSendStatus>

              break;
 800798c:	e004      	b.n	8007998 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fbff 	bl	8008194 <USBD_CtlError>
              break;
 8007996:	bf00      	nop
          }
          break;
 8007998:	e0e0      	b.n	8007b5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d002      	beq.n	80079aa <USBD_StdEPReq+0xfe>
 80079a4:	2b03      	cmp	r3, #3
 80079a6:	d015      	beq.n	80079d4 <USBD_StdEPReq+0x128>
 80079a8:	e026      	b.n	80079f8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00c      	beq.n	80079ca <USBD_StdEPReq+0x11e>
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	2b80      	cmp	r3, #128	@ 0x80
 80079b4:	d009      	beq.n	80079ca <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 f852 	bl	8008a64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079c0:	2180      	movs	r1, #128	@ 0x80
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 f84e 	bl	8008a64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079c8:	e01c      	b.n	8007a04 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fbe1 	bl	8008194 <USBD_CtlError>
              break;
 80079d2:	e017      	b.n	8007a04 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	885b      	ldrh	r3, [r3, #2]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d112      	bne.n	8007a02 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d004      	beq.n	80079f0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 f859 	bl	8008aa2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fc97 	bl	8008324 <USBD_CtlSendStatus>
              }
              break;
 80079f6:	e004      	b.n	8007a02 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fbca 	bl	8008194 <USBD_CtlError>
              break;
 8007a00:	e000      	b.n	8007a04 <USBD_StdEPReq+0x158>
              break;
 8007a02:	bf00      	nop
          }
          break;
 8007a04:	e0aa      	b.n	8007b5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d002      	beq.n	8007a16 <USBD_StdEPReq+0x16a>
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d032      	beq.n	8007a7a <USBD_StdEPReq+0x1ce>
 8007a14:	e097      	b.n	8007b46 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d007      	beq.n	8007a2c <USBD_StdEPReq+0x180>
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b80      	cmp	r3, #128	@ 0x80
 8007a20:	d004      	beq.n	8007a2c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fbb5 	bl	8008194 <USBD_CtlError>
                break;
 8007a2a:	e091      	b.n	8007b50 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	da0b      	bge.n	8007a4c <USBD_StdEPReq+0x1a0>
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	3310      	adds	r3, #16
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	4413      	add	r3, r2
 8007a48:	3304      	adds	r3, #4
 8007a4a:	e00b      	b.n	8007a64 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	4413      	add	r3, r2
 8007a62:	3304      	adds	r3, #4
 8007a64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fbf8 	bl	8008268 <USBD_CtlSendData>
              break;
 8007a78:	e06a      	b.n	8007b50 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	da11      	bge.n	8007aa6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	f003 020f 	and.w	r2, r3, #15
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	440b      	add	r3, r1
 8007a94:	3318      	adds	r3, #24
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d117      	bne.n	8007acc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fb78 	bl	8008194 <USBD_CtlError>
                  break;
 8007aa4:	e054      	b.n	8007b50 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	f003 020f 	and.w	r2, r3, #15
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d104      	bne.n	8007acc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fb65 	bl	8008194 <USBD_CtlError>
                  break;
 8007aca:	e041      	b.n	8007b50 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007acc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	da0b      	bge.n	8007aec <USBD_StdEPReq+0x240>
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	3310      	adds	r3, #16
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	3304      	adds	r3, #4
 8007aea:	e00b      	b.n	8007b04 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007af2:	4613      	mov	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	4413      	add	r3, r2
 8007b02:	3304      	adds	r3, #4
 8007b04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <USBD_StdEPReq+0x266>
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	2b80      	cmp	r3, #128	@ 0x80
 8007b10:	d103      	bne.n	8007b1a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	e00e      	b.n	8007b38 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 ffde 	bl	8008ae0 <USBD_LL_IsStallEP>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	e002      	b.n	8007b38 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fb92 	bl	8008268 <USBD_CtlSendData>
              break;
 8007b44:	e004      	b.n	8007b50 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fb23 	bl	8008194 <USBD_CtlError>
              break;
 8007b4e:	bf00      	nop
          }
          break;
 8007b50:	e004      	b.n	8007b5c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fb1d 	bl	8008194 <USBD_CtlError>
          break;
 8007b5a:	bf00      	nop
      }
      break;
 8007b5c:	e004      	b.n	8007b68 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fb17 	bl	8008194 <USBD_CtlError>
      break;
 8007b66:	bf00      	nop
  }

  return ret;
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b82:	2300      	movs	r3, #0
 8007b84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	885b      	ldrh	r3, [r3, #2]
 8007b8e:	0a1b      	lsrs	r3, r3, #8
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	3b01      	subs	r3, #1
 8007b94:	2b06      	cmp	r3, #6
 8007b96:	f200 8128 	bhi.w	8007dea <USBD_GetDescriptor+0x276>
 8007b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba0 <USBD_GetDescriptor+0x2c>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007bbd 	.word	0x08007bbd
 8007ba4:	08007bd5 	.word	0x08007bd5
 8007ba8:	08007c15 	.word	0x08007c15
 8007bac:	08007deb 	.word	0x08007deb
 8007bb0:	08007deb 	.word	0x08007deb
 8007bb4:	08007d8b 	.word	0x08007d8b
 8007bb8:	08007db7 	.word	0x08007db7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	7c12      	ldrb	r2, [r2, #16]
 8007bc8:	f107 0108 	add.w	r1, r7, #8
 8007bcc:	4610      	mov	r0, r2
 8007bce:	4798      	blx	r3
 8007bd0:	60f8      	str	r0, [r7, #12]
      break;
 8007bd2:	e112      	b.n	8007dfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	7c1b      	ldrb	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10d      	bne.n	8007bf8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be4:	f107 0208 	add.w	r2, r7, #8
 8007be8:	4610      	mov	r0, r2
 8007bea:	4798      	blx	r3
 8007bec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007bf6:	e100      	b.n	8007dfa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c00:	f107 0208 	add.w	r2, r7, #8
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
 8007c08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	2202      	movs	r2, #2
 8007c10:	701a      	strb	r2, [r3, #0]
      break;
 8007c12:	e0f2      	b.n	8007dfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	885b      	ldrh	r3, [r3, #2]
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b05      	cmp	r3, #5
 8007c1c:	f200 80ac 	bhi.w	8007d78 <USBD_GetDescriptor+0x204>
 8007c20:	a201      	add	r2, pc, #4	@ (adr r2, 8007c28 <USBD_GetDescriptor+0xb4>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007c41 	.word	0x08007c41
 8007c2c:	08007c75 	.word	0x08007c75
 8007c30:	08007ca9 	.word	0x08007ca9
 8007c34:	08007cdd 	.word	0x08007cdd
 8007c38:	08007d11 	.word	0x08007d11
 8007c3c:	08007d45 	.word	0x08007d45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	7c12      	ldrb	r2, [r2, #16]
 8007c58:	f107 0108 	add.w	r1, r7, #8
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4798      	blx	r3
 8007c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c62:	e091      	b.n	8007d88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fa94 	bl	8008194 <USBD_CtlError>
            err++;
 8007c6c:	7afb      	ldrb	r3, [r7, #11]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	72fb      	strb	r3, [r7, #11]
          break;
 8007c72:	e089      	b.n	8007d88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00b      	beq.n	8007c98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	7c12      	ldrb	r2, [r2, #16]
 8007c8c:	f107 0108 	add.w	r1, r7, #8
 8007c90:	4610      	mov	r0, r2
 8007c92:	4798      	blx	r3
 8007c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c96:	e077      	b.n	8007d88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa7a 	bl	8008194 <USBD_CtlError>
            err++;
 8007ca0:	7afb      	ldrb	r3, [r7, #11]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ca6:	e06f      	b.n	8007d88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00b      	beq.n	8007ccc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	7c12      	ldrb	r2, [r2, #16]
 8007cc0:	f107 0108 	add.w	r1, r7, #8
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4798      	blx	r3
 8007cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cca:	e05d      	b.n	8007d88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa60 	bl	8008194 <USBD_CtlError>
            err++;
 8007cd4:	7afb      	ldrb	r3, [r7, #11]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cda:	e055      	b.n	8007d88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	7c12      	ldrb	r2, [r2, #16]
 8007cf4:	f107 0108 	add.w	r1, r7, #8
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	4798      	blx	r3
 8007cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cfe:	e043      	b.n	8007d88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fa46 	bl	8008194 <USBD_CtlError>
            err++;
 8007d08:	7afb      	ldrb	r3, [r7, #11]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d0e:	e03b      	b.n	8007d88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00b      	beq.n	8007d34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	7c12      	ldrb	r2, [r2, #16]
 8007d28:	f107 0108 	add.w	r1, r7, #8
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4798      	blx	r3
 8007d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d32:	e029      	b.n	8007d88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fa2c 	bl	8008194 <USBD_CtlError>
            err++;
 8007d3c:	7afb      	ldrb	r3, [r7, #11]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	72fb      	strb	r3, [r7, #11]
          break;
 8007d42:	e021      	b.n	8007d88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00b      	beq.n	8007d68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	7c12      	ldrb	r2, [r2, #16]
 8007d5c:	f107 0108 	add.w	r1, r7, #8
 8007d60:	4610      	mov	r0, r2
 8007d62:	4798      	blx	r3
 8007d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d66:	e00f      	b.n	8007d88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fa12 	bl	8008194 <USBD_CtlError>
            err++;
 8007d70:	7afb      	ldrb	r3, [r7, #11]
 8007d72:	3301      	adds	r3, #1
 8007d74:	72fb      	strb	r3, [r7, #11]
          break;
 8007d76:	e007      	b.n	8007d88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fa0a 	bl	8008194 <USBD_CtlError>
          err++;
 8007d80:	7afb      	ldrb	r3, [r7, #11]
 8007d82:	3301      	adds	r3, #1
 8007d84:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d86:	e038      	b.n	8007dfa <USBD_GetDescriptor+0x286>
 8007d88:	e037      	b.n	8007dfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7c1b      	ldrb	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d109      	bne.n	8007da6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d9a:	f107 0208 	add.w	r2, r7, #8
 8007d9e:	4610      	mov	r0, r2
 8007da0:	4798      	blx	r3
 8007da2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007da4:	e029      	b.n	8007dfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f9f3 	bl	8008194 <USBD_CtlError>
        err++;
 8007dae:	7afb      	ldrb	r3, [r7, #11]
 8007db0:	3301      	adds	r3, #1
 8007db2:	72fb      	strb	r3, [r7, #11]
      break;
 8007db4:	e021      	b.n	8007dfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	7c1b      	ldrb	r3, [r3, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10d      	bne.n	8007dda <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc6:	f107 0208 	add.w	r2, r7, #8
 8007dca:	4610      	mov	r0, r2
 8007dcc:	4798      	blx	r3
 8007dce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	2207      	movs	r2, #7
 8007dd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dd8:	e00f      	b.n	8007dfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f9d9 	bl	8008194 <USBD_CtlError>
        err++;
 8007de2:	7afb      	ldrb	r3, [r7, #11]
 8007de4:	3301      	adds	r3, #1
 8007de6:	72fb      	strb	r3, [r7, #11]
      break;
 8007de8:	e007      	b.n	8007dfa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f9d1 	bl	8008194 <USBD_CtlError>
      err++;
 8007df2:	7afb      	ldrb	r3, [r7, #11]
 8007df4:	3301      	adds	r3, #1
 8007df6:	72fb      	strb	r3, [r7, #11]
      break;
 8007df8:	bf00      	nop
  }

  if (err != 0U)
 8007dfa:	7afb      	ldrb	r3, [r7, #11]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d11c      	bne.n	8007e3a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007e00:	893b      	ldrh	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d011      	beq.n	8007e2a <USBD_GetDescriptor+0x2b6>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	88db      	ldrh	r3, [r3, #6]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00d      	beq.n	8007e2a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	88da      	ldrh	r2, [r3, #6]
 8007e12:	893b      	ldrh	r3, [r7, #8]
 8007e14:	4293      	cmp	r3, r2
 8007e16:	bf28      	it	cs
 8007e18:	4613      	movcs	r3, r2
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e1e:	893b      	ldrh	r3, [r7, #8]
 8007e20:	461a      	mov	r2, r3
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fa1f 	bl	8008268 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	88db      	ldrh	r3, [r3, #6]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d104      	bne.n	8007e3c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fa76 	bl	8008324 <USBD_CtlSendStatus>
 8007e38:	e000      	b.n	8007e3c <USBD_GetDescriptor+0x2c8>
    return;
 8007e3a:	bf00      	nop
    }
  }
}
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop

08007e44 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	889b      	ldrh	r3, [r3, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d130      	bne.n	8007eb8 <USBD_SetAddress+0x74>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	88db      	ldrh	r3, [r3, #6]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d12c      	bne.n	8007eb8 <USBD_SetAddress+0x74>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	885b      	ldrh	r3, [r3, #2]
 8007e62:	2b7f      	cmp	r3, #127	@ 0x7f
 8007e64:	d828      	bhi.n	8007eb8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	885b      	ldrh	r3, [r3, #2]
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d104      	bne.n	8007e86 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f988 	bl	8008194 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e84:	e01d      	b.n	8007ec2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	7bfa      	ldrb	r2, [r7, #15]
 8007e8a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fe4f 	bl	8008b36 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fa43 	bl	8008324 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eac:	e009      	b.n	8007ec2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb6:	e004      	b.n	8007ec2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f96a 	bl	8008194 <USBD_CtlError>
  }
}
 8007ec0:	bf00      	nop
 8007ec2:	bf00      	nop
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
	...

08007ecc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	885b      	ldrh	r3, [r3, #2]
 8007eda:	b2da      	uxtb	r2, r3
 8007edc:	4b41      	ldr	r3, [pc, #260]	@ (8007fe4 <USBD_SetConfig+0x118>)
 8007ede:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ee0:	4b40      	ldr	r3, [pc, #256]	@ (8007fe4 <USBD_SetConfig+0x118>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d904      	bls.n	8007ef2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f952 	bl	8008194 <USBD_CtlError>
 8007ef0:	e075      	b.n	8007fde <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d002      	beq.n	8007f02 <USBD_SetConfig+0x36>
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d023      	beq.n	8007f48 <USBD_SetConfig+0x7c>
 8007f00:	e062      	b.n	8007fc8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007f02:	4b38      	ldr	r3, [pc, #224]	@ (8007fe4 <USBD_SetConfig+0x118>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01a      	beq.n	8007f40 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007f0a:	4b36      	ldr	r3, [pc, #216]	@ (8007fe4 <USBD_SetConfig+0x118>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2203      	movs	r2, #3
 8007f18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f1c:	4b31      	ldr	r3, [pc, #196]	@ (8007fe4 <USBD_SetConfig+0x118>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff f9e7 	bl	80072f6 <USBD_SetClassConfig>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d104      	bne.n	8007f38 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f92f 	bl	8008194 <USBD_CtlError>
            return;
 8007f36:	e052      	b.n	8007fde <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f9f3 	bl	8008324 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f3e:	e04e      	b.n	8007fde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f9ef 	bl	8008324 <USBD_CtlSendStatus>
        break;
 8007f46:	e04a      	b.n	8007fde <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007f48:	4b26      	ldr	r3, [pc, #152]	@ (8007fe4 <USBD_SetConfig+0x118>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d112      	bne.n	8007f76 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007f58:	4b22      	ldr	r3, [pc, #136]	@ (8007fe4 <USBD_SetConfig+0x118>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007f62:	4b20      	ldr	r3, [pc, #128]	@ (8007fe4 <USBD_SetConfig+0x118>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7ff f9e3 	bl	8007334 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 f9d8 	bl	8008324 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f74:	e033      	b.n	8007fde <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f76:	4b1b      	ldr	r3, [pc, #108]	@ (8007fe4 <USBD_SetConfig+0x118>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d01d      	beq.n	8007fc0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f7ff f9d1 	bl	8007334 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f92:	4b14      	ldr	r3, [pc, #80]	@ (8007fe4 <USBD_SetConfig+0x118>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f9c:	4b11      	ldr	r3, [pc, #68]	@ (8007fe4 <USBD_SetConfig+0x118>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff f9a7 	bl	80072f6 <USBD_SetClassConfig>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d104      	bne.n	8007fb8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f8ef 	bl	8008194 <USBD_CtlError>
            return;
 8007fb6:	e012      	b.n	8007fde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f9b3 	bl	8008324 <USBD_CtlSendStatus>
        break;
 8007fbe:	e00e      	b.n	8007fde <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f9af 	bl	8008324 <USBD_CtlSendStatus>
        break;
 8007fc6:	e00a      	b.n	8007fde <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f8e2 	bl	8008194 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007fd0:	4b04      	ldr	r3, [pc, #16]	@ (8007fe4 <USBD_SetConfig+0x118>)
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7ff f9ac 	bl	8007334 <USBD_ClrClassConfig>
        break;
 8007fdc:	bf00      	nop
    }
  }
}
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	2000037c 	.word	0x2000037c

08007fe8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	88db      	ldrh	r3, [r3, #6]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d004      	beq.n	8008004 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ffa:	6839      	ldr	r1, [r7, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f8c9 	bl	8008194 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008002:	e022      	b.n	800804a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800800a:	2b02      	cmp	r3, #2
 800800c:	dc02      	bgt.n	8008014 <USBD_GetConfig+0x2c>
 800800e:	2b00      	cmp	r3, #0
 8008010:	dc03      	bgt.n	800801a <USBD_GetConfig+0x32>
 8008012:	e015      	b.n	8008040 <USBD_GetConfig+0x58>
 8008014:	2b03      	cmp	r3, #3
 8008016:	d00b      	beq.n	8008030 <USBD_GetConfig+0x48>
 8008018:	e012      	b.n	8008040 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3308      	adds	r3, #8
 8008024:	2201      	movs	r2, #1
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f91d 	bl	8008268 <USBD_CtlSendData>
        break;
 800802e:	e00c      	b.n	800804a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3304      	adds	r3, #4
 8008034:	2201      	movs	r2, #1
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f915 	bl	8008268 <USBD_CtlSendData>
        break;
 800803e:	e004      	b.n	800804a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f8a6 	bl	8008194 <USBD_CtlError>
        break;
 8008048:	bf00      	nop
}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008062:	3b01      	subs	r3, #1
 8008064:	2b02      	cmp	r3, #2
 8008066:	d81e      	bhi.n	80080a6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	88db      	ldrh	r3, [r3, #6]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d004      	beq.n	800807a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f88e 	bl	8008194 <USBD_CtlError>
        break;
 8008078:	e01a      	b.n	80080b0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008086:	2b00      	cmp	r3, #0
 8008088:	d005      	beq.n	8008096 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f043 0202 	orr.w	r2, r3, #2
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	330c      	adds	r3, #12
 800809a:	2202      	movs	r2, #2
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f8e2 	bl	8008268 <USBD_CtlSendData>
      break;
 80080a4:	e004      	b.n	80080b0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f873 	bl	8008194 <USBD_CtlError>
      break;
 80080ae:	bf00      	nop
  }
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	885b      	ldrh	r3, [r3, #2]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d106      	bne.n	80080d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f926 	bl	8008324 <USBD_CtlSendStatus>
  }
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080f0:	3b01      	subs	r3, #1
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d80b      	bhi.n	800810e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	885b      	ldrh	r3, [r3, #2]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d10c      	bne.n	8008118 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f90c 	bl	8008324 <USBD_CtlSendStatus>
      }
      break;
 800810c:	e004      	b.n	8008118 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f83f 	bl	8008194 <USBD_CtlError>
      break;
 8008116:	e000      	b.n	800811a <USBD_ClrFeature+0x3a>
      break;
 8008118:	bf00      	nop
  }
}
 800811a:	bf00      	nop
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	781a      	ldrb	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	785a      	ldrb	r2, [r3, #1]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	3302      	adds	r3, #2
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	3303      	adds	r3, #3
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	021b      	lsls	r3, r3, #8
 800814c:	b29b      	uxth	r3, r3
 800814e:	4413      	add	r3, r2
 8008150:	b29a      	uxth	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	3304      	adds	r3, #4
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	3305      	adds	r3, #5
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	021b      	lsls	r3, r3, #8
 8008166:	b29b      	uxth	r3, r3
 8008168:	4413      	add	r3, r2
 800816a:	b29a      	uxth	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	3306      	adds	r3, #6
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	3307      	adds	r3, #7
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	b29b      	uxth	r3, r3
 8008182:	4413      	add	r3, r2
 8008184:	b29a      	uxth	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	80da      	strh	r2, [r3, #6]

}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr

08008194 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800819e:	2180      	movs	r1, #128	@ 0x80
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fc5f 	bl	8008a64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80081a6:	2100      	movs	r1, #0
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fc5b 	bl	8008a64 <USBD_LL_StallEP>
}
 80081ae:	bf00      	nop
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b086      	sub	sp, #24
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d032      	beq.n	8008232 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 f834 	bl	800823a <USBD_GetLen>
 80081d2:	4603      	mov	r3, r0
 80081d4:	3301      	adds	r3, #1
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	b29a      	uxth	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80081e0:	7dfb      	ldrb	r3, [r7, #23]
 80081e2:	1c5a      	adds	r2, r3, #1
 80081e4:	75fa      	strb	r2, [r7, #23]
 80081e6:	461a      	mov	r2, r3
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	4413      	add	r3, r2
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	7812      	ldrb	r2, [r2, #0]
 80081f0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	75fa      	strb	r2, [r7, #23]
 80081f8:	461a      	mov	r2, r3
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	4413      	add	r3, r2
 80081fe:	2203      	movs	r2, #3
 8008200:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008202:	e012      	b.n	800822a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	60fa      	str	r2, [r7, #12]
 800820a:	7dfa      	ldrb	r2, [r7, #23]
 800820c:	1c51      	adds	r1, r2, #1
 800820e:	75f9      	strb	r1, [r7, #23]
 8008210:	4611      	mov	r1, r2
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	440a      	add	r2, r1
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	75fa      	strb	r2, [r7, #23]
 8008220:	461a      	mov	r2, r3
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	4413      	add	r3, r2
 8008226:	2200      	movs	r2, #0
 8008228:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1e8      	bne.n	8008204 <USBD_GetString+0x4e>
    }
  }
}
 8008232:	bf00      	nop
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800823a:	b480      	push	{r7}
 800823c:	b085      	sub	sp, #20
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008246:	e005      	b.n	8008254 <USBD_GetLen+0x1a>
  {
    len++;
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	3301      	adds	r3, #1
 800824c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	3301      	adds	r3, #1
 8008252:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1f5      	bne.n	8008248 <USBD_GetLen+0xe>
  }

  return len;
 800825c:	7bfb      	ldrb	r3, [r7, #15]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	bc80      	pop	{r7}
 8008266:	4770      	bx	lr

08008268 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4613      	mov	r3, r2
 8008274:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2202      	movs	r2, #2
 800827a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800827e:	88fa      	ldrh	r2, [r7, #6]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008284:	88fa      	ldrh	r2, [r7, #6]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800828a:	88fb      	ldrh	r3, [r7, #6]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	2100      	movs	r1, #0
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 fc6f 	bl	8008b74 <USBD_LL_Transmit>

  return USBD_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4613      	mov	r3, r2
 80082ac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	2100      	movs	r1, #0
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fc5d 	bl	8008b74 <USBD_LL_Transmit>

  return USBD_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	4613      	mov	r3, r2
 80082d0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2203      	movs	r2, #3
 80082d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80082da:	88fa      	ldrh	r2, [r7, #6]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80082e2:	88fa      	ldrh	r2, [r7, #6]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082ea:	88fb      	ldrh	r3, [r7, #6]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	2100      	movs	r1, #0
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 fc62 	bl	8008bba <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	4613      	mov	r3, r2
 800830c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800830e:	88fb      	ldrh	r3, [r7, #6]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	2100      	movs	r1, #0
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f000 fc50 	bl	8008bba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2204      	movs	r2, #4
 8008330:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008334:	2300      	movs	r3, #0
 8008336:	2200      	movs	r2, #0
 8008338:	2100      	movs	r1, #0
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fc1a 	bl	8008b74 <USBD_LL_Transmit>

  return USBD_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b082      	sub	sp, #8
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2205      	movs	r2, #5
 8008356:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800835a:	2300      	movs	r3, #0
 800835c:	2200      	movs	r2, #0
 800835e:	2100      	movs	r1, #0
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fc2a 	bl	8008bba <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008374:	2200      	movs	r2, #0
 8008376:	4912      	ldr	r1, [pc, #72]	@ (80083c0 <MX_USB_DEVICE_Init+0x50>)
 8008378:	4812      	ldr	r0, [pc, #72]	@ (80083c4 <MX_USB_DEVICE_Init+0x54>)
 800837a:	f7fe ff62 	bl	8007242 <USBD_Init>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008384:	f7f8 fcd0 	bl	8000d28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008388:	490f      	ldr	r1, [pc, #60]	@ (80083c8 <MX_USB_DEVICE_Init+0x58>)
 800838a:	480e      	ldr	r0, [pc, #56]	@ (80083c4 <MX_USB_DEVICE_Init+0x54>)
 800838c:	f7fe ff84 	bl	8007298 <USBD_RegisterClass>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008396:	f7f8 fcc7 	bl	8000d28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800839a:	490c      	ldr	r1, [pc, #48]	@ (80083cc <MX_USB_DEVICE_Init+0x5c>)
 800839c:	4809      	ldr	r0, [pc, #36]	@ (80083c4 <MX_USB_DEVICE_Init+0x54>)
 800839e:	f7fe feb5 	bl	800710c <USBD_CDC_RegisterInterface>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083a8:	f7f8 fcbe 	bl	8000d28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083ac:	4805      	ldr	r0, [pc, #20]	@ (80083c4 <MX_USB_DEVICE_Init+0x54>)
 80083ae:	f7fe ff8c 	bl	80072ca <USBD_Start>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083b8:	f7f8 fcb6 	bl	8000d28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083bc:	bf00      	nop
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	2000012c 	.word	0x2000012c
 80083c4:	20000380 	.word	0x20000380
 80083c8:	20000018 	.word	0x20000018
 80083cc:	2000011c 	.word	0x2000011c

080083d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083d4:	2200      	movs	r2, #0
 80083d6:	4905      	ldr	r1, [pc, #20]	@ (80083ec <CDC_Init_FS+0x1c>)
 80083d8:	4805      	ldr	r0, [pc, #20]	@ (80083f0 <CDC_Init_FS+0x20>)
 80083da:	f7fe fead 	bl	8007138 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083de:	4905      	ldr	r1, [pc, #20]	@ (80083f4 <CDC_Init_FS+0x24>)
 80083e0:	4803      	ldr	r0, [pc, #12]	@ (80083f0 <CDC_Init_FS+0x20>)
 80083e2:	f7fe fec2 	bl	800716a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20000a44 	.word	0x20000a44
 80083f0:	20000380 	.word	0x20000380
 80083f4:	20000644 	.word	0x20000644

080083f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083f8:	b480      	push	{r7}
 80083fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083fe:	4618      	mov	r0, r3
 8008400:	46bd      	mov	sp, r7
 8008402:	bc80      	pop	{r7}
 8008404:	4770      	bx	lr
	...

08008408 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	6039      	str	r1, [r7, #0]
 8008412:	71fb      	strb	r3, [r7, #7]
 8008414:	4613      	mov	r3, r2
 8008416:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	2b23      	cmp	r3, #35	@ 0x23
 800841c:	d84a      	bhi.n	80084b4 <CDC_Control_FS+0xac>
 800841e:	a201      	add	r2, pc, #4	@ (adr r2, 8008424 <CDC_Control_FS+0x1c>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	080084b5 	.word	0x080084b5
 8008428:	080084b5 	.word	0x080084b5
 800842c:	080084b5 	.word	0x080084b5
 8008430:	080084b5 	.word	0x080084b5
 8008434:	080084b5 	.word	0x080084b5
 8008438:	080084b5 	.word	0x080084b5
 800843c:	080084b5 	.word	0x080084b5
 8008440:	080084b5 	.word	0x080084b5
 8008444:	080084b5 	.word	0x080084b5
 8008448:	080084b5 	.word	0x080084b5
 800844c:	080084b5 	.word	0x080084b5
 8008450:	080084b5 	.word	0x080084b5
 8008454:	080084b5 	.word	0x080084b5
 8008458:	080084b5 	.word	0x080084b5
 800845c:	080084b5 	.word	0x080084b5
 8008460:	080084b5 	.word	0x080084b5
 8008464:	080084b5 	.word	0x080084b5
 8008468:	080084b5 	.word	0x080084b5
 800846c:	080084b5 	.word	0x080084b5
 8008470:	080084b5 	.word	0x080084b5
 8008474:	080084b5 	.word	0x080084b5
 8008478:	080084b5 	.word	0x080084b5
 800847c:	080084b5 	.word	0x080084b5
 8008480:	080084b5 	.word	0x080084b5
 8008484:	080084b5 	.word	0x080084b5
 8008488:	080084b5 	.word	0x080084b5
 800848c:	080084b5 	.word	0x080084b5
 8008490:	080084b5 	.word	0x080084b5
 8008494:	080084b5 	.word	0x080084b5
 8008498:	080084b5 	.word	0x080084b5
 800849c:	080084b5 	.word	0x080084b5
 80084a0:	080084b5 	.word	0x080084b5
 80084a4:	080084b5 	.word	0x080084b5
 80084a8:	080084b5 	.word	0x080084b5
 80084ac:	080084b5 	.word	0x080084b5
 80084b0:	080084b5 	.word	0x080084b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084b4:	bf00      	nop
  }

  return (USBD_OK);
 80084b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	bc80      	pop	{r7}
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop

080084c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USB_RXCallBack(Buf, Len);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7f8 f93d 	bl	8000750 <USB_RXCallBack>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084d6:	6879      	ldr	r1, [r7, #4]
 80084d8:	4805      	ldr	r0, [pc, #20]	@ (80084f0 <CDC_Receive_FS+0x2c>)
 80084da:	f7fe fe46 	bl	800716a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084de:	4804      	ldr	r0, [pc, #16]	@ (80084f0 <CDC_Receive_FS+0x2c>)
 80084e0:	f7fe fe85 	bl	80071ee <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20000380 	.word	0x20000380

080084f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008504:	4b0d      	ldr	r3, [pc, #52]	@ (800853c <CDC_Transmit_FS+0x48>)
 8008506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800850a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008512:	2b00      	cmp	r3, #0
 8008514:	d001      	beq.n	800851a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008516:	2301      	movs	r3, #1
 8008518:	e00b      	b.n	8008532 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800851a:	887b      	ldrh	r3, [r7, #2]
 800851c:	461a      	mov	r2, r3
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4806      	ldr	r0, [pc, #24]	@ (800853c <CDC_Transmit_FS+0x48>)
 8008522:	f7fe fe09 	bl	8007138 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008526:	4805      	ldr	r0, [pc, #20]	@ (800853c <CDC_Transmit_FS+0x48>)
 8008528:	f7fe fe32 	bl	8007190 <USBD_CDC_TransmitPacket>
 800852c:	4603      	mov	r3, r0
 800852e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008530:	7bfb      	ldrb	r3, [r7, #15]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20000380 	.word	0x20000380

08008540 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	6039      	str	r1, [r7, #0]
 800854a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2212      	movs	r2, #18
 8008550:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008552:	4b03      	ldr	r3, [pc, #12]	@ (8008560 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	bc80      	pop	{r7}
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	20000148 	.word	0x20000148

08008564 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	6039      	str	r1, [r7, #0]
 800856e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2204      	movs	r2, #4
 8008574:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008576:	4b03      	ldr	r3, [pc, #12]	@ (8008584 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	bc80      	pop	{r7}
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	2000015c 	.word	0x2000015c

08008588 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	4603      	mov	r3, r0
 8008590:	6039      	str	r1, [r7, #0]
 8008592:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008594:	79fb      	ldrb	r3, [r7, #7]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d105      	bne.n	80085a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	4907      	ldr	r1, [pc, #28]	@ (80085bc <USBD_FS_ProductStrDescriptor+0x34>)
 800859e:	4808      	ldr	r0, [pc, #32]	@ (80085c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80085a0:	f7ff fe09 	bl	80081b6 <USBD_GetString>
 80085a4:	e004      	b.n	80085b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	4904      	ldr	r1, [pc, #16]	@ (80085bc <USBD_FS_ProductStrDescriptor+0x34>)
 80085aa:	4805      	ldr	r0, [pc, #20]	@ (80085c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80085ac:	f7ff fe03 	bl	80081b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085b0:	4b02      	ldr	r3, [pc, #8]	@ (80085bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000e44 	.word	0x20000e44
 80085c0:	08009fbc 	.word	0x08009fbc

080085c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	6039      	str	r1, [r7, #0]
 80085ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	4904      	ldr	r1, [pc, #16]	@ (80085e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085d4:	4804      	ldr	r0, [pc, #16]	@ (80085e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085d6:	f7ff fdee 	bl	80081b6 <USBD_GetString>
  return USBD_StrDesc;
 80085da:	4b02      	ldr	r3, [pc, #8]	@ (80085e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20000e44 	.word	0x20000e44
 80085e8:	08009fd4 	.word	0x08009fd4

080085ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	221a      	movs	r2, #26
 80085fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085fe:	f000 f843 	bl	8008688 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008602:	4b02      	ldr	r3, [pc, #8]	@ (800860c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008604:	4618      	mov	r0, r3
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	20000160 	.word	0x20000160

08008610 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	6039      	str	r1, [r7, #0]
 800861a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d105      	bne.n	800862e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	4907      	ldr	r1, [pc, #28]	@ (8008644 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008626:	4808      	ldr	r0, [pc, #32]	@ (8008648 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008628:	f7ff fdc5 	bl	80081b6 <USBD_GetString>
 800862c:	e004      	b.n	8008638 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	4904      	ldr	r1, [pc, #16]	@ (8008644 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008632:	4805      	ldr	r0, [pc, #20]	@ (8008648 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008634:	f7ff fdbf 	bl	80081b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008638:	4b02      	ldr	r3, [pc, #8]	@ (8008644 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20000e44 	.word	0x20000e44
 8008648:	08009fe8 	.word	0x08009fe8

0800864c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008658:	79fb      	ldrb	r3, [r7, #7]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d105      	bne.n	800866a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	4907      	ldr	r1, [pc, #28]	@ (8008680 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008662:	4808      	ldr	r0, [pc, #32]	@ (8008684 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008664:	f7ff fda7 	bl	80081b6 <USBD_GetString>
 8008668:	e004      	b.n	8008674 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	4904      	ldr	r1, [pc, #16]	@ (8008680 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800866e:	4805      	ldr	r0, [pc, #20]	@ (8008684 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008670:	f7ff fda1 	bl	80081b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008674:	4b02      	ldr	r3, [pc, #8]	@ (8008680 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	20000e44 	.word	0x20000e44
 8008684:	08009ff4 	.word	0x08009ff4

08008688 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800868e:	4b0f      	ldr	r3, [pc, #60]	@ (80086cc <Get_SerialNum+0x44>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008694:	4b0e      	ldr	r3, [pc, #56]	@ (80086d0 <Get_SerialNum+0x48>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800869a:	4b0e      	ldr	r3, [pc, #56]	@ (80086d4 <Get_SerialNum+0x4c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4413      	add	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d009      	beq.n	80086c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086ae:	2208      	movs	r2, #8
 80086b0:	4909      	ldr	r1, [pc, #36]	@ (80086d8 <Get_SerialNum+0x50>)
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 f814 	bl	80086e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086b8:	2204      	movs	r2, #4
 80086ba:	4908      	ldr	r1, [pc, #32]	@ (80086dc <Get_SerialNum+0x54>)
 80086bc:	68b8      	ldr	r0, [r7, #8]
 80086be:	f000 f80f 	bl	80086e0 <IntToUnicode>
  }
}
 80086c2:	bf00      	nop
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	1ffff7e8 	.word	0x1ffff7e8
 80086d0:	1ffff7ec 	.word	0x1ffff7ec
 80086d4:	1ffff7f0 	.word	0x1ffff7f0
 80086d8:	20000162 	.word	0x20000162
 80086dc:	20000172 	.word	0x20000172

080086e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	4613      	mov	r3, r2
 80086ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086f2:	2300      	movs	r3, #0
 80086f4:	75fb      	strb	r3, [r7, #23]
 80086f6:	e027      	b.n	8008748 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	0f1b      	lsrs	r3, r3, #28
 80086fc:	2b09      	cmp	r3, #9
 80086fe:	d80b      	bhi.n	8008718 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	0f1b      	lsrs	r3, r3, #28
 8008704:	b2da      	uxtb	r2, r3
 8008706:	7dfb      	ldrb	r3, [r7, #23]
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4619      	mov	r1, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	440b      	add	r3, r1
 8008710:	3230      	adds	r2, #48	@ 0x30
 8008712:	b2d2      	uxtb	r2, r2
 8008714:	701a      	strb	r2, [r3, #0]
 8008716:	e00a      	b.n	800872e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	0f1b      	lsrs	r3, r3, #28
 800871c:	b2da      	uxtb	r2, r3
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	4619      	mov	r1, r3
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	440b      	add	r3, r1
 8008728:	3237      	adds	r2, #55	@ 0x37
 800872a:	b2d2      	uxtb	r2, r2
 800872c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	011b      	lsls	r3, r3, #4
 8008732:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008734:	7dfb      	ldrb	r3, [r7, #23]
 8008736:	005b      	lsls	r3, r3, #1
 8008738:	3301      	adds	r3, #1
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	4413      	add	r3, r2
 800873e:	2200      	movs	r2, #0
 8008740:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	3301      	adds	r3, #1
 8008746:	75fb      	strb	r3, [r7, #23]
 8008748:	7dfa      	ldrb	r2, [r7, #23]
 800874a:	79fb      	ldrb	r3, [r7, #7]
 800874c:	429a      	cmp	r2, r3
 800874e:	d3d3      	bcc.n	80086f8 <IntToUnicode+0x18>
  }
}
 8008750:	bf00      	nop
 8008752:	bf00      	nop
 8008754:	371c      	adds	r7, #28
 8008756:	46bd      	mov	sp, r7
 8008758:	bc80      	pop	{r7}
 800875a:	4770      	bx	lr

0800875c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a11      	ldr	r2, [pc, #68]	@ (80087b0 <HAL_PCD_MspInit+0x54>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d11b      	bne.n	80087a6 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800876e:	4b11      	ldr	r3, [pc, #68]	@ (80087b4 <HAL_PCD_MspInit+0x58>)
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	4a10      	ldr	r2, [pc, #64]	@ (80087b4 <HAL_PCD_MspInit+0x58>)
 8008774:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008778:	61d3      	str	r3, [r2, #28]
 800877a:	4b0e      	ldr	r3, [pc, #56]	@ (80087b4 <HAL_PCD_MspInit+0x58>)
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8008786:	2200      	movs	r2, #0
 8008788:	2100      	movs	r1, #0
 800878a:	2013      	movs	r0, #19
 800878c:	f7f8 fd2b 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8008790:	2013      	movs	r0, #19
 8008792:	f7f8 fd44 	bl	800121e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008796:	2200      	movs	r2, #0
 8008798:	2100      	movs	r1, #0
 800879a:	2014      	movs	r0, #20
 800879c:	f7f8 fd23 	bl	80011e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80087a0:	2014      	movs	r0, #20
 80087a2:	f7f8 fd3c 	bl	800121e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80087a6:	bf00      	nop
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	40005c00 	.word	0x40005c00
 80087b4:	40021000 	.word	0x40021000

080087b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80087cc:	4619      	mov	r1, r3
 80087ce:	4610      	mov	r0, r2
 80087d0:	f7fe fdc3 	bl	800735a <USBD_LL_SetupStage>
}
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80087ee:	78fa      	ldrb	r2, [r7, #3]
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	440b      	add	r3, r1
 80087fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	4619      	mov	r1, r3
 8008806:	f7fe fdf5 	bl	80073f4 <USBD_LL_DataOutStage>
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	460b      	mov	r3, r1
 800881c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008824:	78fa      	ldrb	r2, [r7, #3]
 8008826:	6879      	ldr	r1, [r7, #4]
 8008828:	4613      	mov	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	440b      	add	r3, r1
 8008832:	3324      	adds	r3, #36	@ 0x24
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	4619      	mov	r1, r3
 800883a:	f7fe fe4c 	bl	80074d6 <USBD_LL_DataInStage>
}
 800883e:	bf00      	nop
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe ff5c 	bl	8007712 <USBD_LL_SOF>
}
 800885a:	bf00      	nop
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800886a:	2301      	movs	r3, #1
 800886c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	799b      	ldrb	r3, [r3, #6]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d001      	beq.n	800887a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008876:	f7f8 fa57 	bl	8000d28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008880:	7bfa      	ldrb	r2, [r7, #15]
 8008882:	4611      	mov	r1, r2
 8008884:	4618      	mov	r0, r3
 8008886:	f7fe ff0c 	bl	80076a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe fec5 	bl	8007620 <USBD_LL_Reset>
}
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe ff06 	bl	80076c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	7a9b      	ldrb	r3, [r3, #10]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088bc:	4b04      	ldr	r3, [pc, #16]	@ (80088d0 <HAL_PCD_SuspendCallback+0x30>)
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	4a03      	ldr	r2, [pc, #12]	@ (80088d0 <HAL_PCD_SuspendCallback+0x30>)
 80088c2:	f043 0306 	orr.w	r3, r3, #6
 80088c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	e000ed00 	.word	0xe000ed00

080088d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe ff00 	bl	80076e8 <USBD_LL_Resume>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80088f8:	4a28      	ldr	r2, [pc, #160]	@ (800899c <USBD_LL_Init+0xac>)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a26      	ldr	r2, [pc, #152]	@ (800899c <USBD_LL_Init+0xac>)
 8008904:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008908:	4b24      	ldr	r3, [pc, #144]	@ (800899c <USBD_LL_Init+0xac>)
 800890a:	4a25      	ldr	r2, [pc, #148]	@ (80089a0 <USBD_LL_Init+0xb0>)
 800890c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800890e:	4b23      	ldr	r3, [pc, #140]	@ (800899c <USBD_LL_Init+0xac>)
 8008910:	2208      	movs	r2, #8
 8008912:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008914:	4b21      	ldr	r3, [pc, #132]	@ (800899c <USBD_LL_Init+0xac>)
 8008916:	2202      	movs	r2, #2
 8008918:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800891a:	4b20      	ldr	r3, [pc, #128]	@ (800899c <USBD_LL_Init+0xac>)
 800891c:	2200      	movs	r2, #0
 800891e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008920:	4b1e      	ldr	r3, [pc, #120]	@ (800899c <USBD_LL_Init+0xac>)
 8008922:	2200      	movs	r2, #0
 8008924:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008926:	4b1d      	ldr	r3, [pc, #116]	@ (800899c <USBD_LL_Init+0xac>)
 8008928:	2200      	movs	r2, #0
 800892a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800892c:	481b      	ldr	r0, [pc, #108]	@ (800899c <USBD_LL_Init+0xac>)
 800892e:	f7f8 fe46 	bl	80015be <HAL_PCD_Init>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008938:	f7f8 f9f6 	bl	8000d28 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008942:	2318      	movs	r3, #24
 8008944:	2200      	movs	r2, #0
 8008946:	2100      	movs	r1, #0
 8008948:	f7fa fb57 	bl	8002ffa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008952:	2358      	movs	r3, #88	@ 0x58
 8008954:	2200      	movs	r2, #0
 8008956:	2180      	movs	r1, #128	@ 0x80
 8008958:	f7fa fb4f 	bl	8002ffa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008962:	23c0      	movs	r3, #192	@ 0xc0
 8008964:	2200      	movs	r2, #0
 8008966:	2181      	movs	r1, #129	@ 0x81
 8008968:	f7fa fb47 	bl	8002ffa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008972:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008976:	2200      	movs	r2, #0
 8008978:	2101      	movs	r1, #1
 800897a:	f7fa fb3e 	bl	8002ffa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008988:	2200      	movs	r2, #0
 800898a:	2182      	movs	r1, #130	@ 0x82
 800898c:	f7fa fb35 	bl	8002ffa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	20001044 	.word	0x20001044
 80089a0:	40005c00 	.word	0x40005c00

080089a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7f8 fef5 	bl	80017aa <HAL_PCD_Start>
 80089c0:	4603      	mov	r3, r0
 80089c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 f94e 	bl	8008c68 <USBD_Get_USB_Status>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b084      	sub	sp, #16
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	4608      	mov	r0, r1
 80089e4:	4611      	mov	r1, r2
 80089e6:	461a      	mov	r2, r3
 80089e8:	4603      	mov	r3, r0
 80089ea:	70fb      	strb	r3, [r7, #3]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70bb      	strb	r3, [r7, #2]
 80089f0:	4613      	mov	r3, r2
 80089f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008a02:	78bb      	ldrb	r3, [r7, #2]
 8008a04:	883a      	ldrh	r2, [r7, #0]
 8008a06:	78f9      	ldrb	r1, [r7, #3]
 8008a08:	f7f9 f849 	bl	8001a9e <HAL_PCD_EP_Open>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 f928 	bl	8008c68 <USBD_Get_USB_Status>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a40:	78fa      	ldrb	r2, [r7, #3]
 8008a42:	4611      	mov	r1, r2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7f9 f887 	bl	8001b58 <HAL_PCD_EP_Close>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 f909 	bl	8008c68 <USBD_Get_USB_Status>
 8008a56:	4603      	mov	r3, r0
 8008a58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	4611      	mov	r1, r2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7f9 f92f 	bl	8001ce6 <HAL_PCD_EP_SetStall>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f8ea 	bl	8008c68 <USBD_Get_USB_Status>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008abc:	78fa      	ldrb	r2, [r7, #3]
 8008abe:	4611      	mov	r1, r2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7f9 f970 	bl	8001da6 <HAL_PCD_EP_ClrStall>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 f8cb 	bl	8008c68 <USBD_Get_USB_Status>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008af2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008af4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	da0b      	bge.n	8008b14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	4613      	mov	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	00db      	lsls	r3, r3, #3
 8008b0c:	440b      	add	r3, r1
 8008b0e:	3312      	adds	r3, #18
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	e00b      	b.n	8008b2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b14:	78fb      	ldrb	r3, [r7, #3]
 8008b16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b1a:	68f9      	ldr	r1, [r7, #12]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	440b      	add	r3, r1
 8008b26:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008b2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bc80      	pop	{r7}
 8008b34:	4770      	bx	lr

08008b36 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b46:	2300      	movs	r3, #0
 8008b48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b50:	78fa      	ldrb	r2, [r7, #3]
 8008b52:	4611      	mov	r1, r2
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7f8 ff7e 	bl	8001a56 <HAL_PCD_SetAddress>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 f881 	bl	8008c68 <USBD_Get_USB_Status>
 8008b66:	4603      	mov	r3, r0
 8008b68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	607a      	str	r2, [r7, #4]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	460b      	mov	r3, r1
 8008b82:	72fb      	strb	r3, [r7, #11]
 8008b84:	4613      	mov	r3, r2
 8008b86:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b96:	893b      	ldrh	r3, [r7, #8]
 8008b98:	7af9      	ldrb	r1, [r7, #11]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	f7f9 f86c 	bl	8001c78 <HAL_PCD_EP_Transmit>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 f85e 	bl	8008c68 <USBD_Get_USB_Status>
 8008bac:	4603      	mov	r3, r0
 8008bae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bb0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b086      	sub	sp, #24
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	60f8      	str	r0, [r7, #12]
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	72fb      	strb	r3, [r7, #11]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008bdc:	893b      	ldrh	r3, [r7, #8]
 8008bde:	7af9      	ldrb	r1, [r7, #11]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	f7f9 f801 	bl	8001be8 <HAL_PCD_EP_Receive>
 8008be6:	4603      	mov	r3, r0
 8008be8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f83b 	bl	8008c68 <USBD_Get_USB_Status>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bf6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c12:	78fa      	ldrb	r2, [r7, #3]
 8008c14:	4611      	mov	r1, r2
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7f9 f817 	bl	8001c4a <HAL_PCD_EP_GetRxCount>
 8008c1c:	4603      	mov	r3, r0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
	...

08008c28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c30:	4b02      	ldr	r3, [pc, #8]	@ (8008c3c <USBD_static_malloc+0x14>)
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bc80      	pop	{r7}
 8008c3a:	4770      	bx	lr
 8008c3c:	2000131c 	.word	0x2000131c

08008c40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]

}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bc80      	pop	{r7}
 8008c50:	4770      	bx	lr

08008c52 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c52:	b480      	push	{r7}
 8008c54:	b083      	sub	sp, #12
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bc80      	pop	{r7}
 8008c66:	4770      	bx	lr

08008c68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c76:	79fb      	ldrb	r3, [r7, #7]
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d817      	bhi.n	8008cac <USBD_Get_USB_Status+0x44>
 8008c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c84 <USBD_Get_USB_Status+0x1c>)
 8008c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c82:	bf00      	nop
 8008c84:	08008c95 	.word	0x08008c95
 8008c88:	08008c9b 	.word	0x08008c9b
 8008c8c:	08008ca1 	.word	0x08008ca1
 8008c90:	08008ca7 	.word	0x08008ca7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	73fb      	strb	r3, [r7, #15]
    break;
 8008c98:	e00b      	b.n	8008cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c9e:	e008      	b.n	8008cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca4:	e005      	b.n	8008cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8008caa:	e002      	b.n	8008cb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008cac:	2302      	movs	r3, #2
 8008cae:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb0:	bf00      	nop
  }
  return usb_status;
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bc80      	pop	{r7}
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop

08008cc0 <sniprintf>:
 8008cc0:	b40c      	push	{r2, r3}
 8008cc2:	b530      	push	{r4, r5, lr}
 8008cc4:	4b18      	ldr	r3, [pc, #96]	@ (8008d28 <sniprintf+0x68>)
 8008cc6:	1e0c      	subs	r4, r1, #0
 8008cc8:	681d      	ldr	r5, [r3, #0]
 8008cca:	b09d      	sub	sp, #116	@ 0x74
 8008ccc:	da08      	bge.n	8008ce0 <sniprintf+0x20>
 8008cce:	238b      	movs	r3, #139	@ 0x8b
 8008cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd4:	602b      	str	r3, [r5, #0]
 8008cd6:	b01d      	add	sp, #116	@ 0x74
 8008cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cdc:	b002      	add	sp, #8
 8008cde:	4770      	bx	lr
 8008ce0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008ce4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008ce8:	f04f 0300 	mov.w	r3, #0
 8008cec:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008cee:	bf0c      	ite	eq
 8008cf0:	4623      	moveq	r3, r4
 8008cf2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008cf6:	9304      	str	r3, [sp, #16]
 8008cf8:	9307      	str	r3, [sp, #28]
 8008cfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008cfe:	9002      	str	r0, [sp, #8]
 8008d00:	9006      	str	r0, [sp, #24]
 8008d02:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d06:	4628      	mov	r0, r5
 8008d08:	ab21      	add	r3, sp, #132	@ 0x84
 8008d0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008d0c:	a902      	add	r1, sp, #8
 8008d0e:	9301      	str	r3, [sp, #4]
 8008d10:	f000 f9ce 	bl	80090b0 <_svfiprintf_r>
 8008d14:	1c43      	adds	r3, r0, #1
 8008d16:	bfbc      	itt	lt
 8008d18:	238b      	movlt	r3, #139	@ 0x8b
 8008d1a:	602b      	strlt	r3, [r5, #0]
 8008d1c:	2c00      	cmp	r4, #0
 8008d1e:	d0da      	beq.n	8008cd6 <sniprintf+0x16>
 8008d20:	2200      	movs	r2, #0
 8008d22:	9b02      	ldr	r3, [sp, #8]
 8008d24:	701a      	strb	r2, [r3, #0]
 8008d26:	e7d6      	b.n	8008cd6 <sniprintf+0x16>
 8008d28:	2000017c 	.word	0x2000017c

08008d2c <siscanf>:
 8008d2c:	b40e      	push	{r1, r2, r3}
 8008d2e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008d32:	b570      	push	{r4, r5, r6, lr}
 8008d34:	2500      	movs	r5, #0
 8008d36:	b09d      	sub	sp, #116	@ 0x74
 8008d38:	ac21      	add	r4, sp, #132	@ 0x84
 8008d3a:	f854 6b04 	ldr.w	r6, [r4], #4
 8008d3e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008d42:	951b      	str	r5, [sp, #108]	@ 0x6c
 8008d44:	9002      	str	r0, [sp, #8]
 8008d46:	9006      	str	r0, [sp, #24]
 8008d48:	f7f7 fa00 	bl	800014c <strlen>
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d7c <siscanf+0x50>)
 8008d4e:	9003      	str	r0, [sp, #12]
 8008d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008d56:	9007      	str	r0, [sp, #28]
 8008d58:	4809      	ldr	r0, [pc, #36]	@ (8008d80 <siscanf+0x54>)
 8008d5a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d5e:	4632      	mov	r2, r6
 8008d60:	4623      	mov	r3, r4
 8008d62:	a902      	add	r1, sp, #8
 8008d64:	6800      	ldr	r0, [r0, #0]
 8008d66:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008d68:	9514      	str	r5, [sp, #80]	@ 0x50
 8008d6a:	9401      	str	r4, [sp, #4]
 8008d6c:	f000 faf6 	bl	800935c <__ssvfiscanf_r>
 8008d70:	b01d      	add	sp, #116	@ 0x74
 8008d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008d76:	b003      	add	sp, #12
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	08008d85 	.word	0x08008d85
 8008d80:	2000017c 	.word	0x2000017c

08008d84 <__seofread>:
 8008d84:	2000      	movs	r0, #0
 8008d86:	4770      	bx	lr

08008d88 <memset>:
 8008d88:	4603      	mov	r3, r0
 8008d8a:	4402      	add	r2, r0
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d100      	bne.n	8008d92 <memset+0xa>
 8008d90:	4770      	bx	lr
 8008d92:	f803 1b01 	strb.w	r1, [r3], #1
 8008d96:	e7f9      	b.n	8008d8c <memset+0x4>

08008d98 <__errno>:
 8008d98:	4b01      	ldr	r3, [pc, #4]	@ (8008da0 <__errno+0x8>)
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	2000017c 	.word	0x2000017c

08008da4 <__libc_init_array>:
 8008da4:	b570      	push	{r4, r5, r6, lr}
 8008da6:	2600      	movs	r6, #0
 8008da8:	4d0c      	ldr	r5, [pc, #48]	@ (8008ddc <__libc_init_array+0x38>)
 8008daa:	4c0d      	ldr	r4, [pc, #52]	@ (8008de0 <__libc_init_array+0x3c>)
 8008dac:	1b64      	subs	r4, r4, r5
 8008dae:	10a4      	asrs	r4, r4, #2
 8008db0:	42a6      	cmp	r6, r4
 8008db2:	d109      	bne.n	8008dc8 <__libc_init_array+0x24>
 8008db4:	f001 f8ee 	bl	8009f94 <_init>
 8008db8:	2600      	movs	r6, #0
 8008dba:	4d0a      	ldr	r5, [pc, #40]	@ (8008de4 <__libc_init_array+0x40>)
 8008dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8008de8 <__libc_init_array+0x44>)
 8008dbe:	1b64      	subs	r4, r4, r5
 8008dc0:	10a4      	asrs	r4, r4, #2
 8008dc2:	42a6      	cmp	r6, r4
 8008dc4:	d105      	bne.n	8008dd2 <__libc_init_array+0x2e>
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}
 8008dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dcc:	4798      	blx	r3
 8008dce:	3601      	adds	r6, #1
 8008dd0:	e7ee      	b.n	8008db0 <__libc_init_array+0xc>
 8008dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd6:	4798      	blx	r3
 8008dd8:	3601      	adds	r6, #1
 8008dda:	e7f2      	b.n	8008dc2 <__libc_init_array+0x1e>
 8008ddc:	0800a18c 	.word	0x0800a18c
 8008de0:	0800a18c 	.word	0x0800a18c
 8008de4:	0800a18c 	.word	0x0800a18c
 8008de8:	0800a190 	.word	0x0800a190

08008dec <__retarget_lock_acquire_recursive>:
 8008dec:	4770      	bx	lr

08008dee <__retarget_lock_release_recursive>:
 8008dee:	4770      	bx	lr

08008df0 <memcpy>:
 8008df0:	440a      	add	r2, r1
 8008df2:	4291      	cmp	r1, r2
 8008df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008df8:	d100      	bne.n	8008dfc <memcpy+0xc>
 8008dfa:	4770      	bx	lr
 8008dfc:	b510      	push	{r4, lr}
 8008dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e02:	4291      	cmp	r1, r2
 8008e04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e08:	d1f9      	bne.n	8008dfe <memcpy+0xe>
 8008e0a:	bd10      	pop	{r4, pc}

08008e0c <_free_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4605      	mov	r5, r0
 8008e10:	2900      	cmp	r1, #0
 8008e12:	d040      	beq.n	8008e96 <_free_r+0x8a>
 8008e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e18:	1f0c      	subs	r4, r1, #4
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	bfb8      	it	lt
 8008e1e:	18e4      	addlt	r4, r4, r3
 8008e20:	f000 f8de 	bl	8008fe0 <__malloc_lock>
 8008e24:	4a1c      	ldr	r2, [pc, #112]	@ (8008e98 <_free_r+0x8c>)
 8008e26:	6813      	ldr	r3, [r2, #0]
 8008e28:	b933      	cbnz	r3, 8008e38 <_free_r+0x2c>
 8008e2a:	6063      	str	r3, [r4, #4]
 8008e2c:	6014      	str	r4, [r2, #0]
 8008e2e:	4628      	mov	r0, r5
 8008e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e34:	f000 b8da 	b.w	8008fec <__malloc_unlock>
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	d908      	bls.n	8008e4e <_free_r+0x42>
 8008e3c:	6820      	ldr	r0, [r4, #0]
 8008e3e:	1821      	adds	r1, r4, r0
 8008e40:	428b      	cmp	r3, r1
 8008e42:	bf01      	itttt	eq
 8008e44:	6819      	ldreq	r1, [r3, #0]
 8008e46:	685b      	ldreq	r3, [r3, #4]
 8008e48:	1809      	addeq	r1, r1, r0
 8008e4a:	6021      	streq	r1, [r4, #0]
 8008e4c:	e7ed      	b.n	8008e2a <_free_r+0x1e>
 8008e4e:	461a      	mov	r2, r3
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	b10b      	cbz	r3, 8008e58 <_free_r+0x4c>
 8008e54:	42a3      	cmp	r3, r4
 8008e56:	d9fa      	bls.n	8008e4e <_free_r+0x42>
 8008e58:	6811      	ldr	r1, [r2, #0]
 8008e5a:	1850      	adds	r0, r2, r1
 8008e5c:	42a0      	cmp	r0, r4
 8008e5e:	d10b      	bne.n	8008e78 <_free_r+0x6c>
 8008e60:	6820      	ldr	r0, [r4, #0]
 8008e62:	4401      	add	r1, r0
 8008e64:	1850      	adds	r0, r2, r1
 8008e66:	4283      	cmp	r3, r0
 8008e68:	6011      	str	r1, [r2, #0]
 8008e6a:	d1e0      	bne.n	8008e2e <_free_r+0x22>
 8008e6c:	6818      	ldr	r0, [r3, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	4408      	add	r0, r1
 8008e72:	6010      	str	r0, [r2, #0]
 8008e74:	6053      	str	r3, [r2, #4]
 8008e76:	e7da      	b.n	8008e2e <_free_r+0x22>
 8008e78:	d902      	bls.n	8008e80 <_free_r+0x74>
 8008e7a:	230c      	movs	r3, #12
 8008e7c:	602b      	str	r3, [r5, #0]
 8008e7e:	e7d6      	b.n	8008e2e <_free_r+0x22>
 8008e80:	6820      	ldr	r0, [r4, #0]
 8008e82:	1821      	adds	r1, r4, r0
 8008e84:	428b      	cmp	r3, r1
 8008e86:	bf01      	itttt	eq
 8008e88:	6819      	ldreq	r1, [r3, #0]
 8008e8a:	685b      	ldreq	r3, [r3, #4]
 8008e8c:	1809      	addeq	r1, r1, r0
 8008e8e:	6021      	streq	r1, [r4, #0]
 8008e90:	6063      	str	r3, [r4, #4]
 8008e92:	6054      	str	r4, [r2, #4]
 8008e94:	e7cb      	b.n	8008e2e <_free_r+0x22>
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	20001680 	.word	0x20001680

08008e9c <sbrk_aligned>:
 8008e9c:	b570      	push	{r4, r5, r6, lr}
 8008e9e:	4e0f      	ldr	r6, [pc, #60]	@ (8008edc <sbrk_aligned+0x40>)
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	6831      	ldr	r1, [r6, #0]
 8008ea4:	4605      	mov	r5, r0
 8008ea6:	b911      	cbnz	r1, 8008eae <sbrk_aligned+0x12>
 8008ea8:	f000 ff34 	bl	8009d14 <_sbrk_r>
 8008eac:	6030      	str	r0, [r6, #0]
 8008eae:	4621      	mov	r1, r4
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f000 ff2f 	bl	8009d14 <_sbrk_r>
 8008eb6:	1c43      	adds	r3, r0, #1
 8008eb8:	d103      	bne.n	8008ec2 <sbrk_aligned+0x26>
 8008eba:	f04f 34ff 	mov.w	r4, #4294967295
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	bd70      	pop	{r4, r5, r6, pc}
 8008ec2:	1cc4      	adds	r4, r0, #3
 8008ec4:	f024 0403 	bic.w	r4, r4, #3
 8008ec8:	42a0      	cmp	r0, r4
 8008eca:	d0f8      	beq.n	8008ebe <sbrk_aligned+0x22>
 8008ecc:	1a21      	subs	r1, r4, r0
 8008ece:	4628      	mov	r0, r5
 8008ed0:	f000 ff20 	bl	8009d14 <_sbrk_r>
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	d1f2      	bne.n	8008ebe <sbrk_aligned+0x22>
 8008ed8:	e7ef      	b.n	8008eba <sbrk_aligned+0x1e>
 8008eda:	bf00      	nop
 8008edc:	2000167c 	.word	0x2000167c

08008ee0 <_malloc_r>:
 8008ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee4:	1ccd      	adds	r5, r1, #3
 8008ee6:	f025 0503 	bic.w	r5, r5, #3
 8008eea:	3508      	adds	r5, #8
 8008eec:	2d0c      	cmp	r5, #12
 8008eee:	bf38      	it	cc
 8008ef0:	250c      	movcc	r5, #12
 8008ef2:	2d00      	cmp	r5, #0
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	db01      	blt.n	8008efc <_malloc_r+0x1c>
 8008ef8:	42a9      	cmp	r1, r5
 8008efa:	d904      	bls.n	8008f06 <_malloc_r+0x26>
 8008efc:	230c      	movs	r3, #12
 8008efe:	6033      	str	r3, [r6, #0]
 8008f00:	2000      	movs	r0, #0
 8008f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008fdc <_malloc_r+0xfc>
 8008f0a:	f000 f869 	bl	8008fe0 <__malloc_lock>
 8008f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f12:	461c      	mov	r4, r3
 8008f14:	bb44      	cbnz	r4, 8008f68 <_malloc_r+0x88>
 8008f16:	4629      	mov	r1, r5
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f7ff ffbf 	bl	8008e9c <sbrk_aligned>
 8008f1e:	1c43      	adds	r3, r0, #1
 8008f20:	4604      	mov	r4, r0
 8008f22:	d158      	bne.n	8008fd6 <_malloc_r+0xf6>
 8008f24:	f8d8 4000 	ldr.w	r4, [r8]
 8008f28:	4627      	mov	r7, r4
 8008f2a:	2f00      	cmp	r7, #0
 8008f2c:	d143      	bne.n	8008fb6 <_malloc_r+0xd6>
 8008f2e:	2c00      	cmp	r4, #0
 8008f30:	d04b      	beq.n	8008fca <_malloc_r+0xea>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	4639      	mov	r1, r7
 8008f36:	4630      	mov	r0, r6
 8008f38:	eb04 0903 	add.w	r9, r4, r3
 8008f3c:	f000 feea 	bl	8009d14 <_sbrk_r>
 8008f40:	4581      	cmp	r9, r0
 8008f42:	d142      	bne.n	8008fca <_malloc_r+0xea>
 8008f44:	6821      	ldr	r1, [r4, #0]
 8008f46:	4630      	mov	r0, r6
 8008f48:	1a6d      	subs	r5, r5, r1
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	f7ff ffa6 	bl	8008e9c <sbrk_aligned>
 8008f50:	3001      	adds	r0, #1
 8008f52:	d03a      	beq.n	8008fca <_malloc_r+0xea>
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	442b      	add	r3, r5
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f5e:	685a      	ldr	r2, [r3, #4]
 8008f60:	bb62      	cbnz	r2, 8008fbc <_malloc_r+0xdc>
 8008f62:	f8c8 7000 	str.w	r7, [r8]
 8008f66:	e00f      	b.n	8008f88 <_malloc_r+0xa8>
 8008f68:	6822      	ldr	r2, [r4, #0]
 8008f6a:	1b52      	subs	r2, r2, r5
 8008f6c:	d420      	bmi.n	8008fb0 <_malloc_r+0xd0>
 8008f6e:	2a0b      	cmp	r2, #11
 8008f70:	d917      	bls.n	8008fa2 <_malloc_r+0xc2>
 8008f72:	1961      	adds	r1, r4, r5
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	6025      	str	r5, [r4, #0]
 8008f78:	bf18      	it	ne
 8008f7a:	6059      	strne	r1, [r3, #4]
 8008f7c:	6863      	ldr	r3, [r4, #4]
 8008f7e:	bf08      	it	eq
 8008f80:	f8c8 1000 	streq.w	r1, [r8]
 8008f84:	5162      	str	r2, [r4, r5]
 8008f86:	604b      	str	r3, [r1, #4]
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f000 f82f 	bl	8008fec <__malloc_unlock>
 8008f8e:	f104 000b 	add.w	r0, r4, #11
 8008f92:	1d23      	adds	r3, r4, #4
 8008f94:	f020 0007 	bic.w	r0, r0, #7
 8008f98:	1ac2      	subs	r2, r0, r3
 8008f9a:	bf1c      	itt	ne
 8008f9c:	1a1b      	subne	r3, r3, r0
 8008f9e:	50a3      	strne	r3, [r4, r2]
 8008fa0:	e7af      	b.n	8008f02 <_malloc_r+0x22>
 8008fa2:	6862      	ldr	r2, [r4, #4]
 8008fa4:	42a3      	cmp	r3, r4
 8008fa6:	bf0c      	ite	eq
 8008fa8:	f8c8 2000 	streq.w	r2, [r8]
 8008fac:	605a      	strne	r2, [r3, #4]
 8008fae:	e7eb      	b.n	8008f88 <_malloc_r+0xa8>
 8008fb0:	4623      	mov	r3, r4
 8008fb2:	6864      	ldr	r4, [r4, #4]
 8008fb4:	e7ae      	b.n	8008f14 <_malloc_r+0x34>
 8008fb6:	463c      	mov	r4, r7
 8008fb8:	687f      	ldr	r7, [r7, #4]
 8008fba:	e7b6      	b.n	8008f2a <_malloc_r+0x4a>
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	d1fb      	bne.n	8008fbc <_malloc_r+0xdc>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	6053      	str	r3, [r2, #4]
 8008fc8:	e7de      	b.n	8008f88 <_malloc_r+0xa8>
 8008fca:	230c      	movs	r3, #12
 8008fcc:	4630      	mov	r0, r6
 8008fce:	6033      	str	r3, [r6, #0]
 8008fd0:	f000 f80c 	bl	8008fec <__malloc_unlock>
 8008fd4:	e794      	b.n	8008f00 <_malloc_r+0x20>
 8008fd6:	6005      	str	r5, [r0, #0]
 8008fd8:	e7d6      	b.n	8008f88 <_malloc_r+0xa8>
 8008fda:	bf00      	nop
 8008fdc:	20001680 	.word	0x20001680

08008fe0 <__malloc_lock>:
 8008fe0:	4801      	ldr	r0, [pc, #4]	@ (8008fe8 <__malloc_lock+0x8>)
 8008fe2:	f7ff bf03 	b.w	8008dec <__retarget_lock_acquire_recursive>
 8008fe6:	bf00      	nop
 8008fe8:	20001678 	.word	0x20001678

08008fec <__malloc_unlock>:
 8008fec:	4801      	ldr	r0, [pc, #4]	@ (8008ff4 <__malloc_unlock+0x8>)
 8008fee:	f7ff befe 	b.w	8008dee <__retarget_lock_release_recursive>
 8008ff2:	bf00      	nop
 8008ff4:	20001678 	.word	0x20001678

08008ff8 <__ssputs_r>:
 8008ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ffc:	461f      	mov	r7, r3
 8008ffe:	688e      	ldr	r6, [r1, #8]
 8009000:	4682      	mov	sl, r0
 8009002:	42be      	cmp	r6, r7
 8009004:	460c      	mov	r4, r1
 8009006:	4690      	mov	r8, r2
 8009008:	680b      	ldr	r3, [r1, #0]
 800900a:	d82d      	bhi.n	8009068 <__ssputs_r+0x70>
 800900c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009010:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009014:	d026      	beq.n	8009064 <__ssputs_r+0x6c>
 8009016:	6965      	ldr	r5, [r4, #20]
 8009018:	6909      	ldr	r1, [r1, #16]
 800901a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800901e:	eba3 0901 	sub.w	r9, r3, r1
 8009022:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009026:	1c7b      	adds	r3, r7, #1
 8009028:	444b      	add	r3, r9
 800902a:	106d      	asrs	r5, r5, #1
 800902c:	429d      	cmp	r5, r3
 800902e:	bf38      	it	cc
 8009030:	461d      	movcc	r5, r3
 8009032:	0553      	lsls	r3, r2, #21
 8009034:	d527      	bpl.n	8009086 <__ssputs_r+0x8e>
 8009036:	4629      	mov	r1, r5
 8009038:	f7ff ff52 	bl	8008ee0 <_malloc_r>
 800903c:	4606      	mov	r6, r0
 800903e:	b360      	cbz	r0, 800909a <__ssputs_r+0xa2>
 8009040:	464a      	mov	r2, r9
 8009042:	6921      	ldr	r1, [r4, #16]
 8009044:	f7ff fed4 	bl	8008df0 <memcpy>
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800904e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	6126      	str	r6, [r4, #16]
 8009056:	444e      	add	r6, r9
 8009058:	6026      	str	r6, [r4, #0]
 800905a:	463e      	mov	r6, r7
 800905c:	6165      	str	r5, [r4, #20]
 800905e:	eba5 0509 	sub.w	r5, r5, r9
 8009062:	60a5      	str	r5, [r4, #8]
 8009064:	42be      	cmp	r6, r7
 8009066:	d900      	bls.n	800906a <__ssputs_r+0x72>
 8009068:	463e      	mov	r6, r7
 800906a:	4632      	mov	r2, r6
 800906c:	4641      	mov	r1, r8
 800906e:	6820      	ldr	r0, [r4, #0]
 8009070:	f000 fe35 	bl	8009cde <memmove>
 8009074:	2000      	movs	r0, #0
 8009076:	68a3      	ldr	r3, [r4, #8]
 8009078:	1b9b      	subs	r3, r3, r6
 800907a:	60a3      	str	r3, [r4, #8]
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	4433      	add	r3, r6
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009086:	462a      	mov	r2, r5
 8009088:	f000 fe62 	bl	8009d50 <_realloc_r>
 800908c:	4606      	mov	r6, r0
 800908e:	2800      	cmp	r0, #0
 8009090:	d1e0      	bne.n	8009054 <__ssputs_r+0x5c>
 8009092:	4650      	mov	r0, sl
 8009094:	6921      	ldr	r1, [r4, #16]
 8009096:	f7ff feb9 	bl	8008e0c <_free_r>
 800909a:	230c      	movs	r3, #12
 800909c:	f8ca 3000 	str.w	r3, [sl]
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	f04f 30ff 	mov.w	r0, #4294967295
 80090a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090aa:	81a3      	strh	r3, [r4, #12]
 80090ac:	e7e9      	b.n	8009082 <__ssputs_r+0x8a>
	...

080090b0 <_svfiprintf_r>:
 80090b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b4:	4698      	mov	r8, r3
 80090b6:	898b      	ldrh	r3, [r1, #12]
 80090b8:	4607      	mov	r7, r0
 80090ba:	061b      	lsls	r3, r3, #24
 80090bc:	460d      	mov	r5, r1
 80090be:	4614      	mov	r4, r2
 80090c0:	b09d      	sub	sp, #116	@ 0x74
 80090c2:	d510      	bpl.n	80090e6 <_svfiprintf_r+0x36>
 80090c4:	690b      	ldr	r3, [r1, #16]
 80090c6:	b973      	cbnz	r3, 80090e6 <_svfiprintf_r+0x36>
 80090c8:	2140      	movs	r1, #64	@ 0x40
 80090ca:	f7ff ff09 	bl	8008ee0 <_malloc_r>
 80090ce:	6028      	str	r0, [r5, #0]
 80090d0:	6128      	str	r0, [r5, #16]
 80090d2:	b930      	cbnz	r0, 80090e2 <_svfiprintf_r+0x32>
 80090d4:	230c      	movs	r3, #12
 80090d6:	603b      	str	r3, [r7, #0]
 80090d8:	f04f 30ff 	mov.w	r0, #4294967295
 80090dc:	b01d      	add	sp, #116	@ 0x74
 80090de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e2:	2340      	movs	r3, #64	@ 0x40
 80090e4:	616b      	str	r3, [r5, #20]
 80090e6:	2300      	movs	r3, #0
 80090e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80090ea:	2320      	movs	r3, #32
 80090ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090f0:	2330      	movs	r3, #48	@ 0x30
 80090f2:	f04f 0901 	mov.w	r9, #1
 80090f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80090fa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009294 <_svfiprintf_r+0x1e4>
 80090fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009102:	4623      	mov	r3, r4
 8009104:	469a      	mov	sl, r3
 8009106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800910a:	b10a      	cbz	r2, 8009110 <_svfiprintf_r+0x60>
 800910c:	2a25      	cmp	r2, #37	@ 0x25
 800910e:	d1f9      	bne.n	8009104 <_svfiprintf_r+0x54>
 8009110:	ebba 0b04 	subs.w	fp, sl, r4
 8009114:	d00b      	beq.n	800912e <_svfiprintf_r+0x7e>
 8009116:	465b      	mov	r3, fp
 8009118:	4622      	mov	r2, r4
 800911a:	4629      	mov	r1, r5
 800911c:	4638      	mov	r0, r7
 800911e:	f7ff ff6b 	bl	8008ff8 <__ssputs_r>
 8009122:	3001      	adds	r0, #1
 8009124:	f000 80a7 	beq.w	8009276 <_svfiprintf_r+0x1c6>
 8009128:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800912a:	445a      	add	r2, fp
 800912c:	9209      	str	r2, [sp, #36]	@ 0x24
 800912e:	f89a 3000 	ldrb.w	r3, [sl]
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 809f 	beq.w	8009276 <_svfiprintf_r+0x1c6>
 8009138:	2300      	movs	r3, #0
 800913a:	f04f 32ff 	mov.w	r2, #4294967295
 800913e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009142:	f10a 0a01 	add.w	sl, sl, #1
 8009146:	9304      	str	r3, [sp, #16]
 8009148:	9307      	str	r3, [sp, #28]
 800914a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800914e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009150:	4654      	mov	r4, sl
 8009152:	2205      	movs	r2, #5
 8009154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009158:	484e      	ldr	r0, [pc, #312]	@ (8009294 <_svfiprintf_r+0x1e4>)
 800915a:	f000 fdeb 	bl	8009d34 <memchr>
 800915e:	9a04      	ldr	r2, [sp, #16]
 8009160:	b9d8      	cbnz	r0, 800919a <_svfiprintf_r+0xea>
 8009162:	06d0      	lsls	r0, r2, #27
 8009164:	bf44      	itt	mi
 8009166:	2320      	movmi	r3, #32
 8009168:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800916c:	0711      	lsls	r1, r2, #28
 800916e:	bf44      	itt	mi
 8009170:	232b      	movmi	r3, #43	@ 0x2b
 8009172:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009176:	f89a 3000 	ldrb.w	r3, [sl]
 800917a:	2b2a      	cmp	r3, #42	@ 0x2a
 800917c:	d015      	beq.n	80091aa <_svfiprintf_r+0xfa>
 800917e:	4654      	mov	r4, sl
 8009180:	2000      	movs	r0, #0
 8009182:	f04f 0c0a 	mov.w	ip, #10
 8009186:	9a07      	ldr	r2, [sp, #28]
 8009188:	4621      	mov	r1, r4
 800918a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800918e:	3b30      	subs	r3, #48	@ 0x30
 8009190:	2b09      	cmp	r3, #9
 8009192:	d94b      	bls.n	800922c <_svfiprintf_r+0x17c>
 8009194:	b1b0      	cbz	r0, 80091c4 <_svfiprintf_r+0x114>
 8009196:	9207      	str	r2, [sp, #28]
 8009198:	e014      	b.n	80091c4 <_svfiprintf_r+0x114>
 800919a:	eba0 0308 	sub.w	r3, r0, r8
 800919e:	fa09 f303 	lsl.w	r3, r9, r3
 80091a2:	4313      	orrs	r3, r2
 80091a4:	46a2      	mov	sl, r4
 80091a6:	9304      	str	r3, [sp, #16]
 80091a8:	e7d2      	b.n	8009150 <_svfiprintf_r+0xa0>
 80091aa:	9b03      	ldr	r3, [sp, #12]
 80091ac:	1d19      	adds	r1, r3, #4
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	9103      	str	r1, [sp, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	bfbb      	ittet	lt
 80091b6:	425b      	neglt	r3, r3
 80091b8:	f042 0202 	orrlt.w	r2, r2, #2
 80091bc:	9307      	strge	r3, [sp, #28]
 80091be:	9307      	strlt	r3, [sp, #28]
 80091c0:	bfb8      	it	lt
 80091c2:	9204      	strlt	r2, [sp, #16]
 80091c4:	7823      	ldrb	r3, [r4, #0]
 80091c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80091c8:	d10a      	bne.n	80091e0 <_svfiprintf_r+0x130>
 80091ca:	7863      	ldrb	r3, [r4, #1]
 80091cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80091ce:	d132      	bne.n	8009236 <_svfiprintf_r+0x186>
 80091d0:	9b03      	ldr	r3, [sp, #12]
 80091d2:	3402      	adds	r4, #2
 80091d4:	1d1a      	adds	r2, r3, #4
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	9203      	str	r2, [sp, #12]
 80091da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091de:	9305      	str	r3, [sp, #20]
 80091e0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009298 <_svfiprintf_r+0x1e8>
 80091e4:	2203      	movs	r2, #3
 80091e6:	4650      	mov	r0, sl
 80091e8:	7821      	ldrb	r1, [r4, #0]
 80091ea:	f000 fda3 	bl	8009d34 <memchr>
 80091ee:	b138      	cbz	r0, 8009200 <_svfiprintf_r+0x150>
 80091f0:	2240      	movs	r2, #64	@ 0x40
 80091f2:	9b04      	ldr	r3, [sp, #16]
 80091f4:	eba0 000a 	sub.w	r0, r0, sl
 80091f8:	4082      	lsls	r2, r0
 80091fa:	4313      	orrs	r3, r2
 80091fc:	3401      	adds	r4, #1
 80091fe:	9304      	str	r3, [sp, #16]
 8009200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009204:	2206      	movs	r2, #6
 8009206:	4825      	ldr	r0, [pc, #148]	@ (800929c <_svfiprintf_r+0x1ec>)
 8009208:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800920c:	f000 fd92 	bl	8009d34 <memchr>
 8009210:	2800      	cmp	r0, #0
 8009212:	d036      	beq.n	8009282 <_svfiprintf_r+0x1d2>
 8009214:	4b22      	ldr	r3, [pc, #136]	@ (80092a0 <_svfiprintf_r+0x1f0>)
 8009216:	bb1b      	cbnz	r3, 8009260 <_svfiprintf_r+0x1b0>
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	3307      	adds	r3, #7
 800921c:	f023 0307 	bic.w	r3, r3, #7
 8009220:	3308      	adds	r3, #8
 8009222:	9303      	str	r3, [sp, #12]
 8009224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009226:	4433      	add	r3, r6
 8009228:	9309      	str	r3, [sp, #36]	@ 0x24
 800922a:	e76a      	b.n	8009102 <_svfiprintf_r+0x52>
 800922c:	460c      	mov	r4, r1
 800922e:	2001      	movs	r0, #1
 8009230:	fb0c 3202 	mla	r2, ip, r2, r3
 8009234:	e7a8      	b.n	8009188 <_svfiprintf_r+0xd8>
 8009236:	2300      	movs	r3, #0
 8009238:	f04f 0c0a 	mov.w	ip, #10
 800923c:	4619      	mov	r1, r3
 800923e:	3401      	adds	r4, #1
 8009240:	9305      	str	r3, [sp, #20]
 8009242:	4620      	mov	r0, r4
 8009244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009248:	3a30      	subs	r2, #48	@ 0x30
 800924a:	2a09      	cmp	r2, #9
 800924c:	d903      	bls.n	8009256 <_svfiprintf_r+0x1a6>
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0c6      	beq.n	80091e0 <_svfiprintf_r+0x130>
 8009252:	9105      	str	r1, [sp, #20]
 8009254:	e7c4      	b.n	80091e0 <_svfiprintf_r+0x130>
 8009256:	4604      	mov	r4, r0
 8009258:	2301      	movs	r3, #1
 800925a:	fb0c 2101 	mla	r1, ip, r1, r2
 800925e:	e7f0      	b.n	8009242 <_svfiprintf_r+0x192>
 8009260:	ab03      	add	r3, sp, #12
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	462a      	mov	r2, r5
 8009266:	4638      	mov	r0, r7
 8009268:	4b0e      	ldr	r3, [pc, #56]	@ (80092a4 <_svfiprintf_r+0x1f4>)
 800926a:	a904      	add	r1, sp, #16
 800926c:	f3af 8000 	nop.w
 8009270:	1c42      	adds	r2, r0, #1
 8009272:	4606      	mov	r6, r0
 8009274:	d1d6      	bne.n	8009224 <_svfiprintf_r+0x174>
 8009276:	89ab      	ldrh	r3, [r5, #12]
 8009278:	065b      	lsls	r3, r3, #25
 800927a:	f53f af2d 	bmi.w	80090d8 <_svfiprintf_r+0x28>
 800927e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009280:	e72c      	b.n	80090dc <_svfiprintf_r+0x2c>
 8009282:	ab03      	add	r3, sp, #12
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	462a      	mov	r2, r5
 8009288:	4638      	mov	r0, r7
 800928a:	4b06      	ldr	r3, [pc, #24]	@ (80092a4 <_svfiprintf_r+0x1f4>)
 800928c:	a904      	add	r1, sp, #16
 800928e:	f000 fa4b 	bl	8009728 <_printf_i>
 8009292:	e7ed      	b.n	8009270 <_svfiprintf_r+0x1c0>
 8009294:	0800a032 	.word	0x0800a032
 8009298:	0800a038 	.word	0x0800a038
 800929c:	0800a03c 	.word	0x0800a03c
 80092a0:	00000000 	.word	0x00000000
 80092a4:	08008ff9 	.word	0x08008ff9

080092a8 <_sungetc_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	1c4b      	adds	r3, r1, #1
 80092ac:	4614      	mov	r4, r2
 80092ae:	d103      	bne.n	80092b8 <_sungetc_r+0x10>
 80092b0:	f04f 35ff 	mov.w	r5, #4294967295
 80092b4:	4628      	mov	r0, r5
 80092b6:	bd38      	pop	{r3, r4, r5, pc}
 80092b8:	8993      	ldrh	r3, [r2, #12]
 80092ba:	b2cd      	uxtb	r5, r1
 80092bc:	f023 0320 	bic.w	r3, r3, #32
 80092c0:	8193      	strh	r3, [r2, #12]
 80092c2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80092c4:	6852      	ldr	r2, [r2, #4]
 80092c6:	b18b      	cbz	r3, 80092ec <_sungetc_r+0x44>
 80092c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80092ca:	4293      	cmp	r3, r2
 80092cc:	dd08      	ble.n	80092e0 <_sungetc_r+0x38>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	1e5a      	subs	r2, r3, #1
 80092d2:	6022      	str	r2, [r4, #0]
 80092d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80092d8:	6863      	ldr	r3, [r4, #4]
 80092da:	3301      	adds	r3, #1
 80092dc:	6063      	str	r3, [r4, #4]
 80092de:	e7e9      	b.n	80092b4 <_sungetc_r+0xc>
 80092e0:	4621      	mov	r1, r4
 80092e2:	f000 fcc4 	bl	8009c6e <__submore>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d0f1      	beq.n	80092ce <_sungetc_r+0x26>
 80092ea:	e7e1      	b.n	80092b0 <_sungetc_r+0x8>
 80092ec:	6921      	ldr	r1, [r4, #16]
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	b151      	cbz	r1, 8009308 <_sungetc_r+0x60>
 80092f2:	4299      	cmp	r1, r3
 80092f4:	d208      	bcs.n	8009308 <_sungetc_r+0x60>
 80092f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80092fa:	42a9      	cmp	r1, r5
 80092fc:	d104      	bne.n	8009308 <_sungetc_r+0x60>
 80092fe:	3b01      	subs	r3, #1
 8009300:	3201      	adds	r2, #1
 8009302:	6023      	str	r3, [r4, #0]
 8009304:	6062      	str	r2, [r4, #4]
 8009306:	e7d5      	b.n	80092b4 <_sungetc_r+0xc>
 8009308:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800930c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009310:	6363      	str	r3, [r4, #52]	@ 0x34
 8009312:	2303      	movs	r3, #3
 8009314:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009316:	4623      	mov	r3, r4
 8009318:	f803 5f46 	strb.w	r5, [r3, #70]!
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	2301      	movs	r3, #1
 8009320:	e7dc      	b.n	80092dc <_sungetc_r+0x34>

08009322 <__ssrefill_r>:
 8009322:	b510      	push	{r4, lr}
 8009324:	460c      	mov	r4, r1
 8009326:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009328:	b169      	cbz	r1, 8009346 <__ssrefill_r+0x24>
 800932a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800932e:	4299      	cmp	r1, r3
 8009330:	d001      	beq.n	8009336 <__ssrefill_r+0x14>
 8009332:	f7ff fd6b 	bl	8008e0c <_free_r>
 8009336:	2000      	movs	r0, #0
 8009338:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800933a:	6360      	str	r0, [r4, #52]	@ 0x34
 800933c:	6063      	str	r3, [r4, #4]
 800933e:	b113      	cbz	r3, 8009346 <__ssrefill_r+0x24>
 8009340:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009342:	6023      	str	r3, [r4, #0]
 8009344:	bd10      	pop	{r4, pc}
 8009346:	6923      	ldr	r3, [r4, #16]
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	2300      	movs	r3, #0
 8009350:	6063      	str	r3, [r4, #4]
 8009352:	89a3      	ldrh	r3, [r4, #12]
 8009354:	f043 0320 	orr.w	r3, r3, #32
 8009358:	81a3      	strh	r3, [r4, #12]
 800935a:	e7f3      	b.n	8009344 <__ssrefill_r+0x22>

0800935c <__ssvfiscanf_r>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	460c      	mov	r4, r1
 8009362:	2100      	movs	r1, #0
 8009364:	4606      	mov	r6, r0
 8009366:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800936a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800936e:	49ab      	ldr	r1, [pc, #684]	@ (800961c <__ssvfiscanf_r+0x2c0>)
 8009370:	f10d 0804 	add.w	r8, sp, #4
 8009374:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009376:	49aa      	ldr	r1, [pc, #680]	@ (8009620 <__ssvfiscanf_r+0x2c4>)
 8009378:	4faa      	ldr	r7, [pc, #680]	@ (8009624 <__ssvfiscanf_r+0x2c8>)
 800937a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800937e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	f892 9000 	ldrb.w	r9, [r2]
 8009386:	f1b9 0f00 	cmp.w	r9, #0
 800938a:	f000 8159 	beq.w	8009640 <__ssvfiscanf_r+0x2e4>
 800938e:	f817 3009 	ldrb.w	r3, [r7, r9]
 8009392:	1c55      	adds	r5, r2, #1
 8009394:	f013 0308 	ands.w	r3, r3, #8
 8009398:	d019      	beq.n	80093ce <__ssvfiscanf_r+0x72>
 800939a:	6863      	ldr	r3, [r4, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	dd0f      	ble.n	80093c0 <__ssvfiscanf_r+0x64>
 80093a0:	6823      	ldr	r3, [r4, #0]
 80093a2:	781a      	ldrb	r2, [r3, #0]
 80093a4:	5cba      	ldrb	r2, [r7, r2]
 80093a6:	0712      	lsls	r2, r2, #28
 80093a8:	d401      	bmi.n	80093ae <__ssvfiscanf_r+0x52>
 80093aa:	462a      	mov	r2, r5
 80093ac:	e7e9      	b.n	8009382 <__ssvfiscanf_r+0x26>
 80093ae:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80093b0:	3301      	adds	r3, #1
 80093b2:	3201      	adds	r2, #1
 80093b4:	9245      	str	r2, [sp, #276]	@ 0x114
 80093b6:	6862      	ldr	r2, [r4, #4]
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	3a01      	subs	r2, #1
 80093bc:	6062      	str	r2, [r4, #4]
 80093be:	e7ec      	b.n	800939a <__ssvfiscanf_r+0x3e>
 80093c0:	4621      	mov	r1, r4
 80093c2:	4630      	mov	r0, r6
 80093c4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80093c6:	4798      	blx	r3
 80093c8:	2800      	cmp	r0, #0
 80093ca:	d0e9      	beq.n	80093a0 <__ssvfiscanf_r+0x44>
 80093cc:	e7ed      	b.n	80093aa <__ssvfiscanf_r+0x4e>
 80093ce:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80093d2:	f040 8086 	bne.w	80094e2 <__ssvfiscanf_r+0x186>
 80093d6:	9341      	str	r3, [sp, #260]	@ 0x104
 80093d8:	9343      	str	r3, [sp, #268]	@ 0x10c
 80093da:	7853      	ldrb	r3, [r2, #1]
 80093dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80093de:	bf04      	itt	eq
 80093e0:	2310      	moveq	r3, #16
 80093e2:	1c95      	addeq	r5, r2, #2
 80093e4:	f04f 020a 	mov.w	r2, #10
 80093e8:	bf08      	it	eq
 80093ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 80093ec:	46aa      	mov	sl, r5
 80093ee:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80093f2:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80093f6:	2b09      	cmp	r3, #9
 80093f8:	d91e      	bls.n	8009438 <__ssvfiscanf_r+0xdc>
 80093fa:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 8009628 <__ssvfiscanf_r+0x2cc>
 80093fe:	2203      	movs	r2, #3
 8009400:	4658      	mov	r0, fp
 8009402:	f000 fc97 	bl	8009d34 <memchr>
 8009406:	b138      	cbz	r0, 8009418 <__ssvfiscanf_r+0xbc>
 8009408:	2301      	movs	r3, #1
 800940a:	4655      	mov	r5, sl
 800940c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800940e:	eba0 000b 	sub.w	r0, r0, fp
 8009412:	4083      	lsls	r3, r0
 8009414:	4313      	orrs	r3, r2
 8009416:	9341      	str	r3, [sp, #260]	@ 0x104
 8009418:	f815 3b01 	ldrb.w	r3, [r5], #1
 800941c:	2b78      	cmp	r3, #120	@ 0x78
 800941e:	d806      	bhi.n	800942e <__ssvfiscanf_r+0xd2>
 8009420:	2b57      	cmp	r3, #87	@ 0x57
 8009422:	d810      	bhi.n	8009446 <__ssvfiscanf_r+0xea>
 8009424:	2b25      	cmp	r3, #37	@ 0x25
 8009426:	d05c      	beq.n	80094e2 <__ssvfiscanf_r+0x186>
 8009428:	d856      	bhi.n	80094d8 <__ssvfiscanf_r+0x17c>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d074      	beq.n	8009518 <__ssvfiscanf_r+0x1bc>
 800942e:	2303      	movs	r3, #3
 8009430:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009432:	230a      	movs	r3, #10
 8009434:	9342      	str	r3, [sp, #264]	@ 0x108
 8009436:	e087      	b.n	8009548 <__ssvfiscanf_r+0x1ec>
 8009438:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800943a:	4655      	mov	r5, sl
 800943c:	fb02 1103 	mla	r1, r2, r3, r1
 8009440:	3930      	subs	r1, #48	@ 0x30
 8009442:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009444:	e7d2      	b.n	80093ec <__ssvfiscanf_r+0x90>
 8009446:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800944a:	2a20      	cmp	r2, #32
 800944c:	d8ef      	bhi.n	800942e <__ssvfiscanf_r+0xd2>
 800944e:	a101      	add	r1, pc, #4	@ (adr r1, 8009454 <__ssvfiscanf_r+0xf8>)
 8009450:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009454:	08009527 	.word	0x08009527
 8009458:	0800942f 	.word	0x0800942f
 800945c:	0800942f 	.word	0x0800942f
 8009460:	08009581 	.word	0x08009581
 8009464:	0800942f 	.word	0x0800942f
 8009468:	0800942f 	.word	0x0800942f
 800946c:	0800942f 	.word	0x0800942f
 8009470:	0800942f 	.word	0x0800942f
 8009474:	0800942f 	.word	0x0800942f
 8009478:	0800942f 	.word	0x0800942f
 800947c:	0800942f 	.word	0x0800942f
 8009480:	08009597 	.word	0x08009597
 8009484:	0800957d 	.word	0x0800957d
 8009488:	080094df 	.word	0x080094df
 800948c:	080094df 	.word	0x080094df
 8009490:	080094df 	.word	0x080094df
 8009494:	0800942f 	.word	0x0800942f
 8009498:	08009539 	.word	0x08009539
 800949c:	0800942f 	.word	0x0800942f
 80094a0:	0800942f 	.word	0x0800942f
 80094a4:	0800942f 	.word	0x0800942f
 80094a8:	0800942f 	.word	0x0800942f
 80094ac:	080095a7 	.word	0x080095a7
 80094b0:	08009541 	.word	0x08009541
 80094b4:	0800951f 	.word	0x0800951f
 80094b8:	0800942f 	.word	0x0800942f
 80094bc:	0800942f 	.word	0x0800942f
 80094c0:	080095a3 	.word	0x080095a3
 80094c4:	0800942f 	.word	0x0800942f
 80094c8:	0800957d 	.word	0x0800957d
 80094cc:	0800942f 	.word	0x0800942f
 80094d0:	0800942f 	.word	0x0800942f
 80094d4:	08009527 	.word	0x08009527
 80094d8:	3b45      	subs	r3, #69	@ 0x45
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d8a7      	bhi.n	800942e <__ssvfiscanf_r+0xd2>
 80094de:	2305      	movs	r3, #5
 80094e0:	e031      	b.n	8009546 <__ssvfiscanf_r+0x1ea>
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	dd0d      	ble.n	8009504 <__ssvfiscanf_r+0x1a8>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	781a      	ldrb	r2, [r3, #0]
 80094ec:	454a      	cmp	r2, r9
 80094ee:	f040 80a7 	bne.w	8009640 <__ssvfiscanf_r+0x2e4>
 80094f2:	3301      	adds	r3, #1
 80094f4:	6862      	ldr	r2, [r4, #4]
 80094f6:	6023      	str	r3, [r4, #0]
 80094f8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80094fa:	3a01      	subs	r2, #1
 80094fc:	3301      	adds	r3, #1
 80094fe:	6062      	str	r2, [r4, #4]
 8009500:	9345      	str	r3, [sp, #276]	@ 0x114
 8009502:	e752      	b.n	80093aa <__ssvfiscanf_r+0x4e>
 8009504:	4621      	mov	r1, r4
 8009506:	4630      	mov	r0, r6
 8009508:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800950a:	4798      	blx	r3
 800950c:	2800      	cmp	r0, #0
 800950e:	d0eb      	beq.n	80094e8 <__ssvfiscanf_r+0x18c>
 8009510:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009512:	2800      	cmp	r0, #0
 8009514:	f040 808c 	bne.w	8009630 <__ssvfiscanf_r+0x2d4>
 8009518:	f04f 30ff 	mov.w	r0, #4294967295
 800951c:	e08c      	b.n	8009638 <__ssvfiscanf_r+0x2dc>
 800951e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009520:	f042 0220 	orr.w	r2, r2, #32
 8009524:	9241      	str	r2, [sp, #260]	@ 0x104
 8009526:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800952c:	9241      	str	r2, [sp, #260]	@ 0x104
 800952e:	2210      	movs	r2, #16
 8009530:	2b6e      	cmp	r3, #110	@ 0x6e
 8009532:	9242      	str	r2, [sp, #264]	@ 0x108
 8009534:	d902      	bls.n	800953c <__ssvfiscanf_r+0x1e0>
 8009536:	e005      	b.n	8009544 <__ssvfiscanf_r+0x1e8>
 8009538:	2300      	movs	r3, #0
 800953a:	9342      	str	r3, [sp, #264]	@ 0x108
 800953c:	2303      	movs	r3, #3
 800953e:	e002      	b.n	8009546 <__ssvfiscanf_r+0x1ea>
 8009540:	2308      	movs	r3, #8
 8009542:	9342      	str	r3, [sp, #264]	@ 0x108
 8009544:	2304      	movs	r3, #4
 8009546:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009548:	6863      	ldr	r3, [r4, #4]
 800954a:	2b00      	cmp	r3, #0
 800954c:	dd39      	ble.n	80095c2 <__ssvfiscanf_r+0x266>
 800954e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009550:	0659      	lsls	r1, r3, #25
 8009552:	d404      	bmi.n	800955e <__ssvfiscanf_r+0x202>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	781a      	ldrb	r2, [r3, #0]
 8009558:	5cba      	ldrb	r2, [r7, r2]
 800955a:	0712      	lsls	r2, r2, #28
 800955c:	d438      	bmi.n	80095d0 <__ssvfiscanf_r+0x274>
 800955e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009560:	2b02      	cmp	r3, #2
 8009562:	dc47      	bgt.n	80095f4 <__ssvfiscanf_r+0x298>
 8009564:	466b      	mov	r3, sp
 8009566:	4622      	mov	r2, r4
 8009568:	4630      	mov	r0, r6
 800956a:	a941      	add	r1, sp, #260	@ 0x104
 800956c:	f000 f9fa 	bl	8009964 <_scanf_chars>
 8009570:	2801      	cmp	r0, #1
 8009572:	d065      	beq.n	8009640 <__ssvfiscanf_r+0x2e4>
 8009574:	2802      	cmp	r0, #2
 8009576:	f47f af18 	bne.w	80093aa <__ssvfiscanf_r+0x4e>
 800957a:	e7c9      	b.n	8009510 <__ssvfiscanf_r+0x1b4>
 800957c:	220a      	movs	r2, #10
 800957e:	e7d7      	b.n	8009530 <__ssvfiscanf_r+0x1d4>
 8009580:	4629      	mov	r1, r5
 8009582:	4640      	mov	r0, r8
 8009584:	f000 fb3a 	bl	8009bfc <__sccl>
 8009588:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800958a:	4605      	mov	r5, r0
 800958c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009590:	9341      	str	r3, [sp, #260]	@ 0x104
 8009592:	2301      	movs	r3, #1
 8009594:	e7d7      	b.n	8009546 <__ssvfiscanf_r+0x1ea>
 8009596:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800959c:	9341      	str	r3, [sp, #260]	@ 0x104
 800959e:	2300      	movs	r3, #0
 80095a0:	e7d1      	b.n	8009546 <__ssvfiscanf_r+0x1ea>
 80095a2:	2302      	movs	r3, #2
 80095a4:	e7cf      	b.n	8009546 <__ssvfiscanf_r+0x1ea>
 80095a6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80095a8:	06c3      	lsls	r3, r0, #27
 80095aa:	f53f aefe 	bmi.w	80093aa <__ssvfiscanf_r+0x4e>
 80095ae:	9b00      	ldr	r3, [sp, #0]
 80095b0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80095b2:	1d19      	adds	r1, r3, #4
 80095b4:	9100      	str	r1, [sp, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	07c0      	lsls	r0, r0, #31
 80095ba:	bf4c      	ite	mi
 80095bc:	801a      	strhmi	r2, [r3, #0]
 80095be:	601a      	strpl	r2, [r3, #0]
 80095c0:	e6f3      	b.n	80093aa <__ssvfiscanf_r+0x4e>
 80095c2:	4621      	mov	r1, r4
 80095c4:	4630      	mov	r0, r6
 80095c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80095c8:	4798      	blx	r3
 80095ca:	2800      	cmp	r0, #0
 80095cc:	d0bf      	beq.n	800954e <__ssvfiscanf_r+0x1f2>
 80095ce:	e79f      	b.n	8009510 <__ssvfiscanf_r+0x1b4>
 80095d0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80095d2:	3201      	adds	r2, #1
 80095d4:	9245      	str	r2, [sp, #276]	@ 0x114
 80095d6:	6862      	ldr	r2, [r4, #4]
 80095d8:	3a01      	subs	r2, #1
 80095da:	2a00      	cmp	r2, #0
 80095dc:	6062      	str	r2, [r4, #4]
 80095de:	dd02      	ble.n	80095e6 <__ssvfiscanf_r+0x28a>
 80095e0:	3301      	adds	r3, #1
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	e7b6      	b.n	8009554 <__ssvfiscanf_r+0x1f8>
 80095e6:	4621      	mov	r1, r4
 80095e8:	4630      	mov	r0, r6
 80095ea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80095ec:	4798      	blx	r3
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d0b0      	beq.n	8009554 <__ssvfiscanf_r+0x1f8>
 80095f2:	e78d      	b.n	8009510 <__ssvfiscanf_r+0x1b4>
 80095f4:	2b04      	cmp	r3, #4
 80095f6:	dc06      	bgt.n	8009606 <__ssvfiscanf_r+0x2aa>
 80095f8:	466b      	mov	r3, sp
 80095fa:	4622      	mov	r2, r4
 80095fc:	4630      	mov	r0, r6
 80095fe:	a941      	add	r1, sp, #260	@ 0x104
 8009600:	f000 fa0a 	bl	8009a18 <_scanf_i>
 8009604:	e7b4      	b.n	8009570 <__ssvfiscanf_r+0x214>
 8009606:	4b09      	ldr	r3, [pc, #36]	@ (800962c <__ssvfiscanf_r+0x2d0>)
 8009608:	2b00      	cmp	r3, #0
 800960a:	f43f aece 	beq.w	80093aa <__ssvfiscanf_r+0x4e>
 800960e:	466b      	mov	r3, sp
 8009610:	4622      	mov	r2, r4
 8009612:	4630      	mov	r0, r6
 8009614:	a941      	add	r1, sp, #260	@ 0x104
 8009616:	f3af 8000 	nop.w
 800961a:	e7a9      	b.n	8009570 <__ssvfiscanf_r+0x214>
 800961c:	080092a9 	.word	0x080092a9
 8009620:	08009323 	.word	0x08009323
 8009624:	0800a081 	.word	0x0800a081
 8009628:	0800a038 	.word	0x0800a038
 800962c:	00000000 	.word	0x00000000
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	065b      	lsls	r3, r3, #25
 8009634:	f53f af70 	bmi.w	8009518 <__ssvfiscanf_r+0x1bc>
 8009638:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800963c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009640:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009642:	e7f9      	b.n	8009638 <__ssvfiscanf_r+0x2dc>

08009644 <_printf_common>:
 8009644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009648:	4616      	mov	r6, r2
 800964a:	4698      	mov	r8, r3
 800964c:	688a      	ldr	r2, [r1, #8]
 800964e:	690b      	ldr	r3, [r1, #16]
 8009650:	4607      	mov	r7, r0
 8009652:	4293      	cmp	r3, r2
 8009654:	bfb8      	it	lt
 8009656:	4613      	movlt	r3, r2
 8009658:	6033      	str	r3, [r6, #0]
 800965a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800965e:	460c      	mov	r4, r1
 8009660:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009664:	b10a      	cbz	r2, 800966a <_printf_common+0x26>
 8009666:	3301      	adds	r3, #1
 8009668:	6033      	str	r3, [r6, #0]
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	0699      	lsls	r1, r3, #26
 800966e:	bf42      	ittt	mi
 8009670:	6833      	ldrmi	r3, [r6, #0]
 8009672:	3302      	addmi	r3, #2
 8009674:	6033      	strmi	r3, [r6, #0]
 8009676:	6825      	ldr	r5, [r4, #0]
 8009678:	f015 0506 	ands.w	r5, r5, #6
 800967c:	d106      	bne.n	800968c <_printf_common+0x48>
 800967e:	f104 0a19 	add.w	sl, r4, #25
 8009682:	68e3      	ldr	r3, [r4, #12]
 8009684:	6832      	ldr	r2, [r6, #0]
 8009686:	1a9b      	subs	r3, r3, r2
 8009688:	42ab      	cmp	r3, r5
 800968a:	dc2b      	bgt.n	80096e4 <_printf_common+0xa0>
 800968c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009690:	6822      	ldr	r2, [r4, #0]
 8009692:	3b00      	subs	r3, #0
 8009694:	bf18      	it	ne
 8009696:	2301      	movne	r3, #1
 8009698:	0692      	lsls	r2, r2, #26
 800969a:	d430      	bmi.n	80096fe <_printf_common+0xba>
 800969c:	4641      	mov	r1, r8
 800969e:	4638      	mov	r0, r7
 80096a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80096a4:	47c8      	blx	r9
 80096a6:	3001      	adds	r0, #1
 80096a8:	d023      	beq.n	80096f2 <_printf_common+0xae>
 80096aa:	6823      	ldr	r3, [r4, #0]
 80096ac:	6922      	ldr	r2, [r4, #16]
 80096ae:	f003 0306 	and.w	r3, r3, #6
 80096b2:	2b04      	cmp	r3, #4
 80096b4:	bf14      	ite	ne
 80096b6:	2500      	movne	r5, #0
 80096b8:	6833      	ldreq	r3, [r6, #0]
 80096ba:	f04f 0600 	mov.w	r6, #0
 80096be:	bf08      	it	eq
 80096c0:	68e5      	ldreq	r5, [r4, #12]
 80096c2:	f104 041a 	add.w	r4, r4, #26
 80096c6:	bf08      	it	eq
 80096c8:	1aed      	subeq	r5, r5, r3
 80096ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80096ce:	bf08      	it	eq
 80096d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096d4:	4293      	cmp	r3, r2
 80096d6:	bfc4      	itt	gt
 80096d8:	1a9b      	subgt	r3, r3, r2
 80096da:	18ed      	addgt	r5, r5, r3
 80096dc:	42b5      	cmp	r5, r6
 80096de:	d11a      	bne.n	8009716 <_printf_common+0xd2>
 80096e0:	2000      	movs	r0, #0
 80096e2:	e008      	b.n	80096f6 <_printf_common+0xb2>
 80096e4:	2301      	movs	r3, #1
 80096e6:	4652      	mov	r2, sl
 80096e8:	4641      	mov	r1, r8
 80096ea:	4638      	mov	r0, r7
 80096ec:	47c8      	blx	r9
 80096ee:	3001      	adds	r0, #1
 80096f0:	d103      	bne.n	80096fa <_printf_common+0xb6>
 80096f2:	f04f 30ff 	mov.w	r0, #4294967295
 80096f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096fa:	3501      	adds	r5, #1
 80096fc:	e7c1      	b.n	8009682 <_printf_common+0x3e>
 80096fe:	2030      	movs	r0, #48	@ 0x30
 8009700:	18e1      	adds	r1, r4, r3
 8009702:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800970c:	4422      	add	r2, r4
 800970e:	3302      	adds	r3, #2
 8009710:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009714:	e7c2      	b.n	800969c <_printf_common+0x58>
 8009716:	2301      	movs	r3, #1
 8009718:	4622      	mov	r2, r4
 800971a:	4641      	mov	r1, r8
 800971c:	4638      	mov	r0, r7
 800971e:	47c8      	blx	r9
 8009720:	3001      	adds	r0, #1
 8009722:	d0e6      	beq.n	80096f2 <_printf_common+0xae>
 8009724:	3601      	adds	r6, #1
 8009726:	e7d9      	b.n	80096dc <_printf_common+0x98>

08009728 <_printf_i>:
 8009728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800972c:	7e0f      	ldrb	r7, [r1, #24]
 800972e:	4691      	mov	r9, r2
 8009730:	2f78      	cmp	r7, #120	@ 0x78
 8009732:	4680      	mov	r8, r0
 8009734:	460c      	mov	r4, r1
 8009736:	469a      	mov	sl, r3
 8009738:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800973a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800973e:	d807      	bhi.n	8009750 <_printf_i+0x28>
 8009740:	2f62      	cmp	r7, #98	@ 0x62
 8009742:	d80a      	bhi.n	800975a <_printf_i+0x32>
 8009744:	2f00      	cmp	r7, #0
 8009746:	f000 80d1 	beq.w	80098ec <_printf_i+0x1c4>
 800974a:	2f58      	cmp	r7, #88	@ 0x58
 800974c:	f000 80b8 	beq.w	80098c0 <_printf_i+0x198>
 8009750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009754:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009758:	e03a      	b.n	80097d0 <_printf_i+0xa8>
 800975a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800975e:	2b15      	cmp	r3, #21
 8009760:	d8f6      	bhi.n	8009750 <_printf_i+0x28>
 8009762:	a101      	add	r1, pc, #4	@ (adr r1, 8009768 <_printf_i+0x40>)
 8009764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009768:	080097c1 	.word	0x080097c1
 800976c:	080097d5 	.word	0x080097d5
 8009770:	08009751 	.word	0x08009751
 8009774:	08009751 	.word	0x08009751
 8009778:	08009751 	.word	0x08009751
 800977c:	08009751 	.word	0x08009751
 8009780:	080097d5 	.word	0x080097d5
 8009784:	08009751 	.word	0x08009751
 8009788:	08009751 	.word	0x08009751
 800978c:	08009751 	.word	0x08009751
 8009790:	08009751 	.word	0x08009751
 8009794:	080098d3 	.word	0x080098d3
 8009798:	080097ff 	.word	0x080097ff
 800979c:	0800988d 	.word	0x0800988d
 80097a0:	08009751 	.word	0x08009751
 80097a4:	08009751 	.word	0x08009751
 80097a8:	080098f5 	.word	0x080098f5
 80097ac:	08009751 	.word	0x08009751
 80097b0:	080097ff 	.word	0x080097ff
 80097b4:	08009751 	.word	0x08009751
 80097b8:	08009751 	.word	0x08009751
 80097bc:	08009895 	.word	0x08009895
 80097c0:	6833      	ldr	r3, [r6, #0]
 80097c2:	1d1a      	adds	r2, r3, #4
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	6032      	str	r2, [r6, #0]
 80097c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80097cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80097d0:	2301      	movs	r3, #1
 80097d2:	e09c      	b.n	800990e <_printf_i+0x1e6>
 80097d4:	6833      	ldr	r3, [r6, #0]
 80097d6:	6820      	ldr	r0, [r4, #0]
 80097d8:	1d19      	adds	r1, r3, #4
 80097da:	6031      	str	r1, [r6, #0]
 80097dc:	0606      	lsls	r6, r0, #24
 80097de:	d501      	bpl.n	80097e4 <_printf_i+0xbc>
 80097e0:	681d      	ldr	r5, [r3, #0]
 80097e2:	e003      	b.n	80097ec <_printf_i+0xc4>
 80097e4:	0645      	lsls	r5, r0, #25
 80097e6:	d5fb      	bpl.n	80097e0 <_printf_i+0xb8>
 80097e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80097ec:	2d00      	cmp	r5, #0
 80097ee:	da03      	bge.n	80097f8 <_printf_i+0xd0>
 80097f0:	232d      	movs	r3, #45	@ 0x2d
 80097f2:	426d      	negs	r5, r5
 80097f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097f8:	230a      	movs	r3, #10
 80097fa:	4858      	ldr	r0, [pc, #352]	@ (800995c <_printf_i+0x234>)
 80097fc:	e011      	b.n	8009822 <_printf_i+0xfa>
 80097fe:	6821      	ldr	r1, [r4, #0]
 8009800:	6833      	ldr	r3, [r6, #0]
 8009802:	0608      	lsls	r0, r1, #24
 8009804:	f853 5b04 	ldr.w	r5, [r3], #4
 8009808:	d402      	bmi.n	8009810 <_printf_i+0xe8>
 800980a:	0649      	lsls	r1, r1, #25
 800980c:	bf48      	it	mi
 800980e:	b2ad      	uxthmi	r5, r5
 8009810:	2f6f      	cmp	r7, #111	@ 0x6f
 8009812:	6033      	str	r3, [r6, #0]
 8009814:	bf14      	ite	ne
 8009816:	230a      	movne	r3, #10
 8009818:	2308      	moveq	r3, #8
 800981a:	4850      	ldr	r0, [pc, #320]	@ (800995c <_printf_i+0x234>)
 800981c:	2100      	movs	r1, #0
 800981e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009822:	6866      	ldr	r6, [r4, #4]
 8009824:	2e00      	cmp	r6, #0
 8009826:	60a6      	str	r6, [r4, #8]
 8009828:	db05      	blt.n	8009836 <_printf_i+0x10e>
 800982a:	6821      	ldr	r1, [r4, #0]
 800982c:	432e      	orrs	r6, r5
 800982e:	f021 0104 	bic.w	r1, r1, #4
 8009832:	6021      	str	r1, [r4, #0]
 8009834:	d04b      	beq.n	80098ce <_printf_i+0x1a6>
 8009836:	4616      	mov	r6, r2
 8009838:	fbb5 f1f3 	udiv	r1, r5, r3
 800983c:	fb03 5711 	mls	r7, r3, r1, r5
 8009840:	5dc7      	ldrb	r7, [r0, r7]
 8009842:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009846:	462f      	mov	r7, r5
 8009848:	42bb      	cmp	r3, r7
 800984a:	460d      	mov	r5, r1
 800984c:	d9f4      	bls.n	8009838 <_printf_i+0x110>
 800984e:	2b08      	cmp	r3, #8
 8009850:	d10b      	bne.n	800986a <_printf_i+0x142>
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	07df      	lsls	r7, r3, #31
 8009856:	d508      	bpl.n	800986a <_printf_i+0x142>
 8009858:	6923      	ldr	r3, [r4, #16]
 800985a:	6861      	ldr	r1, [r4, #4]
 800985c:	4299      	cmp	r1, r3
 800985e:	bfde      	ittt	le
 8009860:	2330      	movle	r3, #48	@ 0x30
 8009862:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009866:	f106 36ff 	addle.w	r6, r6, #4294967295
 800986a:	1b92      	subs	r2, r2, r6
 800986c:	6122      	str	r2, [r4, #16]
 800986e:	464b      	mov	r3, r9
 8009870:	4621      	mov	r1, r4
 8009872:	4640      	mov	r0, r8
 8009874:	f8cd a000 	str.w	sl, [sp]
 8009878:	aa03      	add	r2, sp, #12
 800987a:	f7ff fee3 	bl	8009644 <_printf_common>
 800987e:	3001      	adds	r0, #1
 8009880:	d14a      	bne.n	8009918 <_printf_i+0x1f0>
 8009882:	f04f 30ff 	mov.w	r0, #4294967295
 8009886:	b004      	add	sp, #16
 8009888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	f043 0320 	orr.w	r3, r3, #32
 8009892:	6023      	str	r3, [r4, #0]
 8009894:	2778      	movs	r7, #120	@ 0x78
 8009896:	4832      	ldr	r0, [pc, #200]	@ (8009960 <_printf_i+0x238>)
 8009898:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	6831      	ldr	r1, [r6, #0]
 80098a0:	061f      	lsls	r7, r3, #24
 80098a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80098a6:	d402      	bmi.n	80098ae <_printf_i+0x186>
 80098a8:	065f      	lsls	r7, r3, #25
 80098aa:	bf48      	it	mi
 80098ac:	b2ad      	uxthmi	r5, r5
 80098ae:	6031      	str	r1, [r6, #0]
 80098b0:	07d9      	lsls	r1, r3, #31
 80098b2:	bf44      	itt	mi
 80098b4:	f043 0320 	orrmi.w	r3, r3, #32
 80098b8:	6023      	strmi	r3, [r4, #0]
 80098ba:	b11d      	cbz	r5, 80098c4 <_printf_i+0x19c>
 80098bc:	2310      	movs	r3, #16
 80098be:	e7ad      	b.n	800981c <_printf_i+0xf4>
 80098c0:	4826      	ldr	r0, [pc, #152]	@ (800995c <_printf_i+0x234>)
 80098c2:	e7e9      	b.n	8009898 <_printf_i+0x170>
 80098c4:	6823      	ldr	r3, [r4, #0]
 80098c6:	f023 0320 	bic.w	r3, r3, #32
 80098ca:	6023      	str	r3, [r4, #0]
 80098cc:	e7f6      	b.n	80098bc <_printf_i+0x194>
 80098ce:	4616      	mov	r6, r2
 80098d0:	e7bd      	b.n	800984e <_printf_i+0x126>
 80098d2:	6833      	ldr	r3, [r6, #0]
 80098d4:	6825      	ldr	r5, [r4, #0]
 80098d6:	1d18      	adds	r0, r3, #4
 80098d8:	6961      	ldr	r1, [r4, #20]
 80098da:	6030      	str	r0, [r6, #0]
 80098dc:	062e      	lsls	r6, r5, #24
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	d501      	bpl.n	80098e6 <_printf_i+0x1be>
 80098e2:	6019      	str	r1, [r3, #0]
 80098e4:	e002      	b.n	80098ec <_printf_i+0x1c4>
 80098e6:	0668      	lsls	r0, r5, #25
 80098e8:	d5fb      	bpl.n	80098e2 <_printf_i+0x1ba>
 80098ea:	8019      	strh	r1, [r3, #0]
 80098ec:	2300      	movs	r3, #0
 80098ee:	4616      	mov	r6, r2
 80098f0:	6123      	str	r3, [r4, #16]
 80098f2:	e7bc      	b.n	800986e <_printf_i+0x146>
 80098f4:	6833      	ldr	r3, [r6, #0]
 80098f6:	2100      	movs	r1, #0
 80098f8:	1d1a      	adds	r2, r3, #4
 80098fa:	6032      	str	r2, [r6, #0]
 80098fc:	681e      	ldr	r6, [r3, #0]
 80098fe:	6862      	ldr	r2, [r4, #4]
 8009900:	4630      	mov	r0, r6
 8009902:	f000 fa17 	bl	8009d34 <memchr>
 8009906:	b108      	cbz	r0, 800990c <_printf_i+0x1e4>
 8009908:	1b80      	subs	r0, r0, r6
 800990a:	6060      	str	r0, [r4, #4]
 800990c:	6863      	ldr	r3, [r4, #4]
 800990e:	6123      	str	r3, [r4, #16]
 8009910:	2300      	movs	r3, #0
 8009912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009916:	e7aa      	b.n	800986e <_printf_i+0x146>
 8009918:	4632      	mov	r2, r6
 800991a:	4649      	mov	r1, r9
 800991c:	4640      	mov	r0, r8
 800991e:	6923      	ldr	r3, [r4, #16]
 8009920:	47d0      	blx	sl
 8009922:	3001      	adds	r0, #1
 8009924:	d0ad      	beq.n	8009882 <_printf_i+0x15a>
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	079b      	lsls	r3, r3, #30
 800992a:	d413      	bmi.n	8009954 <_printf_i+0x22c>
 800992c:	68e0      	ldr	r0, [r4, #12]
 800992e:	9b03      	ldr	r3, [sp, #12]
 8009930:	4298      	cmp	r0, r3
 8009932:	bfb8      	it	lt
 8009934:	4618      	movlt	r0, r3
 8009936:	e7a6      	b.n	8009886 <_printf_i+0x15e>
 8009938:	2301      	movs	r3, #1
 800993a:	4632      	mov	r2, r6
 800993c:	4649      	mov	r1, r9
 800993e:	4640      	mov	r0, r8
 8009940:	47d0      	blx	sl
 8009942:	3001      	adds	r0, #1
 8009944:	d09d      	beq.n	8009882 <_printf_i+0x15a>
 8009946:	3501      	adds	r5, #1
 8009948:	68e3      	ldr	r3, [r4, #12]
 800994a:	9903      	ldr	r1, [sp, #12]
 800994c:	1a5b      	subs	r3, r3, r1
 800994e:	42ab      	cmp	r3, r5
 8009950:	dcf2      	bgt.n	8009938 <_printf_i+0x210>
 8009952:	e7eb      	b.n	800992c <_printf_i+0x204>
 8009954:	2500      	movs	r5, #0
 8009956:	f104 0619 	add.w	r6, r4, #25
 800995a:	e7f5      	b.n	8009948 <_printf_i+0x220>
 800995c:	0800a043 	.word	0x0800a043
 8009960:	0800a054 	.word	0x0800a054

08009964 <_scanf_chars>:
 8009964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009968:	4615      	mov	r5, r2
 800996a:	688a      	ldr	r2, [r1, #8]
 800996c:	4680      	mov	r8, r0
 800996e:	460c      	mov	r4, r1
 8009970:	b932      	cbnz	r2, 8009980 <_scanf_chars+0x1c>
 8009972:	698a      	ldr	r2, [r1, #24]
 8009974:	2a00      	cmp	r2, #0
 8009976:	bf14      	ite	ne
 8009978:	f04f 32ff 	movne.w	r2, #4294967295
 800997c:	2201      	moveq	r2, #1
 800997e:	608a      	str	r2, [r1, #8]
 8009980:	2700      	movs	r7, #0
 8009982:	6822      	ldr	r2, [r4, #0]
 8009984:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8009a14 <_scanf_chars+0xb0>
 8009988:	06d1      	lsls	r1, r2, #27
 800998a:	bf5f      	itttt	pl
 800998c:	681a      	ldrpl	r2, [r3, #0]
 800998e:	1d11      	addpl	r1, r2, #4
 8009990:	6019      	strpl	r1, [r3, #0]
 8009992:	6816      	ldrpl	r6, [r2, #0]
 8009994:	69a0      	ldr	r0, [r4, #24]
 8009996:	b188      	cbz	r0, 80099bc <_scanf_chars+0x58>
 8009998:	2801      	cmp	r0, #1
 800999a:	d107      	bne.n	80099ac <_scanf_chars+0x48>
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	781a      	ldrb	r2, [r3, #0]
 80099a0:	6963      	ldr	r3, [r4, #20]
 80099a2:	5c9b      	ldrb	r3, [r3, r2]
 80099a4:	b953      	cbnz	r3, 80099bc <_scanf_chars+0x58>
 80099a6:	2f00      	cmp	r7, #0
 80099a8:	d031      	beq.n	8009a0e <_scanf_chars+0xaa>
 80099aa:	e022      	b.n	80099f2 <_scanf_chars+0x8e>
 80099ac:	2802      	cmp	r0, #2
 80099ae:	d120      	bne.n	80099f2 <_scanf_chars+0x8e>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80099b8:	071b      	lsls	r3, r3, #28
 80099ba:	d41a      	bmi.n	80099f2 <_scanf_chars+0x8e>
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	3701      	adds	r7, #1
 80099c0:	06da      	lsls	r2, r3, #27
 80099c2:	bf5e      	ittt	pl
 80099c4:	682b      	ldrpl	r3, [r5, #0]
 80099c6:	781b      	ldrbpl	r3, [r3, #0]
 80099c8:	f806 3b01 	strbpl.w	r3, [r6], #1
 80099cc:	682a      	ldr	r2, [r5, #0]
 80099ce:	686b      	ldr	r3, [r5, #4]
 80099d0:	3201      	adds	r2, #1
 80099d2:	602a      	str	r2, [r5, #0]
 80099d4:	68a2      	ldr	r2, [r4, #8]
 80099d6:	3b01      	subs	r3, #1
 80099d8:	3a01      	subs	r2, #1
 80099da:	606b      	str	r3, [r5, #4]
 80099dc:	60a2      	str	r2, [r4, #8]
 80099de:	b142      	cbz	r2, 80099f2 <_scanf_chars+0x8e>
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	dcd7      	bgt.n	8009994 <_scanf_chars+0x30>
 80099e4:	4629      	mov	r1, r5
 80099e6:	4640      	mov	r0, r8
 80099e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80099ec:	4798      	blx	r3
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d0d0      	beq.n	8009994 <_scanf_chars+0x30>
 80099f2:	6823      	ldr	r3, [r4, #0]
 80099f4:	f013 0310 	ands.w	r3, r3, #16
 80099f8:	d105      	bne.n	8009a06 <_scanf_chars+0xa2>
 80099fa:	68e2      	ldr	r2, [r4, #12]
 80099fc:	3201      	adds	r2, #1
 80099fe:	60e2      	str	r2, [r4, #12]
 8009a00:	69a2      	ldr	r2, [r4, #24]
 8009a02:	b102      	cbz	r2, 8009a06 <_scanf_chars+0xa2>
 8009a04:	7033      	strb	r3, [r6, #0]
 8009a06:	2000      	movs	r0, #0
 8009a08:	6923      	ldr	r3, [r4, #16]
 8009a0a:	443b      	add	r3, r7
 8009a0c:	6123      	str	r3, [r4, #16]
 8009a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a12:	bf00      	nop
 8009a14:	0800a081 	.word	0x0800a081

08009a18 <_scanf_i>:
 8009a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	4698      	mov	r8, r3
 8009a20:	4b72      	ldr	r3, [pc, #456]	@ (8009bec <_scanf_i+0x1d4>)
 8009a22:	b087      	sub	sp, #28
 8009a24:	4682      	mov	sl, r0
 8009a26:	4616      	mov	r6, r2
 8009a28:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a2c:	ab03      	add	r3, sp, #12
 8009a2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009a32:	4b6f      	ldr	r3, [pc, #444]	@ (8009bf0 <_scanf_i+0x1d8>)
 8009a34:	69a1      	ldr	r1, [r4, #24]
 8009a36:	4a6f      	ldr	r2, [pc, #444]	@ (8009bf4 <_scanf_i+0x1dc>)
 8009a38:	4627      	mov	r7, r4
 8009a3a:	2903      	cmp	r1, #3
 8009a3c:	bf08      	it	eq
 8009a3e:	461a      	moveq	r2, r3
 8009a40:	68a3      	ldr	r3, [r4, #8]
 8009a42:	9201      	str	r2, [sp, #4]
 8009a44:	1e5a      	subs	r2, r3, #1
 8009a46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009a4a:	bf81      	itttt	hi
 8009a4c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009a50:	eb03 0905 	addhi.w	r9, r3, r5
 8009a54:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009a58:	60a3      	strhi	r3, [r4, #8]
 8009a5a:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009a5e:	bf98      	it	ls
 8009a60:	f04f 0900 	movls.w	r9, #0
 8009a64:	463d      	mov	r5, r7
 8009a66:	f04f 0b00 	mov.w	fp, #0
 8009a6a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009a6e:	6023      	str	r3, [r4, #0]
 8009a70:	6831      	ldr	r1, [r6, #0]
 8009a72:	ab03      	add	r3, sp, #12
 8009a74:	2202      	movs	r2, #2
 8009a76:	7809      	ldrb	r1, [r1, #0]
 8009a78:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009a7c:	f000 f95a 	bl	8009d34 <memchr>
 8009a80:	b328      	cbz	r0, 8009ace <_scanf_i+0xb6>
 8009a82:	f1bb 0f01 	cmp.w	fp, #1
 8009a86:	d159      	bne.n	8009b3c <_scanf_i+0x124>
 8009a88:	6862      	ldr	r2, [r4, #4]
 8009a8a:	b92a      	cbnz	r2, 8009a98 <_scanf_i+0x80>
 8009a8c:	2108      	movs	r1, #8
 8009a8e:	6822      	ldr	r2, [r4, #0]
 8009a90:	6061      	str	r1, [r4, #4]
 8009a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a96:	6022      	str	r2, [r4, #0]
 8009a98:	6822      	ldr	r2, [r4, #0]
 8009a9a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009a9e:	6022      	str	r2, [r4, #0]
 8009aa0:	68a2      	ldr	r2, [r4, #8]
 8009aa2:	1e51      	subs	r1, r2, #1
 8009aa4:	60a1      	str	r1, [r4, #8]
 8009aa6:	b192      	cbz	r2, 8009ace <_scanf_i+0xb6>
 8009aa8:	6832      	ldr	r2, [r6, #0]
 8009aaa:	1c51      	adds	r1, r2, #1
 8009aac:	6031      	str	r1, [r6, #0]
 8009aae:	7812      	ldrb	r2, [r2, #0]
 8009ab0:	f805 2b01 	strb.w	r2, [r5], #1
 8009ab4:	6872      	ldr	r2, [r6, #4]
 8009ab6:	3a01      	subs	r2, #1
 8009ab8:	2a00      	cmp	r2, #0
 8009aba:	6072      	str	r2, [r6, #4]
 8009abc:	dc07      	bgt.n	8009ace <_scanf_i+0xb6>
 8009abe:	4631      	mov	r1, r6
 8009ac0:	4650      	mov	r0, sl
 8009ac2:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009ac6:	4790      	blx	r2
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	f040 8085 	bne.w	8009bd8 <_scanf_i+0x1c0>
 8009ace:	f10b 0b01 	add.w	fp, fp, #1
 8009ad2:	f1bb 0f03 	cmp.w	fp, #3
 8009ad6:	d1cb      	bne.n	8009a70 <_scanf_i+0x58>
 8009ad8:	6863      	ldr	r3, [r4, #4]
 8009ada:	b90b      	cbnz	r3, 8009ae0 <_scanf_i+0xc8>
 8009adc:	230a      	movs	r3, #10
 8009ade:	6063      	str	r3, [r4, #4]
 8009ae0:	6863      	ldr	r3, [r4, #4]
 8009ae2:	4945      	ldr	r1, [pc, #276]	@ (8009bf8 <_scanf_i+0x1e0>)
 8009ae4:	6960      	ldr	r0, [r4, #20]
 8009ae6:	1ac9      	subs	r1, r1, r3
 8009ae8:	f000 f888 	bl	8009bfc <__sccl>
 8009aec:	f04f 0b00 	mov.w	fp, #0
 8009af0:	68a3      	ldr	r3, [r4, #8]
 8009af2:	6822      	ldr	r2, [r4, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d03d      	beq.n	8009b74 <_scanf_i+0x15c>
 8009af8:	6831      	ldr	r1, [r6, #0]
 8009afa:	6960      	ldr	r0, [r4, #20]
 8009afc:	f891 c000 	ldrb.w	ip, [r1]
 8009b00:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d035      	beq.n	8009b74 <_scanf_i+0x15c>
 8009b08:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009b0c:	d124      	bne.n	8009b58 <_scanf_i+0x140>
 8009b0e:	0510      	lsls	r0, r2, #20
 8009b10:	d522      	bpl.n	8009b58 <_scanf_i+0x140>
 8009b12:	f10b 0b01 	add.w	fp, fp, #1
 8009b16:	f1b9 0f00 	cmp.w	r9, #0
 8009b1a:	d003      	beq.n	8009b24 <_scanf_i+0x10c>
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009b22:	60a3      	str	r3, [r4, #8]
 8009b24:	6873      	ldr	r3, [r6, #4]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	6073      	str	r3, [r6, #4]
 8009b2c:	dd1b      	ble.n	8009b66 <_scanf_i+0x14e>
 8009b2e:	6833      	ldr	r3, [r6, #0]
 8009b30:	3301      	adds	r3, #1
 8009b32:	6033      	str	r3, [r6, #0]
 8009b34:	68a3      	ldr	r3, [r4, #8]
 8009b36:	3b01      	subs	r3, #1
 8009b38:	60a3      	str	r3, [r4, #8]
 8009b3a:	e7d9      	b.n	8009af0 <_scanf_i+0xd8>
 8009b3c:	f1bb 0f02 	cmp.w	fp, #2
 8009b40:	d1ae      	bne.n	8009aa0 <_scanf_i+0x88>
 8009b42:	6822      	ldr	r2, [r4, #0]
 8009b44:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009b48:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009b4c:	d1c4      	bne.n	8009ad8 <_scanf_i+0xc0>
 8009b4e:	2110      	movs	r1, #16
 8009b50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009b54:	6061      	str	r1, [r4, #4]
 8009b56:	e7a2      	b.n	8009a9e <_scanf_i+0x86>
 8009b58:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009b5c:	6022      	str	r2, [r4, #0]
 8009b5e:	780b      	ldrb	r3, [r1, #0]
 8009b60:	f805 3b01 	strb.w	r3, [r5], #1
 8009b64:	e7de      	b.n	8009b24 <_scanf_i+0x10c>
 8009b66:	4631      	mov	r1, r6
 8009b68:	4650      	mov	r0, sl
 8009b6a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009b6e:	4798      	blx	r3
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d0df      	beq.n	8009b34 <_scanf_i+0x11c>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	05d9      	lsls	r1, r3, #23
 8009b78:	d50d      	bpl.n	8009b96 <_scanf_i+0x17e>
 8009b7a:	42bd      	cmp	r5, r7
 8009b7c:	d909      	bls.n	8009b92 <_scanf_i+0x17a>
 8009b7e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009b82:	4632      	mov	r2, r6
 8009b84:	4650      	mov	r0, sl
 8009b86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b8a:	f105 39ff 	add.w	r9, r5, #4294967295
 8009b8e:	4798      	blx	r3
 8009b90:	464d      	mov	r5, r9
 8009b92:	42bd      	cmp	r5, r7
 8009b94:	d028      	beq.n	8009be8 <_scanf_i+0x1d0>
 8009b96:	6822      	ldr	r2, [r4, #0]
 8009b98:	f012 0210 	ands.w	r2, r2, #16
 8009b9c:	d113      	bne.n	8009bc6 <_scanf_i+0x1ae>
 8009b9e:	702a      	strb	r2, [r5, #0]
 8009ba0:	4639      	mov	r1, r7
 8009ba2:	6863      	ldr	r3, [r4, #4]
 8009ba4:	4650      	mov	r0, sl
 8009ba6:	9e01      	ldr	r6, [sp, #4]
 8009ba8:	47b0      	blx	r6
 8009baa:	f8d8 3000 	ldr.w	r3, [r8]
 8009bae:	6821      	ldr	r1, [r4, #0]
 8009bb0:	1d1a      	adds	r2, r3, #4
 8009bb2:	f8c8 2000 	str.w	r2, [r8]
 8009bb6:	f011 0f20 	tst.w	r1, #32
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	d00f      	beq.n	8009bde <_scanf_i+0x1c6>
 8009bbe:	6018      	str	r0, [r3, #0]
 8009bc0:	68e3      	ldr	r3, [r4, #12]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	60e3      	str	r3, [r4, #12]
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	6923      	ldr	r3, [r4, #16]
 8009bca:	1bed      	subs	r5, r5, r7
 8009bcc:	445d      	add	r5, fp
 8009bce:	442b      	add	r3, r5
 8009bd0:	6123      	str	r3, [r4, #16]
 8009bd2:	b007      	add	sp, #28
 8009bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd8:	f04f 0b00 	mov.w	fp, #0
 8009bdc:	e7ca      	b.n	8009b74 <_scanf_i+0x15c>
 8009bde:	07ca      	lsls	r2, r1, #31
 8009be0:	bf4c      	ite	mi
 8009be2:	8018      	strhmi	r0, [r3, #0]
 8009be4:	6018      	strpl	r0, [r3, #0]
 8009be6:	e7eb      	b.n	8009bc0 <_scanf_i+0x1a8>
 8009be8:	2001      	movs	r0, #1
 8009bea:	e7f2      	b.n	8009bd2 <_scanf_i+0x1ba>
 8009bec:	0800a004 	.word	0x0800a004
 8009bf0:	08009ea1 	.word	0x08009ea1
 8009bf4:	08009f81 	.word	0x08009f81
 8009bf8:	0800a075 	.word	0x0800a075

08009bfc <__sccl>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	780b      	ldrb	r3, [r1, #0]
 8009c00:	4604      	mov	r4, r0
 8009c02:	2b5e      	cmp	r3, #94	@ 0x5e
 8009c04:	bf0b      	itete	eq
 8009c06:	784b      	ldrbeq	r3, [r1, #1]
 8009c08:	1c4a      	addne	r2, r1, #1
 8009c0a:	1c8a      	addeq	r2, r1, #2
 8009c0c:	2100      	movne	r1, #0
 8009c0e:	bf08      	it	eq
 8009c10:	2101      	moveq	r1, #1
 8009c12:	3801      	subs	r0, #1
 8009c14:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009c18:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009c1c:	42a8      	cmp	r0, r5
 8009c1e:	d1fb      	bne.n	8009c18 <__sccl+0x1c>
 8009c20:	b90b      	cbnz	r3, 8009c26 <__sccl+0x2a>
 8009c22:	1e50      	subs	r0, r2, #1
 8009c24:	bd70      	pop	{r4, r5, r6, pc}
 8009c26:	f081 0101 	eor.w	r1, r1, #1
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	54e1      	strb	r1, [r4, r3]
 8009c2e:	4602      	mov	r2, r0
 8009c30:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009c34:	2d2d      	cmp	r5, #45	@ 0x2d
 8009c36:	d005      	beq.n	8009c44 <__sccl+0x48>
 8009c38:	2d5d      	cmp	r5, #93	@ 0x5d
 8009c3a:	d016      	beq.n	8009c6a <__sccl+0x6e>
 8009c3c:	2d00      	cmp	r5, #0
 8009c3e:	d0f1      	beq.n	8009c24 <__sccl+0x28>
 8009c40:	462b      	mov	r3, r5
 8009c42:	e7f2      	b.n	8009c2a <__sccl+0x2e>
 8009c44:	7846      	ldrb	r6, [r0, #1]
 8009c46:	2e5d      	cmp	r6, #93	@ 0x5d
 8009c48:	d0fa      	beq.n	8009c40 <__sccl+0x44>
 8009c4a:	42b3      	cmp	r3, r6
 8009c4c:	dcf8      	bgt.n	8009c40 <__sccl+0x44>
 8009c4e:	461a      	mov	r2, r3
 8009c50:	3002      	adds	r0, #2
 8009c52:	3201      	adds	r2, #1
 8009c54:	4296      	cmp	r6, r2
 8009c56:	54a1      	strb	r1, [r4, r2]
 8009c58:	dcfb      	bgt.n	8009c52 <__sccl+0x56>
 8009c5a:	1af2      	subs	r2, r6, r3
 8009c5c:	3a01      	subs	r2, #1
 8009c5e:	42b3      	cmp	r3, r6
 8009c60:	bfa8      	it	ge
 8009c62:	2200      	movge	r2, #0
 8009c64:	1c5d      	adds	r5, r3, #1
 8009c66:	18ab      	adds	r3, r5, r2
 8009c68:	e7e1      	b.n	8009c2e <__sccl+0x32>
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	e7da      	b.n	8009c24 <__sccl+0x28>

08009c6e <__submore>:
 8009c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c72:	460c      	mov	r4, r1
 8009c74:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009c76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c7a:	4299      	cmp	r1, r3
 8009c7c:	d11b      	bne.n	8009cb6 <__submore+0x48>
 8009c7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009c82:	f7ff f92d 	bl	8008ee0 <_malloc_r>
 8009c86:	b918      	cbnz	r0, 8009c90 <__submore+0x22>
 8009c88:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c94:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009c96:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009c9a:	6360      	str	r0, [r4, #52]	@ 0x34
 8009c9c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009ca0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009ca4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009ca8:	7043      	strb	r3, [r0, #1]
 8009caa:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009cae:	7003      	strb	r3, [r0, #0]
 8009cb0:	6020      	str	r0, [r4, #0]
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	e7ea      	b.n	8009c8c <__submore+0x1e>
 8009cb6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009cb8:	0077      	lsls	r7, r6, #1
 8009cba:	463a      	mov	r2, r7
 8009cbc:	f000 f848 	bl	8009d50 <_realloc_r>
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d0e0      	beq.n	8009c88 <__submore+0x1a>
 8009cc6:	eb00 0806 	add.w	r8, r0, r6
 8009cca:	4601      	mov	r1, r0
 8009ccc:	4632      	mov	r2, r6
 8009cce:	4640      	mov	r0, r8
 8009cd0:	f7ff f88e 	bl	8008df0 <memcpy>
 8009cd4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009cd8:	f8c4 8000 	str.w	r8, [r4]
 8009cdc:	e7e9      	b.n	8009cb2 <__submore+0x44>

08009cde <memmove>:
 8009cde:	4288      	cmp	r0, r1
 8009ce0:	b510      	push	{r4, lr}
 8009ce2:	eb01 0402 	add.w	r4, r1, r2
 8009ce6:	d902      	bls.n	8009cee <memmove+0x10>
 8009ce8:	4284      	cmp	r4, r0
 8009cea:	4623      	mov	r3, r4
 8009cec:	d807      	bhi.n	8009cfe <memmove+0x20>
 8009cee:	1e43      	subs	r3, r0, #1
 8009cf0:	42a1      	cmp	r1, r4
 8009cf2:	d008      	beq.n	8009d06 <memmove+0x28>
 8009cf4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cf8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cfc:	e7f8      	b.n	8009cf0 <memmove+0x12>
 8009cfe:	4601      	mov	r1, r0
 8009d00:	4402      	add	r2, r0
 8009d02:	428a      	cmp	r2, r1
 8009d04:	d100      	bne.n	8009d08 <memmove+0x2a>
 8009d06:	bd10      	pop	{r4, pc}
 8009d08:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d0c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d10:	e7f7      	b.n	8009d02 <memmove+0x24>
	...

08009d14 <_sbrk_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	2300      	movs	r3, #0
 8009d18:	4d05      	ldr	r5, [pc, #20]	@ (8009d30 <_sbrk_r+0x1c>)
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	602b      	str	r3, [r5, #0]
 8009d20:	f7f7 f8c6 	bl	8000eb0 <_sbrk>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d102      	bne.n	8009d2e <_sbrk_r+0x1a>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	b103      	cbz	r3, 8009d2e <_sbrk_r+0x1a>
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	20001674 	.word	0x20001674

08009d34 <memchr>:
 8009d34:	4603      	mov	r3, r0
 8009d36:	b510      	push	{r4, lr}
 8009d38:	b2c9      	uxtb	r1, r1
 8009d3a:	4402      	add	r2, r0
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	d101      	bne.n	8009d46 <memchr+0x12>
 8009d42:	2000      	movs	r0, #0
 8009d44:	e003      	b.n	8009d4e <memchr+0x1a>
 8009d46:	7804      	ldrb	r4, [r0, #0]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	428c      	cmp	r4, r1
 8009d4c:	d1f6      	bne.n	8009d3c <memchr+0x8>
 8009d4e:	bd10      	pop	{r4, pc}

08009d50 <_realloc_r>:
 8009d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d54:	4607      	mov	r7, r0
 8009d56:	4614      	mov	r4, r2
 8009d58:	460d      	mov	r5, r1
 8009d5a:	b921      	cbnz	r1, 8009d66 <_realloc_r+0x16>
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d62:	f7ff b8bd 	b.w	8008ee0 <_malloc_r>
 8009d66:	b92a      	cbnz	r2, 8009d74 <_realloc_r+0x24>
 8009d68:	f7ff f850 	bl	8008e0c <_free_r>
 8009d6c:	4625      	mov	r5, r4
 8009d6e:	4628      	mov	r0, r5
 8009d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d74:	f000 f906 	bl	8009f84 <_malloc_usable_size_r>
 8009d78:	4284      	cmp	r4, r0
 8009d7a:	4606      	mov	r6, r0
 8009d7c:	d802      	bhi.n	8009d84 <_realloc_r+0x34>
 8009d7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d82:	d8f4      	bhi.n	8009d6e <_realloc_r+0x1e>
 8009d84:	4621      	mov	r1, r4
 8009d86:	4638      	mov	r0, r7
 8009d88:	f7ff f8aa 	bl	8008ee0 <_malloc_r>
 8009d8c:	4680      	mov	r8, r0
 8009d8e:	b908      	cbnz	r0, 8009d94 <_realloc_r+0x44>
 8009d90:	4645      	mov	r5, r8
 8009d92:	e7ec      	b.n	8009d6e <_realloc_r+0x1e>
 8009d94:	42b4      	cmp	r4, r6
 8009d96:	4622      	mov	r2, r4
 8009d98:	4629      	mov	r1, r5
 8009d9a:	bf28      	it	cs
 8009d9c:	4632      	movcs	r2, r6
 8009d9e:	f7ff f827 	bl	8008df0 <memcpy>
 8009da2:	4629      	mov	r1, r5
 8009da4:	4638      	mov	r0, r7
 8009da6:	f7ff f831 	bl	8008e0c <_free_r>
 8009daa:	e7f1      	b.n	8009d90 <_realloc_r+0x40>

08009dac <_strtol_l.isra.0>:
 8009dac:	2b24      	cmp	r3, #36	@ 0x24
 8009dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db2:	4686      	mov	lr, r0
 8009db4:	4690      	mov	r8, r2
 8009db6:	d801      	bhi.n	8009dbc <_strtol_l.isra.0+0x10>
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d106      	bne.n	8009dca <_strtol_l.isra.0+0x1e>
 8009dbc:	f7fe ffec 	bl	8008d98 <__errno>
 8009dc0:	2316      	movs	r3, #22
 8009dc2:	6003      	str	r3, [r0, #0]
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dca:	460d      	mov	r5, r1
 8009dcc:	4833      	ldr	r0, [pc, #204]	@ (8009e9c <_strtol_l.isra.0+0xf0>)
 8009dce:	462a      	mov	r2, r5
 8009dd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dd4:	5d06      	ldrb	r6, [r0, r4]
 8009dd6:	f016 0608 	ands.w	r6, r6, #8
 8009dda:	d1f8      	bne.n	8009dce <_strtol_l.isra.0+0x22>
 8009ddc:	2c2d      	cmp	r4, #45	@ 0x2d
 8009dde:	d110      	bne.n	8009e02 <_strtol_l.isra.0+0x56>
 8009de0:	2601      	movs	r6, #1
 8009de2:	782c      	ldrb	r4, [r5, #0]
 8009de4:	1c95      	adds	r5, r2, #2
 8009de6:	f033 0210 	bics.w	r2, r3, #16
 8009dea:	d115      	bne.n	8009e18 <_strtol_l.isra.0+0x6c>
 8009dec:	2c30      	cmp	r4, #48	@ 0x30
 8009dee:	d10d      	bne.n	8009e0c <_strtol_l.isra.0+0x60>
 8009df0:	782a      	ldrb	r2, [r5, #0]
 8009df2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009df6:	2a58      	cmp	r2, #88	@ 0x58
 8009df8:	d108      	bne.n	8009e0c <_strtol_l.isra.0+0x60>
 8009dfa:	786c      	ldrb	r4, [r5, #1]
 8009dfc:	3502      	adds	r5, #2
 8009dfe:	2310      	movs	r3, #16
 8009e00:	e00a      	b.n	8009e18 <_strtol_l.isra.0+0x6c>
 8009e02:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e04:	bf04      	itt	eq
 8009e06:	782c      	ldrbeq	r4, [r5, #0]
 8009e08:	1c95      	addeq	r5, r2, #2
 8009e0a:	e7ec      	b.n	8009de6 <_strtol_l.isra.0+0x3a>
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1f6      	bne.n	8009dfe <_strtol_l.isra.0+0x52>
 8009e10:	2c30      	cmp	r4, #48	@ 0x30
 8009e12:	bf14      	ite	ne
 8009e14:	230a      	movne	r3, #10
 8009e16:	2308      	moveq	r3, #8
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009e1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009e22:	fbbc f9f3 	udiv	r9, ip, r3
 8009e26:	4610      	mov	r0, r2
 8009e28:	fb03 ca19 	mls	sl, r3, r9, ip
 8009e2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e30:	2f09      	cmp	r7, #9
 8009e32:	d80f      	bhi.n	8009e54 <_strtol_l.isra.0+0xa8>
 8009e34:	463c      	mov	r4, r7
 8009e36:	42a3      	cmp	r3, r4
 8009e38:	dd1b      	ble.n	8009e72 <_strtol_l.isra.0+0xc6>
 8009e3a:	1c57      	adds	r7, r2, #1
 8009e3c:	d007      	beq.n	8009e4e <_strtol_l.isra.0+0xa2>
 8009e3e:	4581      	cmp	r9, r0
 8009e40:	d314      	bcc.n	8009e6c <_strtol_l.isra.0+0xc0>
 8009e42:	d101      	bne.n	8009e48 <_strtol_l.isra.0+0x9c>
 8009e44:	45a2      	cmp	sl, r4
 8009e46:	db11      	blt.n	8009e6c <_strtol_l.isra.0+0xc0>
 8009e48:	2201      	movs	r2, #1
 8009e4a:	fb00 4003 	mla	r0, r0, r3, r4
 8009e4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e52:	e7eb      	b.n	8009e2c <_strtol_l.isra.0+0x80>
 8009e54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e58:	2f19      	cmp	r7, #25
 8009e5a:	d801      	bhi.n	8009e60 <_strtol_l.isra.0+0xb4>
 8009e5c:	3c37      	subs	r4, #55	@ 0x37
 8009e5e:	e7ea      	b.n	8009e36 <_strtol_l.isra.0+0x8a>
 8009e60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e64:	2f19      	cmp	r7, #25
 8009e66:	d804      	bhi.n	8009e72 <_strtol_l.isra.0+0xc6>
 8009e68:	3c57      	subs	r4, #87	@ 0x57
 8009e6a:	e7e4      	b.n	8009e36 <_strtol_l.isra.0+0x8a>
 8009e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e70:	e7ed      	b.n	8009e4e <_strtol_l.isra.0+0xa2>
 8009e72:	1c53      	adds	r3, r2, #1
 8009e74:	d108      	bne.n	8009e88 <_strtol_l.isra.0+0xdc>
 8009e76:	2322      	movs	r3, #34	@ 0x22
 8009e78:	4660      	mov	r0, ip
 8009e7a:	f8ce 3000 	str.w	r3, [lr]
 8009e7e:	f1b8 0f00 	cmp.w	r8, #0
 8009e82:	d0a0      	beq.n	8009dc6 <_strtol_l.isra.0+0x1a>
 8009e84:	1e69      	subs	r1, r5, #1
 8009e86:	e006      	b.n	8009e96 <_strtol_l.isra.0+0xea>
 8009e88:	b106      	cbz	r6, 8009e8c <_strtol_l.isra.0+0xe0>
 8009e8a:	4240      	negs	r0, r0
 8009e8c:	f1b8 0f00 	cmp.w	r8, #0
 8009e90:	d099      	beq.n	8009dc6 <_strtol_l.isra.0+0x1a>
 8009e92:	2a00      	cmp	r2, #0
 8009e94:	d1f6      	bne.n	8009e84 <_strtol_l.isra.0+0xd8>
 8009e96:	f8c8 1000 	str.w	r1, [r8]
 8009e9a:	e794      	b.n	8009dc6 <_strtol_l.isra.0+0x1a>
 8009e9c:	0800a081 	.word	0x0800a081

08009ea0 <_strtol_r>:
 8009ea0:	f7ff bf84 	b.w	8009dac <_strtol_l.isra.0>

08009ea4 <_strtoul_l.isra.0>:
 8009ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ea8:	4686      	mov	lr, r0
 8009eaa:	460d      	mov	r5, r1
 8009eac:	4e33      	ldr	r6, [pc, #204]	@ (8009f7c <_strtoul_l.isra.0+0xd8>)
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009eb4:	5d37      	ldrb	r7, [r6, r4]
 8009eb6:	f017 0708 	ands.w	r7, r7, #8
 8009eba:	d1f8      	bne.n	8009eae <_strtoul_l.isra.0+0xa>
 8009ebc:	2c2d      	cmp	r4, #45	@ 0x2d
 8009ebe:	d110      	bne.n	8009ee2 <_strtoul_l.isra.0+0x3e>
 8009ec0:	2701      	movs	r7, #1
 8009ec2:	782c      	ldrb	r4, [r5, #0]
 8009ec4:	1c85      	adds	r5, r0, #2
 8009ec6:	f033 0010 	bics.w	r0, r3, #16
 8009eca:	d115      	bne.n	8009ef8 <_strtoul_l.isra.0+0x54>
 8009ecc:	2c30      	cmp	r4, #48	@ 0x30
 8009ece:	d10d      	bne.n	8009eec <_strtoul_l.isra.0+0x48>
 8009ed0:	7828      	ldrb	r0, [r5, #0]
 8009ed2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8009ed6:	2858      	cmp	r0, #88	@ 0x58
 8009ed8:	d108      	bne.n	8009eec <_strtoul_l.isra.0+0x48>
 8009eda:	786c      	ldrb	r4, [r5, #1]
 8009edc:	3502      	adds	r5, #2
 8009ede:	2310      	movs	r3, #16
 8009ee0:	e00a      	b.n	8009ef8 <_strtoul_l.isra.0+0x54>
 8009ee2:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ee4:	bf04      	itt	eq
 8009ee6:	782c      	ldrbeq	r4, [r5, #0]
 8009ee8:	1c85      	addeq	r5, r0, #2
 8009eea:	e7ec      	b.n	8009ec6 <_strtoul_l.isra.0+0x22>
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1f6      	bne.n	8009ede <_strtoul_l.isra.0+0x3a>
 8009ef0:	2c30      	cmp	r4, #48	@ 0x30
 8009ef2:	bf14      	ite	ne
 8009ef4:	230a      	movne	r3, #10
 8009ef6:	2308      	moveq	r3, #8
 8009ef8:	f04f 38ff 	mov.w	r8, #4294967295
 8009efc:	fbb8 f8f3 	udiv	r8, r8, r3
 8009f00:	2600      	movs	r6, #0
 8009f02:	fb03 f908 	mul.w	r9, r3, r8
 8009f06:	4630      	mov	r0, r6
 8009f08:	ea6f 0909 	mvn.w	r9, r9
 8009f0c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009f10:	f1bc 0f09 	cmp.w	ip, #9
 8009f14:	d810      	bhi.n	8009f38 <_strtoul_l.isra.0+0x94>
 8009f16:	4664      	mov	r4, ip
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	dd1e      	ble.n	8009f5a <_strtoul_l.isra.0+0xb6>
 8009f1c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009f20:	d007      	beq.n	8009f32 <_strtoul_l.isra.0+0x8e>
 8009f22:	4580      	cmp	r8, r0
 8009f24:	d316      	bcc.n	8009f54 <_strtoul_l.isra.0+0xb0>
 8009f26:	d101      	bne.n	8009f2c <_strtoul_l.isra.0+0x88>
 8009f28:	45a1      	cmp	r9, r4
 8009f2a:	db13      	blt.n	8009f54 <_strtoul_l.isra.0+0xb0>
 8009f2c:	2601      	movs	r6, #1
 8009f2e:	fb00 4003 	mla	r0, r0, r3, r4
 8009f32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f36:	e7e9      	b.n	8009f0c <_strtoul_l.isra.0+0x68>
 8009f38:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009f3c:	f1bc 0f19 	cmp.w	ip, #25
 8009f40:	d801      	bhi.n	8009f46 <_strtoul_l.isra.0+0xa2>
 8009f42:	3c37      	subs	r4, #55	@ 0x37
 8009f44:	e7e8      	b.n	8009f18 <_strtoul_l.isra.0+0x74>
 8009f46:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009f4a:	f1bc 0f19 	cmp.w	ip, #25
 8009f4e:	d804      	bhi.n	8009f5a <_strtoul_l.isra.0+0xb6>
 8009f50:	3c57      	subs	r4, #87	@ 0x57
 8009f52:	e7e1      	b.n	8009f18 <_strtoul_l.isra.0+0x74>
 8009f54:	f04f 36ff 	mov.w	r6, #4294967295
 8009f58:	e7eb      	b.n	8009f32 <_strtoul_l.isra.0+0x8e>
 8009f5a:	1c73      	adds	r3, r6, #1
 8009f5c:	d106      	bne.n	8009f6c <_strtoul_l.isra.0+0xc8>
 8009f5e:	2322      	movs	r3, #34	@ 0x22
 8009f60:	4630      	mov	r0, r6
 8009f62:	f8ce 3000 	str.w	r3, [lr]
 8009f66:	b932      	cbnz	r2, 8009f76 <_strtoul_l.isra.0+0xd2>
 8009f68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f6c:	b107      	cbz	r7, 8009f70 <_strtoul_l.isra.0+0xcc>
 8009f6e:	4240      	negs	r0, r0
 8009f70:	2a00      	cmp	r2, #0
 8009f72:	d0f9      	beq.n	8009f68 <_strtoul_l.isra.0+0xc4>
 8009f74:	b106      	cbz	r6, 8009f78 <_strtoul_l.isra.0+0xd4>
 8009f76:	1e69      	subs	r1, r5, #1
 8009f78:	6011      	str	r1, [r2, #0]
 8009f7a:	e7f5      	b.n	8009f68 <_strtoul_l.isra.0+0xc4>
 8009f7c:	0800a081 	.word	0x0800a081

08009f80 <_strtoul_r>:
 8009f80:	f7ff bf90 	b.w	8009ea4 <_strtoul_l.isra.0>

08009f84 <_malloc_usable_size_r>:
 8009f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f88:	1f18      	subs	r0, r3, #4
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	bfbc      	itt	lt
 8009f8e:	580b      	ldrlt	r3, [r1, r0]
 8009f90:	18c0      	addlt	r0, r0, r3
 8009f92:	4770      	bx	lr

08009f94 <_init>:
 8009f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f96:	bf00      	nop
 8009f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9a:	bc08      	pop	{r3}
 8009f9c:	469e      	mov	lr, r3
 8009f9e:	4770      	bx	lr

08009fa0 <_fini>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	bf00      	nop
 8009fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa6:	bc08      	pop	{r3}
 8009fa8:	469e      	mov	lr, r3
 8009faa:	4770      	bx	lr
